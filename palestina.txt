/* VARIABLES */

/* ROOM */

const roomName = '2️⃣ LHE | Sala Privada 2';
const maxPlayers = 40;
const roomPublic = false
const token = 'thr1.AAAAAGiIzoJftGTUFoZMAQ.m1uVJwUHd34'; // Insert token here

var roomWebhook = 'https://discord.com/api/webhooks/1373278132345376779/N_PDzlXu9kuVLI5RJTlYJ9JmdTdUrMlRkgkomM-OjoeArsNH8vyUq_4gklOZ-BCDzaXS'; // this webhook is used to send the details of the room (chat, join, leave) ; it should be in a private discord channel
var gameWebhook = 'https://discord.com/api/webhooks/1373278301694591058/er3wleVKLg1JWIzowVVrpqR0qm_0F1sDdVuVLhcTynWb25Snfpoh65U4g1Yp6BH1Euhw'; // this webhook is used to send the summary of the games ; it should be in a public discord channel
var fetchRecordingVariable = true;
var timeLimit = 0;
var scoreLimit = 0;
var geo = {"code": "ES", "lat": 39.3999, "lon": -3.2245};

var gameConfig = {
    roomName: roomName,
    maxPlayers: maxPlayers,
    public: roomPublic,
    noPlayer: true,
}

if (typeof token == 'string' && token.length == 39) {
    gameConfig.token = token;
}

var room = HBInit(gameConfig);

const trainingMap = '{"name":"LHE Entrenamiento x7 [\u029c\u1d00x\u1d0d\u1d0f\u1d05s.\u1d04\u1d0f\u1d0d]","width":810,"height":350,"bg":{"kickOffRadius":80,"color":"1D2431"},"vertexes":[{"x":-700,"y":-85,"bCoef":0.1,"cMask":["ball"]},{"x":-735,"y":-85,"bCoef":0.1,"cMask":["ball"]},{"x":-734,"y":-86,"bCoef":0.1,"cMask":["ball"]},{"x":-734,"y":86,"bCoef":0.1,"cMask":["ball"]},{"x":-735,"y":85,"bCoef":0.1,"cMask":["ball"]},{"x":-700,"y":85,"bCoef":0.1,"cMask":["ball"]},{"x":700,"y":85,"bCoef":0.1,"cMask":["ball"]},{"x":735,"y":85,"bCoef":0.1,"cMask":["ball"]},{"x":734,"y":86,"bCoef":0.1,"cMask":["ball"]},{"x":734,"y":-86,"bCoef":0.1,"cMask":["ball"]},{"x":735,"y":-85,"bCoef":0.1,"cMask":["ball"]},{"x":700,"y":-85,"bCoef":0.1,"cMask":["ball"]},{"x":-700,"y":-321.5,"cMask":["ball"]},{"x":-700,"y":-85,"cMask":["ball"]},{"x":-700,"y":85,"cMask":["ball"]},{"x":-700,"y":321.5,"cMask":["ball"]},{"x":-700,"y":320,"cMask":["ball"]},{"x":700,"y":320,"cMask":["ball"]},{"x":700,"y":321.5,"cMask":["ball"]},{"x":700,"y":85,"cMask":["ball"]},{"x":700,"y":-85,"cMask":["ball"]},{"x":700,"y":-321.5,"cMask":["ball"]},{"x":700,"y":-320,"cMask":["ball"]},{"x":-700,"y":-320,"cMask":["ball"]},{"x":-700,"y":-85,"cMask":[]},{"x":-700,"y":85,"cMask":[]},{"x":700,"y":85,"cMask":[]},{"x":700,"y":-85,"cMask":[]},{"x":-360,"y":318,"cMask":[]},{"x":-360,"y":-318,"cMask":[]},{"x":360,"y":-318,"cMask":[]},{"x":360,"y":318,"cMask":[]},{"x":-500,"y":-1,"cMask":[]},{"x":-500,"y":1,"cMask":[]},{"x":-500,"y":-2,"cMask":[]},{"x":-500,"y":2,"cMask":[]},{"x":0,"y":-80,"cMask":[],"cGroup":[]},{"x":0,"y":80,"cMask":[],"cGroup":[]},{"x":0,"y":-350,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":350,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":-318,"cMask":[]},{"x":0,"y":-80,"cMask":[]},{"x":0,"y":318,"cMask":[]},{"x":0,"y":80,"cMask":[]},{"x":500,"y":-1,"cMask":[]},{"x":500,"y":1,"cMask":[]},{"x":500,"y":-2,"cMask":[]},{"x":500,"y":2,"cMask":[]},{"x":-360,"y":-135,"cMask":[]},{"x":-360,"y":135,"cMask":[]},{"x":360,"y":135,"cMask":[]},{"x":360,"y":-135,"cMask":[]},{"x":-698,"y":125,"cMask":[]},{"x":-630,"y":125,"cMask":[]},{"x":-630,"y":-125,"cMask":[]},{"x":-698,"y":-125,"cMask":[]},{"x":-630,"y":126.5,"cMask":[]},{"x":-630,"y":-126.5,"cMask":[]},{"x":698,"y":125,"cMask":[]},{"x":630,"y":125,"cMask":[]},{"x":630,"y":-125,"cMask":[]},{"x":698,"y":-125,"cMask":[]},{"x":630,"y":126.5,"cMask":[]},{"x":630,"y":-126.5,"cMask":[]},{"x":-50,"y":30,"cMask":[]},{"x":-25,"y":-30,"cMask":[]},{"x":11,"y":30,"cMask":[]},{"x":20,"y":-30,"cMask":[]},{"x":-42.5,"y":30,"cMask":[]},{"x":-17.5,"y":-30,"cMask":[]},{"x":-52,"y":30,"cMask":[]},{"x":-27,"y":-30,"cMask":[]},{"x":-40.5,"y":30,"cMask":[]},{"x":-15.5,"y":-30,"cMask":[]},{"x":-33,"y":30,"cMask":[]},{"x":-8,"y":-30,"cMask":[]},{"x":-31,"y":30,"cMask":[]},{"x":-6,"y":-30,"cMask":[]},{"x":-29,"y":30,"cMask":[]},{"x":-4,"y":-30,"cMask":[]},{"x":-27,"y":30,"cMask":[]},{"x":-2,"y":-30,"cMask":[]},{"x":-25,"y":30,"cMask":[]},{"x":0,"y":-30,"cMask":[]},{"x":5,"y":30,"cMask":[]},{"x":0,"y":-30,"cMask":[]},{"x":3,"y":30,"cMask":[]},{"x":-2,"y":-30,"cMask":[]},{"x":1,"y":30,"cMask":[]},{"x":-4,"y":-30,"cMask":[]},{"x":-1,"y":30,"cMask":[]},{"x":-6,"y":-30,"cMask":[]},{"x":-3,"y":30,"cMask":[]},{"x":-8,"y":-30,"cMask":[]},{"x":-21,"y":19,"cMask":[]},{"x":-5,"y":19,"cMask":[]},{"x":-21,"y":17,"cMask":[]},{"x":-5,"y":17,"cMask":[]},{"x":-21,"y":15,"cMask":[]},{"x":-5,"y":15,"cMask":[]},{"x":-21,"y":13,"cMask":[]},{"x":-5,"y":13,"cMask":[]},{"x":-21,"y":11,"cMask":[]},{"x":-5,"y":11,"cMask":[]},{"x":13,"y":30,"cMask":[]},{"x":22,"y":-30,"cMask":[]},{"x":15,"y":30,"cMask":[]},{"x":24,"y":-30,"cMask":[]},{"x":17,"y":30,"cMask":[]},{"x":26,"y":-30,"cMask":[]},{"x":19,"y":30,"cMask":[]},{"x":28,"y":-30,"cMask":[]},{"x":19,"y":-29,"cMask":[]},{"x":49,"y":-29,"cMask":[]},{"x":19,"y":-27,"cMask":[]},{"x":49,"y":-27,"cMask":[]},{"x":19,"y":-25,"cMask":[]},{"x":49,"y":-25,"cMask":[]},{"x":19,"y":-23,"cMask":[]},{"x":49,"y":-23,"cMask":[]},{"x":19,"y":-21,"cMask":[]},{"x":49,"y":-21,"cMask":[]},{"x":23,"y":-6,"cMask":[]},{"x":42,"y":-6,"cMask":[]},{"x":23,"y":-4,"cMask":[]},{"x":42,"y":-4,"cMask":[]},{"x":23,"y":-2,"cMask":[]},{"x":42,"y":-2,"cMask":[]},{"x":23,"y":0,"cMask":[]},{"x":42,"y":0,"cMask":[]},{"x":23,"y":2,"cMask":[]},{"x":42,"y":2,"cMask":[]},{"x":-52,"y":27,"cMask":[]},{"x":-27,"y":-33,"cMask":[]},{"x":9,"y":27,"cMask":[]},{"x":18,"y":-33,"cMask":[]},{"x":-44.5,"y":27,"cMask":[]},{"x":-19.5,"y":-33,"cMask":[]},{"x":-54,"y":27,"cMask":[]},{"x":-29,"y":-33,"cMask":[]},{"x":-42.5,"y":27,"cMask":[]},{"x":-17.5,"y":-33,"cMask":[]},{"x":-35,"y":27,"cMask":[]},{"x":-10,"y":-33,"cMask":[]},{"x":-33,"y":27,"cMask":[]},{"x":-8,"y":-33,"cMask":[]},{"x":-31,"y":27,"cMask":[]},{"x":-6,"y":-33,"cMask":[]},{"x":-29,"y":27,"cMask":[]},{"x":-4,"y":-33,"cMask":[]},{"x":-27,"y":27,"cMask":[]},{"x":-2,"y":-33,"cMask":[]},{"x":3,"y":27,"cMask":[]},{"x":-2,"y":-33,"cMask":[]},{"x":1,"y":27,"cMask":[]},{"x":-4,"y":-33,"cMask":[]},{"x":-1,"y":27,"cMask":[]},{"x":-6,"y":-33,"cMask":[]},{"x":-3,"y":27,"cMask":[]},{"x":-8,"y":-33,"cMask":[]},{"x":-5,"y":27,"cMask":[]},{"x":-10,"y":-33,"cMask":[]},{"x":-23,"y":16,"cMask":[]},{"x":-7,"y":16,"cMask":[]},{"x":-23,"y":14,"cMask":[]},{"x":-7,"y":14,"cMask":[]},{"x":-23,"y":12,"cMask":[]},{"x":-7,"y":12,"cMask":[]},{"x":-23,"y":10,"cMask":[]},{"x":-7,"y":10,"cMask":[]},{"x":-23,"y":8,"cMask":[]},{"x":-7,"y":8,"cMask":[]},{"x":11,"y":27,"cMask":[]},{"x":20,"y":-33,"cMask":[]},{"x":13,"y":27,"cMask":[]},{"x":22,"y":-33,"cMask":[]},{"x":15,"y":27,"cMask":[]},{"x":24,"y":-33,"cMask":[]},{"x":17,"y":27,"cMask":[]},{"x":26,"y":-33,"cMask":[]},{"x":17,"y":-32,"cMask":[]},{"x":47,"y":-32,"cMask":[]},{"x":17,"y":-30,"cMask":[]},{"x":47,"y":-30,"cMask":[]},{"x":17,"y":-28,"cMask":[]},{"x":47,"y":-28,"cMask":[]},{"x":17,"y":-26,"cMask":[]},{"x":47,"y":-26,"cMask":[]},{"x":17,"y":-24,"cMask":[]},{"x":47,"y":-24,"cMask":[]},{"x":21,"y":-9,"cMask":[]},{"x":40,"y":-9,"cMask":[]},{"x":21,"y":-7,"cMask":[]},{"x":40,"y":-7,"cMask":[]},{"x":21,"y":-5,"cMask":[]},{"x":40,"y":-5,"cMask":[]},{"x":21,"y":-3,"cMask":[]},{"x":40,"y":-3,"cMask":[]},{"x":21,"y":-1,"cMask":[]},{"x":40,"y":-1,"cMask":[]},{"x":0,"y":-350,"cMask":["red","blue","ball"]},{"x":0,"y":350,"cMask":["red","blue","ball"]},{"x":9,"y":-350,"cMask":["red","blue","ball"]},{"x":9,"y":350,"cMask":["red","blue","ball"]},{"x":12,"y":-350,"cMask":["red","blue","ball"]},{"x":12,"y":350,"cMask":["red","blue","ball"]},{"x":15,"y":-350,"cMask":["red","blue","ball"]},{"x":15,"y":350,"cMask":["red","blue","ball"]},{"x":18,"y":-350,"cMask":["red","blue","ball"]},{"x":18,"y":350,"cMask":["red","blue","ball"]},{"x":21,"y":-350,"cMask":["red","blue","ball"]},{"x":21,"y":350,"cMask":["red","blue","ball"]},{"x":24,"y":-350,"cMask":["red","blue","ball"]},{"x":24,"y":350,"cMask":["red","blue","ball"]},{"x":27,"y":-350,"cMask":["red","blue","ball"]},{"x":27,"y":350,"cMask":["red","blue","ball"]},{"x":30,"y":-350,"cMask":["red","blue","ball"]},{"x":30,"y":350,"cMask":["red","blue","ball"]},{"x":33,"y":-350,"cMask":["red","blue","ball"]},{"x":33,"y":350,"cMask":["red","blue","ball"]},{"x":36,"y":-350,"cMask":["red","blue","ball"]},{"x":36,"y":350,"cMask":["red","blue","ball"]},{"x":-9,"y":-350,"cMask":["red","blue","ball"]},{"x":-9,"y":350,"cMask":["red","blue","ball"]},{"x":-12,"y":-350,"cMask":["red","blue","ball"]},{"x":-12,"y":350,"cMask":["red","blue","ball"]},{"x":-15,"y":-350,"cMask":["red","blue","ball"]},{"x":-15,"y":350,"cMask":["red","blue","ball"]},{"x":-18,"y":-350,"cMask":["red","blue","ball"]},{"x":-18,"y":350,"cMask":["red","blue","ball"]},{"x":-21,"y":-350,"cMask":["red","blue","ball"]},{"x":-21,"y":350,"cMask":["red","blue","ball"]},{"x":-24,"y":-350,"cMask":["red","blue","ball"]},{"x":-24,"y":350,"cMask":["red","blue","ball"]},{"x":-27,"y":-350,"cMask":["red","blue","ball"]},{"x":-27,"y":350,"cMask":["red","blue","ball"]},{"x":-30,"y":-350,"cMask":["red","blue","ball"]},{"x":-30,"y":350,"cMask":["red","blue","ball"]},{"x":-33,"y":-350,"cMask":["red","blue","ball"]},{"x":-33,"y":350,"cMask":["red","blue","ball"]},{"x":-36,"y":-350,"cMask":["red","blue","ball"]},{"x":-36,"y":350,"cMask":["red","blue","ball"]}],"segments":[{"v0":0,"v1":1,"bias":10,"bCoef":0.1,"cMask":["ball"],"color":"717F98"},{"v0":3,"v1":2,"bias":-10,"bCoef":0.1,"curve":35,"curveF":3.1715948023632126,"cMask":["ball"],"color":"717F98"},{"v0":4,"v1":5,"bias":10,"bCoef":0.1,"cMask":["ball"],"color":"717F98"},{"v0":6,"v1":7,"bias":10,"bCoef":0.1,"cMask":["ball"],"color":"717F98"},{"v0":9,"v1":8,"bias":-10,"bCoef":0.1,"curve":35,"curveF":3.1715948023632126,"cMask":["ball"],"color":"717F98"},{"v0":10,"v1":11,"bias":10,"bCoef":0.1,"cMask":["ball"],"color":"717F98"},{"v0":12,"v1":13,"bias":10,"cMask":["ball"],"color":"717F98"},{"v0":14,"v1":15,"bias":10,"cMask":["ball"],"color":"717F98"},{"v0":16,"v1":17,"bias":10,"cMask":["ball"],"color":"717F98"},{"v0":18,"v1":19,"bias":10,"cMask":["ball"],"color":"717F98"},{"v0":20,"v1":21,"bias":10,"cMask":["ball"],"color":"717F98"},{"v0":22,"v1":23,"bias":10,"cMask":["ball"],"color":"717F98"},{"v0":24,"v1":25,"cMask":[],"color":"3B424F"},{"v0":26,"v1":27,"cMask":[],"color":"3B424F"},{"v0":28,"v1":29,"cMask":[],"color":"161C26"},{"v0":30,"v1":31,"cMask":[],"color":"161C26"},{"v0":33,"v1":32,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":32,"v1":33,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":35,"v1":34,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":34,"v1":35,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":38,"v1":36,"vis":false,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":39,"v1":37,"vis":false,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":37,"v1":36,"curve":180,"curveF":6.123233995736766e-17,"vis":false,"cMask":[],"cGroup":[]},{"v0":36,"v1":37,"curve":180,"curveF":6.123233995736766e-17,"vis":false,"cMask":[],"cGroup":[]},{"v0":40,"v1":41,"cMask":[],"color":"161C26"},{"v0":42,"v1":43,"cMask":[],"color":"161C26"},{"v0":43,"v1":41,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":41,"v1":43,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":45,"v1":44,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":44,"v1":45,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":47,"v1":46,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":46,"v1":47,"curve":180,"curveF":6.123233995736766e-17,"cMask":[],"color":"161C26"},{"v0":48,"v1":49,"curve":89.99999999999999,"curveF":1.0000000000000002,"cMask":[],"color":"161C26"},{"v0":50,"v1":51,"curve":89.99999999999999,"curveF":1.0000000000000002,"cMask":[],"color":"161C26"},{"v0":52,"v1":53,"cMask":[],"color":"161C26"},{"v0":54,"v1":55,"cMask":[],"color":"161C26"},{"v0":56,"v1":57,"cMask":[],"color":"161C26"},{"v0":58,"v1":59,"cMask":[],"color":"161C26"},{"v0":60,"v1":61,"cMask":[],"color":"161C26"},{"v0":62,"v1":63,"cMask":[],"color":"161C26"},{"v0":64,"v1":65,"cMask":[],"color":"9101D"},{"v0":66,"v1":67,"cMask":[],"color":"9101D"},{"v0":68,"v1":69,"cMask":[],"color":"9101D"},{"v0":70,"v1":71,"cMask":[],"color":"9101D"},{"v0":72,"v1":73,"cMask":[],"color":"9101D"},{"v0":74,"v1":75,"cMask":[],"color":"9101D"},{"v0":76,"v1":77,"cMask":[],"color":"9101D"},{"v0":78,"v1":79,"cMask":[],"color":"9101D"},{"v0":80,"v1":81,"cMask":[],"color":"9101D"},{"v0":82,"v1":83,"cMask":[],"color":"9101D"},{"v0":84,"v1":85,"cMask":[],"color":"9101D"},{"v0":86,"v1":87,"cMask":[],"color":"9101D"},{"v0":88,"v1":89,"cMask":[],"color":"9101D"},{"v0":90,"v1":91,"cMask":[],"color":"9101D"},{"v0":92,"v1":93,"cMask":[],"color":"9101D"},{"v0":94,"v1":95,"cMask":[],"color":"9101D"},{"v0":96,"v1":97,"cMask":[],"color":"9101D"},{"v0":98,"v1":99,"cMask":[],"color":"9101D"},{"v0":100,"v1":101,"cMask":[],"color":"9101D"},{"v0":102,"v1":103,"cMask":[],"color":"9101D"},{"v0":104,"v1":105,"cMask":[],"color":"9101D"},{"v0":106,"v1":107,"cMask":[],"color":"9101D"},{"v0":108,"v1":109,"cMask":[],"color":"9101D"},{"v0":110,"v1":111,"cMask":[],"color":"9101D"},{"v0":112,"v1":113,"cMask":[],"color":"9101D"},{"v0":114,"v1":115,"cMask":[],"color":"9101D"},{"v0":116,"v1":117,"cMask":[],"color":"9101D"},{"v0":118,"v1":119,"cMask":[],"color":"9101D"},{"v0":120,"v1":121,"cMask":[],"color":"9101D"},{"v0":122,"v1":123,"cMask":[],"color":"9101D"},{"v0":124,"v1":125,"cMask":[],"color":"9101D"},{"v0":126,"v1":127,"cMask":[],"color":"9101D"},{"v0":128,"v1":129,"cMask":[],"color":"9101D"},{"v0":130,"v1":131,"cMask":[],"color":"9101D"},{"v0":132,"v1":133,"cMask":[],"color":"333945"},{"v0":134,"v1":135,"cMask":[],"color":"333945"},{"v0":136,"v1":137,"cMask":[],"color":"333945"},{"v0":138,"v1":139,"cMask":[],"color":"333945"},{"v0":140,"v1":141,"cMask":[],"color":"333945"},{"v0":142,"v1":143,"cMask":[],"color":"333945"},{"v0":144,"v1":145,"cMask":[],"color":"333945"},{"v0":146,"v1":147,"cMask":[],"color":"333945"},{"v0":148,"v1":149,"cMask":[],"color":"333945"},{"v0":150,"v1":151,"cMask":[],"color":"333945"},{"v0":152,"v1":153,"cMask":[],"color":"333945"},{"v0":154,"v1":155,"cMask":[],"color":"333945"},{"v0":156,"v1":157,"cMask":[],"color":"333945"},{"v0":158,"v1":159,"cMask":[],"color":"333945"},{"v0":160,"v1":161,"cMask":[],"color":"333945"},{"v0":162,"v1":163,"cMask":[],"color":"333945"},{"v0":164,"v1":165,"cMask":[],"color":"333945"},{"v0":166,"v1":167,"cMask":[],"color":"333945"},{"v0":168,"v1":169,"cMask":[],"color":"333945"},{"v0":170,"v1":171,"cMask":[],"color":"333945"},{"v0":172,"v1":173,"cMask":[],"color":"333945"},{"v0":174,"v1":175,"cMask":[],"color":"333945"},{"v0":176,"v1":177,"cMask":[],"color":"333945"},{"v0":178,"v1":179,"cMask":[],"color":"333945"},{"v0":180,"v1":181,"cMask":[],"color":"333945"},{"v0":182,"v1":183,"cMask":[],"color":"333945"},{"v0":184,"v1":185,"cMask":[],"color":"333945"},{"v0":186,"v1":187,"cMask":[],"color":"333945"},{"v0":188,"v1":189,"cMask":[],"color":"333945"},{"v0":190,"v1":191,"cMask":[],"color":"333945"},{"v0":192,"v1":193,"cMask":[],"color":"333945"},{"v0":194,"v1":195,"cMask":[],"color":"333945"},{"v0":196,"v1":197,"cMask":[],"color":"333945"},{"v0":198,"v1":199,"cMask":[],"color":"333945"},{"v0":200,"v1":201,"vis":false,"cMask":["red","blue","ball"]},{"v0":202,"v1":203,"vis":false,"cMask":["red","blue","ball"]},{"v0":204,"v1":205,"vis":false,"cMask":["red","blue","ball"]},{"v0":206,"v1":207,"vis":false,"cMask":["red","blue","ball"]},{"v0":208,"v1":209,"vis":false,"cMask":["red","blue","ball"]},{"v0":210,"v1":211,"vis":false,"cMask":["red","blue","ball"]},{"v0":212,"v1":213,"vis":false,"cMask":["red","blue","ball"]},{"v0":214,"v1":215,"vis":false,"cMask":["red","blue","ball"]},{"v0":216,"v1":217,"vis":false,"cMask":["red","blue","ball"]},{"v0":218,"v1":219,"vis":false,"cMask":["red","blue","ball"]},{"v0":220,"v1":221,"cMask":["red","blue","ball"],"color":"A0908"},{"v0":222,"v1":223,"vis":false,"cMask":["red","blue","ball"]},{"v0":224,"v1":225,"vis":false,"cMask":["red","blue","ball"]},{"v0":226,"v1":227,"vis":false,"cMask":["red","blue","ball"]},{"v0":228,"v1":229,"vis":false,"cMask":["red","blue","ball"]},{"v0":230,"v1":231,"vis":false,"cMask":["red","blue","ball"]},{"v0":232,"v1":233,"vis":false,"cMask":["red","blue","ball"]},{"v0":234,"v1":235,"vis":false,"cMask":["red","blue","ball"]},{"v0":236,"v1":237,"vis":false,"cMask":["red","blue","ball"]},{"v0":238,"v1":239,"vis":false,"cMask":["red","blue","ball"]},{"v0":240,"v1":241,"cMask":["red","blue","ball"],"color":"A0908"}],"planes":[{"normal":[0,1],"dist":-350},{"normal":[0,-1],"dist":-350},{"normal":[1,0],"dist":-810},{"normal":[-1,0],"dist":-810},{"normal":[-1,0],"dist":-360,"bCoef":0,"cMask":["c1"]},{"normal":[1,0],"dist":-360,"bCoef":0,"cMask":["c0"]}],"goals":[],"discs":[{"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cGroup":["ball","kick","score"]},{"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"0","cGroup":["ball","kick"]},{"pos":[-700,-85],"radius":5.4,"invMass":0,"color":"A0908"},{"pos":[700,-85],"radius":5.4,"invMass":0,"color":"A0908"},{"pos":[700,85],"radius":5.4,"invMass":0,"color":"A0908"},{"pos":[-700,85],"radius":5.4,"invMass":0,"color":"A0908"},{"pos":[-400,0],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[-400,25],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[-400,50],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[-400,75],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[-400,-25],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[-400,-50],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[-400,-75],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[400,0],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[400,25],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[400,50],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[400,75],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[400,-25],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[400,-50],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[400,-75],"radius":5.8,"bCoef":0.412,"invMass":1.5,"color":"FFA500","cMask":["red","blue","wall"],"cGroup":["ball","kick"]},{"pos":[-700,-85],"radius":5.4,"invMass":0,"color":"31726"},{"pos":[700,-85],"radius":5.4,"invMass":0,"color":"31726"},{"pos":[700,85],"radius":5.4,"invMass":0,"color":"31726"},{"pos":[-700,85],"radius":5.4,"invMass":0,"color":"31726"}],"playerPhysics":{"bCoef":0,"acceleration":0.11,"kickingAcceleration":0.083,"kickStrength":4.545},"ballPhysics":"disc0","spawnDistance":366.5,"canBeStored":true}';
const classicMap = '{"name":"FUTx7 LHE Super Cup [\u029c\u1d00x\u1d0d\u1d0f\u1d05s.\u1d04\u1d0f\u1d0d]","width":1275,"height":675,"spawnDistance":350,"redSpawnPoints":[[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-500,0],[-396,635]],"blueSpawnPoints":[[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[500,0],[396,635]],"bg":{"type":"","height":0,"width":0,"color":"0e0e11"},"vertexes":[{"x":-1200,"y":-110,"trait":"goalNet","curve":0,"color":"0347e4","bias":12},{"x":-1250,"y":-110,"cMask":["ball"],"trait":"goalNet","curve":0,"color":"0347e4","bias":-12},{"x":-1250,"y":110,"cMask":["ball"],"trait":"goalNet","curve":0,"color":"0347e4","radius":7,"bias":-12},{"x":-1200,"y":110,"trait":"goalNet","curve":0,"color":"0347e4","bias":12},{"x":1200,"y":-110,"trait":"goalNet","curve":0,"color":"0347e4","bias":-12},{"x":1250,"y":-110,"trait":"goalNet","curve":0,"color":"0347e4","bias":12},{"x":1250,"y":110,"trait":"goalNet","curve":0,"color":"0347e4","bias":12},{"x":1200,"y":110,"trait":"goalNet","curve":0,"color":"0347e4","bias":-12},{"x":1200,"y":600,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0,"color":"ffffff","bias":12},{"x":1200,"y":-600,"bCoef":1,"cMask":["ball"],"trait":"ballArea","bias":-12,"color":"ffffff"},{"x":-1200,"y":600,"bCoef":1,"cMask":["ball"],"trait":"ballArea","curve":0,"vis":false,"bias":-12,"color":"ffffff"},{"x":-1200,"y":-600,"bCoef":1,"cMask":["ball"],"trait":"ballArea","vis":false,"curve":0,"bias":-12,"color":"ffffff"},{"x":1200,"y":-110,"bCoef":1,"cMask":["ball"],"trait":"ballArea","vis":false,"curve":0},{"x":1200,"y":-110,"bCoef":2,"cMask":["ball"],"trait":"ballArea","vis":false,"curve":0},{"x":1200,"y":-110,"bCoef":0,"cMask":[""],"trait":"line","curve":0,"color":"0347e4"},{"x":1200,"y":110,"bCoef":0,"cMask":[""],"trait":"line","curve":0,"color":"0347e4"},{"x":-525.1982581967213,"y":584,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-525.1982581967213,"y":616,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-267.4933401639344,"y":584,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-267.4933401639344,"y":616,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":505.62141393442624,"y":584,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":505.62141393442624,"y":616,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":247.91649590163934,"y":584,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":247.91649590163934,"y":616,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-828.0015368852459,"y":602,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-828.0015368852459,"y":616,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":1220.33349609375,"y":251.9681483400014,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":1201.33349609375,"y":251.9681483400014,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":1219.33349609375,"y":-251.9681483400014,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":1200.33349609375,"y":-251.9681483400014,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-841.1245088945966,"y":-602,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-841.1245088945966,"y":-617,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":808.4246926229508,"y":602,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":808.4246926229508,"y":616,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":837.7690984113394,"y":-602,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":837.7690984113394,"y":-617,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-1220.0747488827305,"y":-251.82895884262769,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-1201.0752587242073,"y":-251.9681483400014,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-1218.9226063416277,"y":251.9681483400014,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-1199.9231161831044,"y":251.9681483400014,"bCoef":0.1,"trait":"line","color":"1f5de6"},{"x":-1200,"y":570.456511053482,"bCoef":0.1,"trait":"line","curve":-90,"color":"1f5de6"},{"x":-1171.6369452864983,"y":600,"bCoef":0.1,"trait":"line","curve":-90,"color":"1f5de6"},{"x":-1200,"y":-569.6420271253103,"bCoef":0.1,"trait":"line","curve":90,"color":"1f5de6"},{"x":-1170.6369452864983,"y":-600,"bCoef":0.1,"trait":"line","curve":90,"color":"1f5de6"},{"x":1200,"y":-571.0124590189979,"bCoef":0.1,"trait":"line","curve":-90,"color":"1f5de6"},{"x":1170.319141439366,"y":-600,"bCoef":0.1,"trait":"line","curve":-90,"color":"1f5de6"},{"x":1200,"y":569.9997004222528,"bCoef":0.1,"trait":"line","curve":90,"color":"1f5de6"},{"x":1171.319141439366,"y":600,"bCoef":0.1,"trait":"line","curve":90,"color":"1f5de6"},{"x":-787,"y":205,"bCoef":0,"cMask":[""],"trait":"line","curve":-90,"color":"0347e4"},{"x":-787,"y":-205,"bCoef":0,"cMask":[""],"trait":"line","curve":90,"color":"0347e4"},{"x":-1075,"y":-470,"bCoef":0,"cMask":[""],"trait":"line","curve":90,"color":"0347e4"},{"x":-787,"y":-5,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":-787,"y":0.1561968168675687,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":-610,"y":-1.1475001518364962,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":-610,"y":2.077131467790089,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":-610,"y":-299,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":-610,"y":-296,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":-610,"y":296,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":-610,"y":299,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":-1200,"y":110,"bCoef":0,"trait":"line","color":"0347e4"},{"x":-1200,"y":-110,"bCoef":0,"trait":"line","color":"0347e4"},{"x":-1200,"y":110,"bCoef":1,"trait":"ballArea","color":"ffffff","bias":-12},{"x":-1200,"y":75,"bCoef":0,"trait":"line","color":"ffffff"},{"x":-1200,"y":39,"bCoef":0,"trait":"line","color":"ffffff"},{"x":-1200,"y":12,"bCoef":0,"trait":"line","color":"ffffff"},{"x":-1200,"y":-75,"bCoef":0,"trait":"line","color":"ffffff"},{"x":-1200,"y":-110,"bCoef":1,"trait":"ballArea","color":"ffffff","bias":12},{"x":-1200,"y":-15,"bCoef":0,"trait":"line","color":"ffffff"},{"x":-1200,"y":-42,"bCoef":0,"trait":"line","color":"ffffff"},{"x":1200,"y":110,"bCoef":1,"trait":"ballArea","color":"ffffff","bias":12},{"x":1200,"y":76,"bCoef":0,"trait":"line","color":"ffffff"},{"x":1200,"y":39,"bCoef":0,"trait":"line","color":"ffffff"},{"x":1200,"y":12,"bCoef":0,"trait":"line","color":"ffffff"},{"x":1200,"y":-75,"bCoef":0,"trait":"line","color":"ffffff"},{"x":1200,"y":-110,"bCoef":1,"trait":"ballArea","color":"ffffff","bias":-12},{"x":1200,"y":-15,"bCoef":0,"trait":"line","color":"ffffff"},{"x":1200,"y":-42,"bCoef":0,"trait":"line","color":"ffffff"},{"x":-1200,"y":-470,"bCoef":0,"trait":"line","curve":0,"color":"0347e4"},{"x":-1075,"y":470,"bCoef":0,"trait":"line","curve":-90,"color":"0347e4"},{"x":-1200,"y":470,"bCoef":0,"trait":"line","color":"0347e4"},{"x":787,"y":205,"bCoef":0,"cMask":[""],"trait":"line","curve":0,"color":"0347e4"},{"x":1075,"y":470,"bCoef":0,"cMask":[""],"trait":"line","curve":-90,"color":"0347e4"},{"x":787,"y":-205,"bCoef":0,"cMask":[""],"trait":"line","curve":0,"color":"0347e4"},{"x":787,"y":5.145341211815264,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":787,"y":-0.010663810350735048,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":1200,"y":470,"bCoef":0,"trait":"line","curve":0,"color":"0347e4"},{"x":1075,"y":-470,"bCoef":0,"trait":"line","curve":90,"color":"0347e4"},{"x":1200,"y":-470,"bCoef":0,"trait":"line","color":"0347e4"},{"x":610,"y":-1.1475001518364962,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":610,"y":2.077131467790089,"bCoef":0.1,"trait":"line","curve":180,"color":"0347e4"},{"x":610,"y":-299,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":610,"y":-296,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":610,"y":296,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":610,"y":299,"bCoef":0.1,"trait":"line","curve":200,"color":"0347e4"},{"x":0,"y":180,"bCoef":0,"trait":"kickOffBarrier","color":"0347e4"},{"x":0,"y":600,"bCoef":0,"trait":"kickOffBarrier","color":"0347e4"},{"x":0,"y":-180,"bCoef":0,"trait":"kickOffBarrier","color":"0347e4"},{"x":0,"y":-600,"bCoef":0,"trait":"kickOffBarrier","color":"0347e4"},{"x":0,"y":-180,"bCoef":0,"trait":"kickOffBarrier","curve":180,"color":"0347e4"},{"x":0,"y":180,"bCoef":0,"trait":"kickOffBarrier","curve":180,"color":"0347e4"},{"x":0,"y":-180,"bCoef":0,"trait":"kickOffBarrier","curve":180,"color":"0347e4"},{"x":0,"y":180,"bCoef":0,"trait":"kickOffBarrier","curve":180,"color":"0347e4"},{"x":0,"y":600,"bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier","vis":false},{"x":0,"y":670,"bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier","vis":false},{"x":0,"y":-670,"bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier","vis":false},{"x":0,"y":-600,"bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier","vis":false},{"x":-46.16184819191134,"y":11.505414835829143,"trait":"line","color":"ffffff"},{"x":-46.16184819191134,"y":40.24208150249581,"trait":"line","color":"ffffff"},{"x":-25.96851485857801,"y":40.24208150249581,"trait":"line","color":"ffffff"},{"x":-15.871848191911342,"y":40.24208150249581,"trait":"line","color":"ffffff"},{"x":-16.64851485857801,"y":11.505414835829143,"trait":"line","color":"ffffff"},{"x":-16.64851485857801,"y":25.097081502495808,"trait":"line","color":"ffffff"},{"x":5.098151808088654,"y":25.097081502495808,"trait":"line","color":"ffffff"},{"x":5.098151808088654,"y":11.505414835829143,"trait":"line","color":"ffffff"},{"x":5.098151808088654,"y":40.24208150249581,"trait":"line","color":"ffffff"},{"x":40.048151808088654,"y":40.24208150249581,"trait":"line","color":"ffffff"},{"x":19.078151808088656,"y":40.24208150249581,"trait":"line","color":"ffffff"},{"x":19.078151808088656,"y":11.505414835829143,"trait":"line","color":"ffffff"},{"x":40.048151808088654,"y":11.505414835829143,"trait":"line","color":"ffffff"},{"x":20.63148514142199,"y":25.097081502495808,"trait":"line","color":"ffffff"},{"x":38.49481847475532,"y":25.097081502495808,"trait":"line","color":"ffffff"},{"x":-46.16184819191134,"y":65.09541483582915,"trait":"line","color":"ffffff"},{"x":-62.47184819191134,"y":66.64874816916247,"trait":"line","color":"ffffff"},{"x":-55.48184819191134,"y":73.63874816916247,"trait":"line","color":"ffffff"},{"x":-36.065181525244675,"y":60.435414835829135,"trait":"line","color":"ffffff"},{"x":-36.065181525244675,"y":79.07541483582914,"trait":"line","color":"ffffff"},{"x":-18.590181525244674,"y":79.07541483582914,"trait":"line","color":"ffffff"},{"x":-18.590181525244674,"y":60.435414835829135,"trait":"line","color":"ffffff"},{"x":-7.328514858578012,"y":86.8420815024958,"trait":"line","color":"ffffff"},{"x":-7.328514858578012,"y":62.765414835829134,"trait":"line","color":"ffffff"},{"x":4.321485141421988,"y":62.765414835829134,"trait":"line","color":"ffffff"},{"x":4.321485141421988,"y":75.19208150249581,"trait":"line","color":"ffffff"},{"x":-7.328514858578012,"y":75.19208150249581,"trait":"line","color":"ffffff"},{"x":33.83481847475532,"y":84.5120815024958,"trait":"line","color":"ffffff"},{"x":17.52481847475532,"y":84.5120815024958,"trait":"line","color":"ffffff"},{"x":18.30148514142199,"y":62.765414835829134,"trait":"line","color":"ffffff"},{"x":33.83481847475532,"y":62.765414835829134,"trait":"line","color":"ffffff"},{"x":19.078151808088656,"y":73.63874816916247,"trait":"line","color":"ffffff"},{"x":32.28148514142199,"y":73.63874816916247,"trait":"line","color":"ffffff"},{"x":43.154818474755324,"y":84.5120815024958,"trait":"line","color":"ffffff"},{"x":43.154818474755324,"y":62.765414835829134,"trait":"line","color":"ffffff"},{"x":54.02815180808866,"y":62.765414835829134,"trait":"line","color":"ffffff"},{"x":53.25148514142199,"y":74.41541483582914,"trait":"line","color":"ffffff"},{"x":43.154818474755324,"y":74.41541483582914,"trait":"line","color":"ffffff"},{"x":57.91148514142199,"y":84.5120815024958,"trait":"line","color":"ffffff"},{"x":-45.38518152524467,"y":81.40541483582913,"trait":"line","color":"ffffff"},{"x":-64.02518152524468,"y":82.1820815024958,"trait":"line","color":"ffffff"},{"x":-13.541848191911344,"y":101.59874816916248,"trait":"line","curve":0,"color":"ffffff"},{"x":-14.31851485857801,"y":111.69541483582914,"trait":"line","curve":0,"color":"ffffff"},{"x":-8.105181525244678,"y":97.71541483582914,"trait":"line","color":"ffffff"},{"x":-8.105181525244678,"y":110.1420815024958,"trait":"line","color":"ffffff"},{"x":4.321485141421988,"y":109.36541483582914,"trait":"line","color":"ffffff"},{"x":4.321485141421988,"y":97.71541483582914,"trait":"line","color":"ffffff"},{"x":12.088151808088654,"y":114.80208150249581,"trait":"line","color":"ffffff"},{"x":12.088151808088654,"y":98.49208150249581,"trait":"line","color":"ffffff"},{"x":21.408151808088654,"y":98.49208150249581,"trait":"line","color":"ffffff"},{"x":21.408151808088654,"y":107.03541483582914,"trait":"line","color":"ffffff"},{"x":12.088151808088654,"y":107.03541483582914,"trait":"line","color":"ffffff"},{"x":-17.425181525244675,"y":-14.124585164170856,"trait":"line","color":"ffffff"},{"x":15.19481847475532,"y":-14.124585164170856,"trait":"line","color":"ffffff"},{"x":19.078151808088656,"y":-6.357918497504189,"trait":"line","color":"ffffff"},{"x":-21.308514858578008,"y":-6.357918497504189,"trait":"line","color":"ffffff"},{"x":22.96148514142199,"y":-22.66791849750419,"trait":"line","color":"0347e4"},{"x":26.068151808088658,"y":-13.347918497504189,"trait":"line","color":"0347e4"},{"x":29.17481847475532,"y":-110.43125183083751,"trait":"line","color":"0347e4"},{"x":26.068151808088658,"y":-101.11125183083752,"trait":"line","color":"0347e4"},{"x":-29.075181525244673,"y":-21.114585164170855,"trait":"line","curve":0,"color":"ffffff"},{"x":-32.958514858578006,"y":-101.88791849750419,"trait":"line","curve":0,"color":"0347e4"},{"x":-36.065181525244675,"y":-109.65458516417085,"trait":"line","curve":0,"color":"0347e4"},{"x":-33.73518152524467,"y":-14.124585164170856,"trait":"line","curve":0,"color":"0347e4"},{"x":-30.628514858578008,"y":-87.13125183083751,"trait":"line","curve":0,"color":"ffffff"},{"x":-8.881848191911343,"y":-52.95791849750419,"trait":"line","color":"ffffff"},{"x":-10.435181525244678,"y":-49.85125183083752,"trait":"line","color":"ffffff","curve":0},{"x":-22.08518152524468,"y":-63.831251830837516,"trait":"line","color":"ffffff"},{"x":-2.6685148585780114,"y":-22.66791849750419,"trait":"line","color":"ffffff"},{"x":13.641485141421988,"y":-22.66791849750419,"trait":"line","color":"ffffff"},{"x":10.53481847475532,"y":-35.87125183083752,"trait":"line","color":"ffffff"},{"x":29.17481847475532,"y":-87.90791849750418,"trait":"line","color":"ffffff"},{"x":25.291485141421987,"y":-93.34458516417085,"trait":"line","color":"ffffff"},{"x":-15.871848191911342,"y":-21.891251830837522,"trait":"line","curve":0,"color":"ffffff"},{"x":-8.881848191911343,"y":-21.891251830837522,"trait":"line","color":"ffffff"},{"x":12.088151808088654,"y":-66.16125183083753,"trait":"line","curve":0,"color":"ffffff"},{"x":19.85481847475532,"y":-96.45125183083752,"trait":"line","curve":0,"color":"ffffff"},{"x":19.078151808088656,"y":-129.07125183083753,"trait":"line","curve":0,"color":"ffffff"},{"x":12.864818474755321,"y":-132.17791849750418,"trait":"line","curve":0,"color":"ffffff"},{"x":13.641485141421988,"y":-101.11125183083752,"trait":"line","curve":0,"color":"ffffff"},{"x":4.321485141421988,"y":-72.37458516417085,"trait":"line","curve":0,"color":"ffffff"},{"x":-8.881848191911343,"y":-80.14125183083752,"trait":"line","curve":0,"color":"ffffff"},{"x":-15.095181525244678,"y":-104.99458516417084,"trait":"line","curve":0,"color":"ffffff"},{"x":-15.871848191911342,"y":-131.4012518308375,"trait":"line","curve":0,"color":"ffffff"},{"x":-2.6685148585780114,"y":-52.95791849750419,"trait":"line","curve":0,"color":"ffffff"},{"x":-15.871848191911342,"y":-77.81125183083752,"trait":"line","curve":0,"color":"ffffff"},{"x":-22.08518152524468,"y":-98.00458516417085,"trait":"line","curve":0,"color":"ffffff"},{"x":-22.08518152524468,"y":-129.07125183083753,"trait":"line","curve":0,"color":"ffffff"},{"x":-17.425181525244675,"y":-67.71458516417084,"trait":"line","color":"ffffff"},{"x":-24.415181525244677,"y":-84.02458516417084,"trait":"line","color":"ffffff"},{"x":-26.745181525244675,"y":-92.56791849750418,"trait":"line","color":"ffffff"},{"x":18.30148514142199,"y":-66.16125183083753,"trait":"line","color":"ffffff"},{"x":29.096985264224774,"y":-108.38064634477597,"bCoef":0.1,"trait":"line","color":"0347e4"},{"x":-9.50473037549773,"y":-24.01195042231003,"bCoef":0.1,"trait":"line"},{"x":18.509211783863975,"y":-100.0497934262918,"bCoef":0.1,"trait":"line"},{"x":18.00896281673251,"y":-129.0642335199164,"bCoef":0.1,"trait":"line"},{"x":14.006971079680852,"y":-129.06423351991643,"bCoef":0.1,"trait":"line"},{"x":16.00796694820668,"y":-122.56099694720746,"bCoef":0.1,"trait":"line"},{"x":16.0079669482067,"y":-106.0527810318693,"bCoef":0.1,"trait":"line"},{"x":14.507220046812307,"y":-90.04481408366263,"bCoef":0.1,"trait":"line"},{"x":11.005477276892094,"y":-79.03933680677052,"bCoef":0.1,"trait":"line"},{"x":-10.004979342629184,"y":-23.51170145517857,"bCoef":0.1,"trait":"line"},{"x":-1.0004979342629383,"y":-51.525643614540286,"bCoef":0.1,"trait":"line"},{"x":5.002489671314606,"y":-72.53610023406156,"bCoef":0.1,"trait":"line"},{"x":-1.5007469013943933,"y":-56.02788431872341,"bCoef":0.1,"trait":"line"},{"x":-20.033366158647993,"y":-119.90720959766897,"bCoef":0.1,"trait":"line"},{"x":-19.31141969924974,"y":-128.90111824932504,"bCoef":0.1,"trait":"line"},{"x":-17.036726674444964,"y":-117.51395428908282,"bCoef":0.1,"trait":"line"},{"x":1.3336414317560923,"y":-61.747466130850576,"bCoef":0.1,"trait":"line"},{"x":1.0348085630098751,"y":-56.45099790937547,"bCoef":0.1,"trait":"line"},{"x":-9.434711277573314,"y":-74.35682551762253,"bCoef":0.1,"trait":"line"},{"x":3.917740082017332,"y":-70.02428264169409,"bCoef":0.1,"trait":"line"},{"x":-13.71040017090391,"y":-22.57690202114606,"bCoef":0.1,"trait":"line"},{"x":9.837873872990912,"y":-74.42824245597744,"bCoef":0.1,"trait":"line","curve":0},{"x":-5.559592621043881,"y":-71.4804765562784,"bCoef":0.1,"trait":"line","curve":0},{"x":3.17691006916791,"y":-64.72954265929657,"bCoef":0.1,"trait":"line","curve":0},{"x":-28.306268716286255,"y":-89.63651760157313,"bCoef":0.1,"trait":"line","curve":0},{"x":1.7669546730381995,"y":-24.586908879135237,"bCoef":0.1,"trait":"line"},{"x":26.081015349936653,"y":-89.84471633758753,"bCoef":0.1,"trait":"line"},{"x":23.918472183717792,"y":-63.84647932340378,"bCoef":0.1,"trait":"line"},{"x":4.109762427749686,"y":-23.82662941319965,"bCoef":0.1,"trait":"line"},{"x":9.69846582967429,"y":-32.38273677787894,"bCoef":0.1,"trait":"line"},{"x":11.29005855321546,"y":-23.534911498206377,"bCoef":0.1,"trait":"line"},{"x":1.1159060039252466,"y":-24.86614140681964,"bCoef":0.1,"trait":"line"},{"x":10.312515916500217,"y":-28.248461155151126,"bCoef":0.1,"trait":"line"},{"x":-17.80519948296478,"y":-11.579837202117105,"bCoef":0.1,"trait":"line"},{"x":15.738187614949354,"y":-11.215801657722164,"bCoef":0.1,"trait":"line"},{"x":-18.992302264069735,"y":-9.548858205454028,"bCoef":0.1,"trait":"line"},{"x":15.544731659132466,"y":-8.761152723291701,"bCoef":0.1,"trait":"line"},{"x":29.95493779621502,"y":-107.43056303159486,"bCoef":0.1,"trait":"line","color":"0347e4"},{"x":26.64060681712178,"y":-16.980865961675576,"bCoef":0.1,"trait":"line","color":"0347e4"},{"x":27.51200346238575,"y":-102.43106744298726,"bCoef":0.1,"trait":"line","color":"0347e4"},{"x":24.227998687344382,"y":-22.61682645839059,"bCoef":0.1,"trait":"line","color":"0347e4"},{"x":26.880192722446623,"y":-105.85336326583119,"bCoef":0.1,"trait":"line","color":"0347e4","curve":0},{"x":25.012448356572946,"y":-19.91731998764142,"bCoef":0.1,"trait":"line","curve":0},{"x":25.938835332742315,"y":-15.748578594879262,"bCoef":0.1,"trait":"line","curve":0},{"x":-36.58208503133236,"y":-107.20233918155968,"bCoef":0.1,"trait":"line","curve":0},{"x":-33.68116687347737,"y":-17.39481957616639,"bCoef":0.1,"trait":"line","curve":0},{"x":-34.34508471700734,"y":-105.397702387062,"bCoef":0.1,"trait":"line","curve":0},{"x":-30.045831349729653,"y":-19.147332501159234,"bCoef":0.1,"trait":"line","curve":0},{"x":-35.035064495289674,"y":-15.883048801305097,"bCoef":0.1,"trait":"line","curve":0},{"x":-57.24737304471278,"y":-62.18280221701174,"bCoef":0.1,"trait":"line","curve":0},{"x":-30.55337758474515,"y":-17.428567792813237,"bCoef":0.1,"trait":"line","curve":0},{"x":-32.07283464150089,"y":-103.90580880959321,"bCoef":0.1,"trait":"line","curve":0}],"segments":[{"v0":0,"v1":1,"curve":0,"color":"0347e4","trait":"goalNet","bias":12,"y":-110},{"v0":2,"v1":3,"curve":0,"color":"0347e4","trait":"goalNet","bias":12,"y":110},{"v0":4,"v1":5,"curve":0,"color":"0347e4","trait":"goalNet","bias":-12,"y":-110},{"v0":6,"v1":7,"curve":0,"color":"0347e4","trait":"goalNet","bias":-12,"y":110},{"v0":14,"v1":15,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"cMask":[""],"trait":"line"},{"v0":16,"v1":17,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-240},{"v0":18,"v1":19,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-120},{"v0":20,"v1":21,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":240},{"v0":22,"v1":23,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":120},{"v0":24,"v1":25,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-381},{"v0":26,"v1":27,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-240,"y":251.9681483400014},{"v0":28,"v1":29,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-240,"y":-251.9681483400014},{"v0":30,"v1":31,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-381},{"v0":32,"v1":33,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":381},{"v0":34,"v1":35,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":381},{"v0":36,"v1":37,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-240,"y":123},{"v0":38,"v1":39,"curve":0,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line","x":-240,"y":251.9681483400014},{"v0":41,"v1":40,"curve":-90,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line"},{"v0":43,"v1":42,"curve":90,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line"},{"v0":45,"v1":44,"curve":-90,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line"},{"v0":47,"v1":46,"curve":90,"vis":true,"color":"1f5de6","bCoef":0.1,"trait":"line"},{"v0":48,"v1":49,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"cMask":[""],"trait":"line"},{"v0":52,"v1":51,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-787},{"v0":51,"v1":52,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-787},{"v0":54,"v1":53,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-610},{"v0":53,"v1":54,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-610},{"v0":55,"v1":56,"curve":-197.38121949057748,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-610},{"v0":56,"v1":55,"curve":-213.29219661707097,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-610},{"v0":57,"v1":58,"curve":-197.38121949057748,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-610},{"v0":58,"v1":57,"curve":-213.29219661707097,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":-610},{"v0":2,"v1":1,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"cMask":["ball"],"trait":"goalNet","bias":-12},{"v0":6,"v1":5,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"goalNet","bias":12},{"v0":59,"v1":60,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"line","x":-1200},{"v0":61,"v1":62,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":-1200},{"v0":63,"v1":64,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":-1200},{"v0":65,"v1":66,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":-1200},{"v0":67,"v1":68,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":-1200},{"v0":69,"v1":70,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":1200},{"v0":71,"v1":72,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":1200},{"v0":73,"v1":74,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":1200},{"v0":75,"v1":76,"curve":0,"vis":true,"color":"ffffff","bCoef":0,"trait":"line","x":1200},{"v0":50,"v1":77,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"line","y":-470},{"v0":78,"v1":79,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"line","y":470},{"v0":80,"v1":81,"curve":-90,"vis":true,"color":"0347e4","bCoef":0,"cMask":[""],"trait":"line"},{"v0":84,"v1":83,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":787},{"v0":83,"v1":84,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":787},{"v0":81,"v1":85,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"line","y":-470},{"v0":82,"v1":86,"curve":90,"vis":true,"color":"0347e4","bCoef":0,"trait":"line"},{"v0":86,"v1":87,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"line","y":470},{"v0":89,"v1":88,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":610},{"v0":88,"v1":89,"curve":180,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":610},{"v0":90,"v1":91,"curve":-197.38121949057748,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":610},{"v0":91,"v1":90,"curve":-213.29219661707097,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":610},{"v0":92,"v1":93,"curve":-197.38121949057748,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":610},{"v0":93,"v1":92,"curve":-213.29219661707097,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line","x":610},{"v0":80,"v1":82,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"line"},{"v0":10,"v1":61,"curve":0,"vis":true,"color":"ffffff","bCoef":1,"cMask":["ball"],"trait":"ballArea","bias":-12},{"v0":11,"v1":66,"curve":0,"vis":true,"color":"ffffff","bCoef":1,"cMask":["ball"],"trait":"ballArea","bias":12},{"v0":8,"v1":69,"curve":0,"vis":true,"color":"ffffff","bCoef":1,"cMask":["ball"],"trait":"ballArea","bias":12},{"v0":9,"v1":74,"curve":0,"vis":true,"color":"ffffff","bCoef":1,"cMask":["ball"],"trait":"ballArea","bias":-12},{"v0":94,"v1":95,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"kickOffBarrier","x":0},{"v0":96,"v1":97,"curve":0,"vis":true,"color":"0347e4","bCoef":0,"trait":"kickOffBarrier","x":0},{"v0":98,"v1":99,"curve":-180,"vis":true,"color":"0347e4","cGroup":["blueKO"],"trait":"kickOffBarrier"},{"v0":100,"v1":101,"curve":180,"vis":true,"color":"0347e4","cGroup":["redKO"],"trait":"kickOffBarrier"},{"v0":102,"v1":103,"curve":0,"vis":false,"color":"b3b6b6","bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier","x":0},{"v0":104,"v1":105,"curve":0,"vis":false,"color":"b3b6b6","bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"],"trait":"kickOffBarrier","x":0},{"v0":78,"v1":48,"curve":-90,"vis":true,"color":"0347e4","bCoef":0,"trait":"line"},{"v0":50,"v1":49,"curve":90,"vis":true,"color":"0347e4","bCoef":0,"trait":"line"},{"v0":10,"v1":8,"curve":0,"vis":true,"color":"ffffff","bCoef":1,"trait":"ballArea","bias":12},{"v0":11,"v1":9,"curve":0,"vis":true,"color":"ffffff","bCoef":1,"cMask":["ball"],"trait":"ballArea","bias":-12},{"v0":106,"v1":107,"color":"ffffff","trait":"line"},{"v0":107,"v1":108,"color":"ffffff","trait":"line","y":64},{"v0":109,"v1":110,"color":"ffffff","trait":"line"},{"v0":111,"v1":112,"color":"ffffff","trait":"line","y":44.5},{"v0":113,"v1":114,"color":"ffffff","trait":"line"},{"v0":115,"v1":116,"color":"ffffff","trait":"line"},{"v0":116,"v1":117,"color":"ffffff","trait":"line"},{"v0":117,"v1":118,"color":"ffffff","trait":"line","y":27},{"v0":119,"v1":120,"color":"ffffff","trait":"line","y":44.5},{"v0":121,"v1":122,"curve":-119.86283435627507,"color":"ffffff","trait":"line"},{"v0":122,"v1":123,"curve":-112.99312603517163,"color":"ffffff","trait":"line"},{"v0":124,"v1":125,"color":"ffffff","trait":"line"},{"v0":125,"v1":126,"curve":-158.18995590953108,"color":"ffffff","trait":"line"},{"v0":126,"v1":127,"color":"ffffff","trait":"line","x":-125.5},{"v0":128,"v1":129,"color":"ffffff","trait":"line"},{"v0":129,"v1":130,"color":"ffffff","trait":"line"},{"v0":130,"v1":131,"curve":147.92011338790073,"color":"ffffff","trait":"line"},{"v0":131,"v1":132,"color":"ffffff","trait":"line"},{"v0":133,"v1":134,"color":"ffffff","trait":"line","y":121},{"v0":134,"v1":135,"color":"ffffff","trait":"line"},{"v0":135,"v1":136,"color":"ffffff","trait":"line"},{"v0":137,"v1":138,"color":"ffffff","trait":"line"},{"v0":139,"v1":140,"color":"ffffff","trait":"line"},{"v0":140,"v1":141,"color":"ffffff","trait":"line"},{"v0":141,"v1":142,"curve":180,"color":"ffffff","trait":"line"},{"v0":142,"v1":143,"color":"ffffff","trait":"line"},{"v0":142,"v1":144,"color":"ffffff","trait":"line"},{"v0":123,"v1":145,"curve":84.79487559500048,"color":"ffffff","trait":"line"},{"v0":145,"v1":146,"curve":105.12285685533391,"color":"ffffff","trait":"line"},{"v0":147,"v1":148,"curve":-281.812282227541,"color":"ffffff","trait":"line"},{"v0":149,"v1":150,"curve":0,"color":"ffffff","trait":"line"},{"v0":150,"v1":151,"curve":-152.27794487395767,"color":"ffffff","trait":"line"},{"v0":151,"v1":152,"curve":0,"color":"ffffff","trait":"line"},{"v0":153,"v1":154,"curve":0,"color":"ffffff","trait":"line"},{"v0":154,"v1":155,"curve":0,"color":"ffffff","trait":"line"},{"v0":155,"v1":156,"curve":95.45262198781253,"color":"ffffff","trait":"line"},{"v0":156,"v1":157,"curve":0,"color":"ffffff","trait":"line"},{"v0":158,"v1":159,"color":"ffffff","trait":"line"},{"v0":159,"v1":160,"color":"ffffff","trait":"line"},{"v0":160,"v1":161,"color":"ffffff","trait":"line","y":4},{"v0":161,"v1":158,"color":"ffffff","trait":"line"},{"v0":162,"v1":163,"color":"0347e4","trait":"line"},{"v0":163,"v1":164,"curve":-112.14774230268814,"color":"0347e4","trait":"line"},{"v0":164,"v1":165,"color":"0347e4","trait":"line"},{"v0":165,"v1":162,"curve":110.60969293753206,"color":"0347e4","trait":"line"},{"v0":166,"v1":167,"curve":112.07178207499476,"color":"0347e4","trait":"line"},{"v0":167,"v1":168,"curve":0,"color":"0347e4","trait":"line"},{"v0":168,"v1":169,"curve":-112.46022972412874,"color":"0347e4","trait":"line"},{"v0":169,"v1":166,"curve":0,"color":"0347e4","trait":"line"},{"v0":171,"v1":172,"curve":0,"color":"ffffff","trait":"line"},{"v0":172,"v1":173,"curve":22.619864948040416,"color":"ffffff","trait":"line"},{"v0":173,"v1":170,"curve":5.273516852280884,"color":"ffffff","trait":"line"},{"v0":174,"v1":175,"curve":0,"color":"ffffff","trait":"line"},{"v0":175,"v1":176,"curve":0,"color":"ffffff","trait":"line"},{"v0":176,"v1":177,"curve":-22.310466862098643,"color":"ffffff","trait":"line"},{"v0":177,"v1":178,"curve":0,"color":"ffffff","trait":"line"},{"v0":179,"v1":180,"curve":0,"color":"ffffff","trait":"line"},{"v0":180,"v1":181,"curve":0,"color":"ffffff","trait":"line"},{"v0":181,"v1":182,"curve":-10.17850181673784,"color":"ffffff","trait":"line"},{"v0":182,"v1":183,"curve":-25.485193878057256,"color":"ffffff","trait":"line"},{"v0":183,"v1":184,"curve":0,"color":"ffffff","trait":"line"},{"v0":184,"v1":185,"curve":9.527283381452355,"color":"ffffff","trait":"line"},{"v0":185,"v1":186,"curve":29.530846219857107,"color":"ffffff","trait":"line"},{"v0":186,"v1":187,"curve":92.01017201050834,"color":"ffffff","trait":"line"},{"v0":187,"v1":188,"curve":24.678174556652408,"color":"ffffff","trait":"line"},{"v0":188,"v1":189,"curve":0.30076455614319114,"color":"ffffff","trait":"line"},{"v0":179,"v1":190,"curve":0,"color":"ffffff","trait":"line"},{"v0":190,"v1":191,"curve":6.359660239728473,"color":"ffffff","trait":"line"},{"v0":191,"v1":192,"curve":-4.090816977774458,"color":"ffffff","trait":"line"},{"v0":192,"v1":193,"curve":0,"color":"ffffff","trait":"line"},{"v0":193,"v1":189,"curve":0,"color":"ffffff","trait":"line"},{"v0":171,"v1":194,"curve":5.273516852280884,"color":"ffffff","trait":"line"},{"v0":194,"v1":195,"curve":23.82243086394321,"color":"ffffff","trait":"line"},{"v0":195,"v1":196,"curve":5.273516852280884,"color":"ffffff","trait":"line"},{"v0":196,"v1":170,"curve":5.273516852280884,"color":"ffffff","trait":"line"},{"v0":178,"v1":197,"curve":11.91071647909185,"color":"ffffff","trait":"line"},{"v0":197,"v1":174,"curve":7.513525397981943,"color":"ffffff","trait":"line"},{"v0":160,"v1":158,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":159,"v1":161,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":163,"v1":198,"curve":-112.14774230268814,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":199,"v1":200,"curve":-17.124085093617868,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":200,"v1":201,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":201,"v1":202,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":202,"v1":203,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":203,"v1":204,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":204,"v1":205,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":205,"v1":206,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":206,"v1":207,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":207,"v1":208,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":208,"v1":209,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":209,"v1":210,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":210,"v1":211,"curve":39.29670501120926,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":211,"v1":212,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":212,"v1":213,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":213,"v1":214,"curve":-52.67109386239041,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":214,"v1":215,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":215,"v1":216,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":216,"v1":217,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":217,"v1":218,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":218,"v1":219,"curve":-0.3895764073909938,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":219,"v1":220,"curve":83.22846918711411,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":220,"v1":221,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":172,"v1":222,"curve":19.698015443819646,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":177,"v1":223,"curve":1.8914376538251705,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":223,"v1":224,"curve":-24.32341532104507,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":224,"v1":225,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":225,"v1":226,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":226,"v1":227,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":227,"v1":228,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":228,"v1":229,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":229,"v1":230,"curve":0,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":160,"v1":231,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":231,"v1":232,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":232,"v1":233,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":234,"v1":233,"vis":true,"color":"ffffff","bCoef":0.1,"trait":"line"},{"v0":163,"v1":235,"curve":-100.75565702811411,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":235,"v1":236,"curve":97.96107702620864,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":236,"v1":237,"curve":-103.20797634046379,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":237,"v1":238,"curve":119.10554168471839,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":238,"v1":239,"curve":-116.16633126103471,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":239,"v1":240,"curve":115.02903706274721,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":240,"v1":241,"curve":0,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":169,"v1":242,"curve":104.72959177331064,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":242,"v1":243,"curve":-95.87093817628978,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":243,"v1":244,"curve":100.285383124703,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":244,"v1":245,"curve":-110.87163604091194,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":245,"v1":246,"curve":0,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":246,"v1":247,"curve":49.768882396818896,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":247,"v1":248,"curve":-50.711743171847175,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"},{"v0":248,"v1":249,"curve":112.54360988689051,"vis":true,"color":"0347e4","bCoef":0.1,"trait":"line"}],"goals":[{"p0":[1208.75,109],"p1":[1208.75,-109],"team":"blue"},{"p0":[-1208.75,109],"p1":[-1208.75,-109],"team":"red"}],"discs":[{"radius":6.4,"invMass":1.5,"pos":[0,0],"color":"f8b501","bCoef":0.4,"cGroup":["ball","kick","score"],"damping":0.99},{"radius":0.01,"invMass":1.0e+300,"pos":[-5,-1],"color":"0","cMask":[],"cGroup":[]},{"radius":0.01,"invMass":1.0e+300,"pos":[5,-1],"color":"0","cMask":[],"cGroup":[]},{"radius":0.01,"invMass":1.0e+300,"pos":[0,-5],"color":"0","cMask":[],"cGroup":[]},{"radius":0.01,"invMass":1.0e+300,"pos":[-3,4],"color":"0","cMask":[],"cGroup":[]},{"radius":0.01,"invMass":1.0e+300,"pos":[3,4],"color":"0","cMask":[],"cGroup":[]},{"radius":0.01,"invMass":1.0e+300,"pos":[0,0],"color":"0","cMask":[],"cGroup":[]},{"radius":6,"pos":[1200,110],"color":"4f7eff","trait":"goalPost"},{"radius":6,"pos":[1200,-110],"color":"4f7eff","trait":"goalPost"},{"radius":6,"pos":[-1200,110],"color":"4f7eff","trait":"goalPost"},{"radius":6,"pos":[-1200,-110],"color":"4f7eff","trait":"goalPost"},{"radius":3,"invMass":0,"pos":[-1200,600],"color":"4f7eff","bCoef":0.1,"trait":"line"},{"radius":3,"invMass":0,"pos":[-1200,-600],"color":"4f7eff","bCoef":0.1,"trait":"line"},{"radius":4,"invMass":0,"pos":[1200,-600],"color":"4f7eff","bCoef":0.1,"trait":"line"},{"radius":4,"invMass":0,"pos":[1200,600],"color":"4f7eff","bCoef":0.1,"trait":"line"}],"planes":[{"normal":[0,-1],"dist":-600,"bCoef":1,"trait":"ballArea","curve":0},{"normal":[0,1],"dist":-600,"bCoef":1,"trait":"ballArea","vis":false,"curve":0},{"normal":[1,0],"dist":-1275,"bCoef":0.1},{"normal":[0,1],"dist":-675,"bCoef":0.1},{"normal":[0,-1],"dist":-675,"bCoef":0.1},{"normal":[-1,0],"dist":-1275,"bCoef":0.1},{"normal":[1,0],"dist":-1250,"bCoef":0.1,"trait":"ballArea"},{"normal":[-1,0],"dist":-1250,"bCoef":0.1,"trait":"ballArea"}],"traits":{"ballArea":{"vis":false,"bCoef":1,"cMask":["ball"]},"goalPost":{"radius":8,"invMass":0,"bCoef":0.5},"goalNet":{"vis":true,"bCoef":0.1,"cMask":["ball"]},"line":{"vis":true,"bCoef":0.1,"cMask":[""]},"kickOffBarrier":{"vis":false,"bCoef":0.1,"cGroup":["redKO","blueKO"],"cMask":["red","blue"]}},"playerPhysics":{"acceleration":0.11,"kickingAcceleration":0.083,"kickStrength":5.2,"bCoef":0,"radius":15,"invMass":0.5,"damping":0.96,"cGroup":["red","blue"],"gravity":[0,0],"kickingDamping":0.96,"kickback":0},"ballPhysics":"disc0","joints":[{"d0":0,"d1":1,"length":5.0990195135927845,"color":"transparent"},{"d0":0,"d1":2,"length":5.0990195135927845,"color":"transparent"},{"d0":0,"d1":3,"length":5,"color":"transparent"},{"d0":0,"d1":4,"length":5,"color":"transparent"},{"d0":0,"d1":5,"length":5,"color":"transparent"},{"d0":0,"d1":6,"length":0,"color":"transparent"},{"d0":1,"d1":2,"length":10,"color":"transparent"},{"d0":1,"d1":3,"length":6.4031242374328485,"color":"transparent"},{"d0":1,"d1":4,"length":5.385164807134504,"color":"transparent"},{"d0":1,"d1":5,"length":9.433981132056603,"color":"transparent"},{"d0":1,"d1":6,"length":5.0990195135927845,"color":"transparent"},{"d0":2,"d1":3,"length":6.4031242374328485,"color":"transparent"},{"d0":2,"d1":4,"length":9.433981132056603,"color":"transparent"},{"d0":2,"d1":5,"length":5.385164807134504,"color":"transparent"},{"d0":2,"d1":6,"length":5.0990195135927845,"color":"transparent"},{"d0":3,"d1":4,"length":9.486832980505138,"color":"transparent"},{"d0":3,"d1":5,"length":9.486832980505138,"color":"transparent"},{"d0":3,"d1":6,"length":5,"color":"transparent"},{"d0":4,"d1":5,"length":6,"color":"transparent"},{"d0":4,"d1":6,"length":5,"color":"transparent"},{"d0":5,"d1":6,"length":5,"color":"transparent"}],"canBeStored":true}';
const bigMap = '{"name":"Big","width":600,"height":270,"spawnDistance":350,"bg":{"type":"grass","width":550,"height":240,"kickOffRadius":80,"cornerRadius":0},"vertexes":[{"x":-550,"y":240,"trait":"ballArea"},{"x":-550,"y":80,"trait":"ballArea"},{"x":-550,"y":-80,"trait":"ballArea"},{"x":-550,"y":-240,"trait":"ballArea"},{"x":550,"y":240,"trait":"ballArea"},{"x":550,"y":80,"trait":"ballArea"},{"x":550,"y":-80,"trait":"ballArea"},{"x":550,"y":-240,"trait":"ballArea"},{"x":0,"y":270,"trait":"kickOffBarrier"},{"x":0,"y":80,"trait":"kickOffBarrier"},{"x":0,"y":-80,"trait":"kickOffBarrier"},{"x":0,"y":-270,"trait":"kickOffBarrier"},{"x":-560,"y":-80,"trait":"goalNet"},{"x":-580,"y":-60,"trait":"goalNet"},{"x":-580,"y":60,"trait":"goalNet"},{"x":-560,"y":80,"trait":"goalNet"},{"x":560,"y":-80,"trait":"goalNet"},{"x":580,"y":-60,"trait":"goalNet"},{"x":580,"y":60,"trait":"goalNet"},{"x":560,"y":80,"trait":"goalNet"}],"segments":[{"v0":0,"v1":1,"trait":"ballArea"},{"v0":2,"v1":3,"trait":"ballArea"},{"v0":4,"v1":5,"trait":"ballArea"},{"v0":6,"v1":7,"trait":"ballArea"},{"v0":12,"v1":13,"trait":"goalNet","curve":-90},{"v0":13,"v1":14,"trait":"goalNet"},{"v0":14,"v1":15,"trait":"goalNet","curve":-90},{"v0":16,"v1":17,"trait":"goalNet","curve":90},{"v0":17,"v1":18,"trait":"goalNet"},{"v0":18,"v1":19,"trait":"goalNet","curve":90},{"v0":8,"v1":9,"trait":"kickOffBarrier"},{"v0":9,"v1":10,"trait":"kickOffBarrier","curve":180,"cGroup":["blueKO"]},{"v0":9,"v1":10,"trait":"kickOffBarrier","curve":-180,"cGroup":["redKO"]},{"v0":10,"v1":11,"trait":"kickOffBarrier"}],"goals":[{"p0":[-550,80],"p1":[-550,-80],"team":"red"},{"p0":[550,80],"p1":[550,-80],"team":"blue"}],"discs":[{"pos":[-550,80],"trait":"goalPost","color":"FFCCCC"},{"pos":[-550,-80],"trait":"goalPost","color":"FFCCCC"},{"pos":[550,80],"trait":"goalPost","color":"CCCCFF"},{"pos":[550,-80],"trait":"goalPost","color":"CCCCFF"}],"planes":[{"normal":[0,1],"dist":-240,"trait":"ballArea"},{"normal":[0,-1],"dist":-240,"trait":"ballArea"},{"normal":[0,1],"dist":-270,"bCoef":0.1},{"normal":[0,-1],"dist":-270,"bCoef":0.1},{"normal":[1,0],"dist":-600,"bCoef":0.1},{"normal":[-1,0],"dist":-600,"bCoef":0.1}],"traits":{"ballArea":{"vis":false,"bCoef":1,"cMask":["ball"]},"goalPost":{"radius":8,"invMass":0,"bCoef":0.5},"goalNet":{"vis":true,"bCoef":0.1,"cMask":["ball"]},"kickOffBarrier":{"vis":false,"bCoef":0.1,"cGroup":["redKO","blueKO"],"cMask":["red","blue"]}}}';
var bigMapObj = JSON.parse(bigMap);

room.setScoreLimit(scoreLimit);
room.setTimeLimit(timeLimit);
room.setTeamsLock(true);
room.setKickRateLimit(6, 0, 0);

var masterPassword = 10000 + getRandomInt(90000);
var roomPassword = '';

/* OPTIONS */

var drawTimeLimit = Infinity;
var maxAdmins = 2;
var disableBans = true;
var maxInactivity = 5;
var debugMode = false;

var hideClaimMessage = true;
var mentionPlayersUnpause = true;

/* OBJECTS */

class Goal {
    constructor(time, team, striker, assist) {
        this.time = time;
        this.team = team;
        this.striker = striker;
        this.assist = assist;
    }
}

class Game {
    constructor() {
        this.date = Date.now();
        this.scores = room.getScores();
        this.playerComp = getStartingLineups();
        this.goals = [];
        this.rec = room.startRecording();
        this.touchArray = [];
    }
}

class PlayerComposition {
    constructor(player, auth, timeEntry, timeExit) {
        this.player = player;
        this.auth = auth;
        this.timeEntry = timeEntry;
        this.timeExit = timeExit;
        this.inactivityTicks = 0;
        this.GKTicks = 0;
    }
}

class BallTouch {
    constructor(player, time, goal, position) {
        this.player = player;
        this.time = time;
        this.goal = goal;
        this.position = position;
    }
}

/* PLAYERS */

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const State = { PLAY: 0, PAUSE: 1, STOP: 2 };
const Role = { PLAYER: 0, ADMIN_TEMP: 1, ADMIN_PERM: 2, MASTER: 3 };
const HaxNotification = { NONE: 0, CHAT: 1, MENTION: 2 };
const Situation = { STOP: 0, KICKOFF: 1, PLAY: 2, GOAL: 3 };

var gameState = State.STOP;
var playSituation = Situation.STOP;
var goldenGoal = false;

var players = [];
var teamRed = [];
var teamBlue = [];
var teamSpec = [];

var banList = [];

/* STATS */

var possession = [0, 0];
var actionZoneHalf = [0, 0];

/* AUTH */

var authArray = [];
var adminList = [
    // ['INSERT_AUTH_HERE_1', 'NICK_OF_ADMIN_1'],
    // ['INSERT_AUTH_HERE_2', 'NICK_OF_ADMIN_2'],
];
var masterList = [
    'rlWFZkKcu96lBvrIJKW_yUPOP6O8QsFagn6YBCEjlQ8', '9Xp96TLxknOrolyNSplBUiEseyimgje1iouhu5_QkLg', 'ZgYGVMJov0ElrANUsR9UNidYxPzYsbp9a-JZnTNZy6Y', 'a7u24JGMj_ocAUzO1uAaOoqKohk5_lEJQb2iZtUe6fo', 'GMmIn3NEfcL67XWG9i0A6OhqvjbWGWPzqjEMVOmSe-I'
];

/* COMMANDS */

var commands = {
    help: {
        aliases: ['commands'],
        roles: Role.PLAYER,
        desc: `
	This command shows all the available commands. It also can show the description of a command in particular.
Example: \'!help bb\' will show the description of the \'bb\' command.`,
        function: helpCommand,
    },
    claim: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: masterCommand,
    },
    bb: {
        aliases: ['bye', 'gn', 'cya'],
        roles: Role.PLAYER,
        desc: `
	This command makes you leave instantly (use recommended).`,
        function: leaveCommand,
    },
    rr: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command restarts the game.`,
        function: restartCommand,
    },
    rrs: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command swaps the teams and restarts the game.`,
        function: restartSwapCommand,
    },
    swap: {
        aliases: ['s'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command swaps the teams when the game is stopped.`,
        function: swapCommand,
    },
    training: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        This command loads the classic training stadium.`,
        function: stadiumCommand,
    },
    classic: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        This command loads the LHE stadium.`,
        function: stadiumCommand,
    },
    big: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        This command loads the big stadium.`,
        function: stadiumCommand,
    },
    kickred: {
        aliases: ['kickr'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the red team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    kickblue: {
        aliases: ['kickb'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the blue team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    kickspec: {
        aliases: ['kicks'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the spectators team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    clearbans: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
	This command unbans everyone. It also can unban one player in particular, by adding his ID as an argument.`,
        function: clearbansCommand,
    },
    bans: {
        aliases: ['banlist'],
        roles: Role.MASTER,
        desc: `
    This command shows all the players that were banned and their IDs.`,
        function: banListCommand,
    },
    admins: {
        aliases: ['adminlist'],
        roles: Role.MASTER,
        desc: `
    This command shows all the players that are permanent admins.`,
        function: adminListCommand,
    },
    setadmin: {
        aliases: ['admin'],
        roles: Role.MASTER,
        desc: `
    This command allows to set someone as admin. He will be able to connect as admin, and can be removed at any time by masters.
It takes 1 argument:
Argument 1: #<id> where <id> is the id of the player targeted.
Example: !setadmin #3 will give admin to the player with id 3.`,
        function: setAdminCommand,
    },
    removeadmin: {
        aliases: ['unadmin'],
        roles: Role.MASTER,
        desc: `
	This command allows to remove someone as admin.
It takes 1 argument:
Argument 1: #<id> where <id> is the id of the player targeted.
OR
Argument 1: <number> where <number> is the number associated with the admin given by the 'adminList' command.
Example: !removeadmin #300 will remove admin to the player with id 300,
         !removeadmin 2 will remove the admin n°2 according to the 'adminList' command.`,
        function: removeAdminCommand,
    },
    password: {
        aliases: ['pw'],
        roles: Role.MASTER,
        desc: `
        This command allows to add a password to the room.
    It takes 1 argument:
    Argument 1: <password> where <password> is the password you want for the room.
    
    To remove the room password, simply enter '!password'.`,
        function: passwordCommand,
    },
};

/* GAME */

var lastTouches = Array(2).fill(null);
var lastTeamTouched;

var speedCoefficient = 100 / (5 * (0.99 ** 60 + 1));
var ballSpeed = 0;
var playerRadius = 15;
var ballRadius = 10;
var triggerDistance = playerRadius + ballRadius + 0.01;

/* COLORS */

var welcomeColor = 0xc4ff65;
var announcementColor = 0xffefd6;
var infoColor = 0xbebebe;
var privateMessageColor = 0xffc933;
var redColor = 0xff4c4c;
var blueColor = 0x62cbff;
var warningColor = 0xffa135;
var errorColor = 0xa40000;
var successColor = 0x75ff75;
var defaultColor = null;

/* AUXILIARY */

var checkTimeVariable = false;
var checkStadiumVariable = true;
var endGameVariable = false;
var cancelGameVariable = false;
var kickFetchVariable = false;

var stopTimeout;
var startTimeout;
var unpauseTimeout;

var emptyPlayer = {
    id: 0,
};
stadiumCommand(emptyPlayer, "!big");

var game = new Game();

/* FUNCTIONS */

/* AUXILIARY FUNCTIONS */

if (typeof String.prototype.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.split(search).join(replacement);
    };
}

function getDate() {
    let d = new Date();
    return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
}

/* MATH FUNCTIONS */

function getRandomInt(max) {
    // returns a random number between 0 and max-1
    return Math.floor(Math.random() * Math.floor(max));
}

function pointDistance(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}

/* TIME FUNCTIONS */

function getMinutesGame(time) {
    var t = Math.floor(time / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getMinutesReport(time) {
    return Math.floor(Math.round(time) / 60);
}

function getMinutesEmbed(time) {
    var t = Math.floor(Math.round(time) / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsGame(time) {
    var t = Math.floor(time - Math.floor(time / 60) * 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsReport(time) {
    var t = Math.round(time);
    return Math.floor(t - Math.floor(t / 60) * 60);
}

function getSecondsEmbed(time) {
    var t = Math.round(time);
    var t2 = Math.floor(t - Math.floor(t / 60) * 60);
    return `${Math.floor(t2 / 10)}${Math.floor(t2 % 10)}`;
}

function getTimeGame(time) {
    return `[${getMinutesGame(time)}:${getSecondsGame(time)}]`;
}

function getTimeEmbed(time) {
    return `[${getMinutesEmbed(time)}:${getSecondsEmbed(time)}]`;
}

function getGoalGame() {
    return game.scores.red + game.scores.blue;
}

/* REPORT FUNCTIONS */

function findFirstNumberCharString(str) {
    let str_number = str[str.search(/[0-9]/g)];
    return str_number === undefined ? "0" : str_number;
}

function getIdReport() {
    var d = new Date();
    return `${d.getFullYear() % 100}${d.getMonth() < 9 ? '0' : ''}${d.getMonth() + 1}${d.getDate() < 10 ? '0' : ''}${d.getDate()}${d.getHours() < 10 ? '0' : ''}${d.getHours()}${d.getMinutes() < 10 ? '0' : ''}${d.getMinutes()}${d.getSeconds() < 10 ? '0' : ''}${d.getSeconds()}${findFirstNumberCharString(roomName)}`;
}

function getRecordingName(game) {
    let d = new Date();
    let redCap = game.playerComp[0][0] != undefined ? game.playerComp[0][0].player.name : 'Red';
    let blueCap = game.playerComp[1][0] != undefined ? game.playerComp[1][0].player.name : 'Blue';
    let day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate();
    let month = d.getMonth() < 10 ? '0' + (d.getMonth() + 1) : (d.getMonth() + 1);
    let year = d.getFullYear() % 100 < 10 ? '0' + (d.getFullYear() % 100) : (d.getFullYear() % 100);
    let hour = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();
    let minute = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();
    return `${day}-${month}-${year}-${hour}h${minute}-${redCap}vs${blueCap}.hbr2`;
}

function fetchRecording(game) {
    if (gameWebhook != "") {
        let form = new FormData();
        form.append(null, new File([game.rec], getRecordingName(game), { "type": "text/plain" }));
        form.append("payload_json", JSON.stringify({
            "username": roomName
        }));

        fetch(gameWebhook, {
            method: 'POST',
            body: form,
        }).then((res) => res);
    }
}

/* FEATURE FUNCTIONS */

function getCommand(commandStr) {
    if (commands.hasOwnProperty(commandStr)) return commandStr;
    for (const [key, value] of Object.entries(commands)) {
        for (let alias of value.aliases) {
            if (alias == commandStr) return key;
        }
    }
    return false;
}

function getPlayerComp(player) {
    if (player == null || player.id == 0) return null;
    var comp = game.playerComp;
    var index = comp[0].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[0][index];
    index = comp[1].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[1][index];
    return null;
}

function getTeamArray(team) {
    return team == Team.RED ? teamRed : team == Team.BLUE ? teamBlue : teamSpec;
}

function sendAnnouncementTeam(message, team, color, style, mention) {
    for (let player of team) {
        room.sendAnnouncement(message, player.id, color, style, mention);
    }
}

function teamChat(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    var emoji = player.team == Team.RED ? '🔴' : player.team == Team.BLUE ? '🔵' : '⚪';
    var message = `${emoji} [TEAM] ${player.name}: ${msgArray.join(' ')}`;
    var team = getTeamArray(player.team);
    var color = player.team == Team.RED ? redColor : player.team == Team.BLUE ? blueColor : null;
    var style = 'bold';
    var mention = HaxNotification.CHAT;
    sendAnnouncementTeam(message, team, color, style, mention);
}

function playerChat(player, message) {
    var msgArray = message.split(/ +/);
    var playerTargetIndex = players.findIndex(
        (p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
    );
    if (playerTargetIndex == -1) {
        room.sendAnnouncement(
            `Invalid player, make sure the name you entered is correct.`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var playerTarget = players[playerTargetIndex];
    if (player.id == playerTarget.id) {
        room.sendAnnouncement(
            `You can't send a PM to yourself!`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var messageFrom = `📝 [PM with ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    var messageTo = `📝 [PM with ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    room.sendAnnouncement(
        messageFrom,
        player.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
    room.sendAnnouncement(
        messageTo,
        playerTarget.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
}

/* PHYSICS FUNCTIONS */

function calculateStadiumVariables() {
    if (checkStadiumVariable && teamRed.length + teamBlue.length > 0) {
        checkStadiumVariable = false;
        setTimeout(() => {
            let ballDisc = room.getDiscProperties(0);
            let playerDisc = room.getPlayerDiscProperties(teamRed.concat(teamBlue)[0].id);
            ballRadius = ballDisc.radius;
            playerRadius = playerDisc.radius;
            triggerDistance = ballRadius + playerRadius + 0.01;
            speedCoefficient = 100 / (5 * ballDisc.invMass * (ballDisc.damping ** 60 + 1));
        }, 1);
    }
}

function checkGoalKickTouch(array, index, goal) {
    if (array != null && array.length >= index + 1) {
        var obj = array[index];
        if (obj != null && obj.goal != null && obj.goal == goal) return obj;
    }
    return null;
}

/* BUTTONS */

function swapButton() {
    for (let player of teamBlue) {
        room.setPlayerTeam(player.id, Team.RED);
    }
    for (let player of teamRed) {
        room.setPlayerTeam(player.id, Team.BLUE);
    }
}

/* COMMAND FUNCTIONS */

/* PLAYER COMMANDS */

function leaveCommand(player, message) {
    room.kickPlayer(player.id, 'Bye !', false);
}

function helpCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        var commandString = 'Player commands :';
        for (const [key, value] of Object.entries(commands)) {
            if (value.desc && value.roles == Role.PLAYER) commandString += ` !${key},`;
        }
        commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        if (getRole(player) >= Role.ADMIN_TEMP) {
            commandString += `Admin commands :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.ADMIN_TEMP) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':')
                commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        if (getRole(player) >= Role.MASTER) {
            commandString += `Master commands :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.MASTER) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':') commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        commandString += "\nTo get information on a specific command, type ''!help <command name>'.";
        room.sendAnnouncement(
            commandString,
            player.id,
            infoColor,
            'bold',
            HaxNotification.CHAT
        );
    } else if (msgArray.length >= 1) {
        var commandName = getCommand(msgArray[0].toLowerCase());
        if (commandName != false && commands[commandName].desc != false)
            room.sendAnnouncement(
                `\'${commandName}\' command :\n${commands[commandName].desc}`,
                player.id,
                infoColor,
                'bold',
                HaxNotification.CHAT
            );
        else
            room.sendAnnouncement(
                `The command you tried to get information on does not exist. To check all available commands, type \'!help\'`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
    }
}

function masterCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == masterPassword) {
        if (!masterList.includes(authArray[player.id][0])) {
            room.setPlayerAdmin(player.id, true);
            adminList = adminList.filter((a) => a[0] != authArray[player.id][0]);
            masterList.push(authArray[player.id][0]);
            room.sendAnnouncement(
                `${player.name} is now a room master !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `You are a master already !`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* ADMIN COMMANDS */

function restartCommand(player, message) {
    instantRestart();
}

function restartSwapCommand(player, message) {
    room.stopGame();
    swapButton();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function swapCommand(player, message) {
    if (playSituation == Situation.STOP) {
        swapButton();
        room.sendAnnouncement(
            '✔️ Teams swapped !',
            null,
            announcementColor,
            'bold',
            null
        );
    } else {
        room.sendAnnouncement(
            `Please stop the game before swapping.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function kickTeamCommand(player, message) {
    var msgArray = message.split(/ +/);
    var reasonString = `Team kick by ${player.name}`;
    if (msgArray.length > 1) {
        reasonString = msgArray.slice(1).join(' ');
    }
    if (['!kickred', '!kickr'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamRed.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamRed[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickblue', '!kickb'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamBlue.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamBlue[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickspec', '!kicks'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamSpec.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamSpec[0].id, reasonString, false);
            }, i * 20)
        }
    }
}

function stadiumCommand(player, message) {
    var msgArray = message.split(/ +/);
    if (gameState == State.STOP) {
        if (['!classic'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(classicMap).name == 'Classic') {
                room.setDefaultStadium('Classic');
            } else {
                room.setCustomStadium(classicMap);
            }
        } else if (['!big'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(bigMap).name == 'Big') {
                room.setDefaultStadium('Big');
            } else {
                room.setCustomStadium(bigMap);
            }
        } else if (['!training'].includes(msgArray[0].toLowerCase())) {
            room.setCustomStadium(trainingMap);
        } else {
            room.sendAnnouncement(
                `Stadium not recognized.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Please stop the game before using this command.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

/* MASTER COMMANDS */

function clearbansCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        room.clearBans();
        room.sendAnnouncement(
            '✔️ Bans cleared !',
            null,
            announcementColor,
            'bold',
            null
        );
        banList = [];
    } else if (msgArray.length == 1) {
        if (parseInt(msgArray[0]) > 0) {
            var ID = parseInt(msgArray[0]);
            room.clearBan(ID);
            if (banList.length != banList.filter((p) => p[1] != ID).length) {
                room.sendAnnouncement(
                    `✔️ ${banList.filter((p) => p[1] == ID)[0][0]} has been unbanned from the room !`,
                    null,
                    announcementColor,
                    'bold',
                    null
                );
            } else {
                room.sendAnnouncement(
                    `The ID you entered doesn't have a ban associated to. Enter "!help clearbans" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
            banList = banList.filter((p) => p[1] != ID);
        } else {
            room.sendAnnouncement(
                `Invalid ID entered. Enter "!help clearbans" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help clearbans" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function banListCommand(player, message) {
    if (banList.length == 0) {
        room.sendAnnouncement(
            "📢 There's nobody in the ban list.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = '📢 Ban list : ';
    for (let ban of banList) {
        cstm += ban[0] + `[${ban[1]}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function adminListCommand(player, message) {
    if (adminList.length == 0) {
        room.sendAnnouncement(
            "📢 There's nobody in the admin list.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = '📢 Admin list : ';
    for (let i = 0; i < adminList.length; i++) {
        cstm += adminList[i][1] + `[${i}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function setAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (!adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    if (!masterList.includes(authArray[playerAdmin.id][0])) {
                        room.setPlayerAdmin(playerAdmin.id, true);
                        adminList.push([authArray[playerAdmin.id][0], playerAdmin.name]);
                        room.sendAnnouncement(
                            `${playerAdmin.name} is now a room admin !`,
                            null,
                            announcementColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    } else {
                        room.sendAnnouncement(
                            `This player is a master already !`,
                            player.id,
                            errorColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    }
                } else {
                    room.sendAnnouncement(
                        `This player is a permanent admin already !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `There is no player with such ID in the room. Enter "!help setadmin" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else {
            room.sendAnnouncement(
                `Incorrect format for your argument. Enter "!help setadmin" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help setadmin" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function removeAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    room.setPlayerAdmin(playerAdmin.id, false);
                    adminList = adminList.filter((a) => a[0] != authArray[playerAdmin.id][0]);
                    room.sendAnnouncement(
                        `${playerAdmin.name} is not a room admin anymore !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.sendAnnouncement(
                        `This player isn't a permanent admin !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `There is no player with such ID in the room. Enter "!help removeadmin" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else if (msgArray[0].length > 0 && parseInt(msgArray[0]) < adminList.length) {
            var index = parseInt(msgArray[0]);
            var playerAdmin = adminList[index];
            if (players.findIndex((p) => authArray[p.id][0] == playerAdmin[0]) != -1) {
                // check if there is the removed admin in the room
                var indexRem = players.findIndex((p) => authArray[p.id][0] == playerAdmin[0]);
                room.setPlayerAdmin(players[indexRem].id, false);
            }
            adminList.splice(index);
            room.sendAnnouncement(
                `${playerAdmin[1]} is not a room admin anymore !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Incorrect format for your argument. Enter "!help removeadmin" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help removeadmin" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function passwordCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray.length == 1 && msgArray[0] == '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `The room password has been removed.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
        roomPassword = msgArray.join(' ');
        room.setPassword(roomPassword);
        room.sendAnnouncement(
            `The room password has been set to ${roomPassword}`,
            player.id,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        if (roomPassword != '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `The room password has been removed.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `The room currently does not have a password. Enter "!help password" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* GAME FUNCTIONS */

function checkTime() {
    const scores = room.getScores();
    if (game != undefined) game.scores = scores;
    if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0 && playSituation == Situation.PLAY) {
        if (scores.red != scores.blue) {
            if (!checkTimeVariable) {
                checkTimeVariable = true;
                setTimeout(() => {
                    checkTimeVariable = false;
                }, 3000);
                scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
                stopTimeout = setTimeout(() => {
                    room.stopGame();
                }, 2000);
            }
            return;
        }
        if (drawTimeLimit != 0) {
            goldenGoal = true;
            room.sendAnnouncement(
                '⚽ First goal wins !',
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
    if (Math.abs(scores.time - drawTimeLimit * 60 - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
        if (!checkTimeVariable) {
            checkTimeVariable = true;
            setTimeout(() => {
                checkTimeVariable = false;
            }, 10);
            endGame(Team.SPECTATORS);
            room.stopGame();
            goldenGoal = false;
        }
    }
}

function instantRestart() {
    room.stopGame();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function resumeGame() {
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 1000);
    setTimeout(() => {
        room.pauseGame(false);
    }, 500);
}

function endGame(winner) {
    const scores = room.getScores();
    game.scores = scores;
    endGameVariable = true;
    if (winner == Team.RED) {
        room.sendAnnouncement(
            `✨ Red Team won ${scores.red} - ${scores.blue} !`,
            null,
            redColor,
            'bold',
            HaxNotification.CHAT
        );
    } else if (winner == Team.BLUE) {
        room.sendAnnouncement(
            `✨ Blue Team won ${scores.blue} - ${scores.red} !`,
            null,
            blueColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        room.sendAnnouncement(
            '💤 Draw limit reached !',
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    }
    let possessionRedPct = (possession[0] / (possession[0] + possession[1])) * 100;
    let possessionBluePct = 100 - possessionRedPct;
    let possessionString = `🔴 ${possessionRedPct.toFixed(0)}% - ${possessionBluePct.toFixed(0)}% 🔵`;
    let actionRedPct = (actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1])) * 100;
    let actionBluePct = 100 - actionRedPct;
    let actionString = `🔴 ${actionRedPct.toFixed(0)}% - ${actionBluePct.toFixed(0)}% 🔵`;
    let CSString = getCSString(scores);
    room.sendAnnouncement(
        `📊 Possession: 🔴 ${possessionString}\n` +
        `📊 Action Zone: 🔴 ${actionString}\n` +
        `${CSString}`,
        null,
        announcementColor,
        'bold',
        HaxNotification.NONE
    );
}

/* PLAYER FUNCTIONS */

function updateTeams() {
    players = room.getPlayerList();
    teamRed = players.filter((p) => p.team == Team.RED);
    teamBlue = players.filter((p) => p.team == Team.BLUE);
    teamSpec = players.filter((p) => p.team == Team.SPECTATORS);
}

function updateAdmins(excludedPlayerID = 0) {
    if (players.length != 0 && players.filter((p) => p.admin).length < maxAdmins) {
        let playerArray = players.filter((p) => p.id != excludedPlayerID && !p.admin);
        let arrayID = playerArray.map((player) => player.id);
        room.setPlayerAdmin(Math.min(...arrayID), true);
    }
}

function getRole(player) {
    return (
        !!masterList.find((a) => a == authArray[player.id][0]) * 2 +
        !!adminList.find((a) => a[0] == authArray[player.id][0]) * 1 +
        player.admin * 1
    );
}

function ghostKickHandle(oldP, newP) {
    var teamArrayId = getTeamArray(oldP.team).map((p) => p.id);
    teamArrayId.splice(teamArrayId.findIndex((id) => id == oldP.id), 1, newP.id);

    room.kickPlayer(oldP.id, 'Ghost kick', false);
    room.setPlayerTeam(newP.id, oldP.team);
    room.setPlayerAdmin(newP.id, oldP.admin);
    room.reorderPlayers(teamArrayId, true);

    if (oldP.team != Team.SPECTATORS && playSituation != Situation.STOP) {
        var discProp = room.getPlayerDiscProperties(oldP.id);
        room.setPlayerDiscProperties(newP.id, discProp);
    }
}

/* ACTIVITY FUNCTIONS */

function handleActivityPlayer(player) {
    let pComp = getPlayerComp(player);
    if (pComp != null) {
        pComp.inactivityTicks++;
        return pComp.inactivityTicks;
    }
    return 0;
}

function handleActivityPlayerTeamChange(changedPlayer) {
    if (changedPlayer.team == Team.SPECTATORS) {
        let pComp = getPlayerComp(changedPlayer);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivityStop() {
    for (let player of players) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivity() {
    if (gameState == State.PLAY && players.length > 1) {
        var playerMaxInactivity = 0;
        for (let player of teamRed) {
            var playerInactivity = handleActivityPlayer(player);
            playerMaxInactivity = Math.max(playerInactivity, playerMaxInactivity);
        }
        for (let player of teamBlue) {
            var playerInactivity = handleActivityPlayer(player);
            playerMaxInactivity = Math.max(playerInactivity, playerMaxInactivity);
        }
        if (playerMaxInactivity >= maxInactivity * 60 * 60) {
            cancelGameVariable = true;
            room.stopGame();
            room.sendAnnouncement(
                '⚠️ Game was stopped due to inactivity !',
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
            handleActivityStop();
        }
    }
}

/* LINEUP FUNCTIONS */

function getStartingLineups() {
    var compositions = [[], []];
    for (let player of teamRed) {
        compositions[0].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    for (let player of teamBlue) {
        compositions[1].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    return compositions;
}

function handleLineupChangeTeamChange(changedPlayer) {
    if (gameState != State.STOP) {
        var playerLineup;
        if (changedPlayer.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[0][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[0].push(playerLineup);
            }
        } else if (changedPlayer.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[1][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[1].push(playerLineup);
            }
        }
        if (teamRed.some((r) => r.id == changedPlayer.id)) {
            // player leaves red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (teamBlue.some((r) => r.id == changedPlayer.id)) {
            // player leaves blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

function handleLineupChangeLeave(player) {
    if (playSituation != Situation.STOP) {
        if (player.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (player.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

/* STATS FUNCTIONS */

/* GK FUNCTIONS */

function handleGKTeam(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? teamRed : teamBlue;
    let playerGK = teamArray.reduce((prev, current) => {
        if (team == Team.RED) {
            return (prev?.position.x < current.position.x) ? prev : current
        } else {
            return (prev?.position.x > current.position.x) ? prev : current
        }
    }, null);
    let playerCompGK = getPlayerComp(playerGK);
    return playerCompGK;
}

function handleGK() {
    let redGK = handleGKTeam(Team.RED);
    if (redGK != null) {
        redGK.GKTicks++;
    }
    let blueGK = handleGKTeam(Team.BLUE);
    if (blueGK != null) {
        blueGK.GKTicks++;
    }
}

function getGK(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? game.playerComp[0] : game.playerComp[1];
    let playerGK = teamArray.reduce((prev, current) => {
        return (prev?.GKTicks > current.GKTicks) ? prev : current
    }, null);
    return playerGK;
}

function getCS(scores) {
    let playersNameCS = [];
    let redGK = getGK(Team.RED);
    let blueGK = getGK(Team.BLUE);
    if (redGK != null && scores.blue == 0) {
        playersNameCS.push(redGK.player.name);
    }
    if (blueGK != null && scores.red == 0) {
        playersNameCS.push(blueGK.player.name);
    }
    return playersNameCS;
}

function getCSString(scores) {
    let playersCS = getCS(scores);
    if (playersCS.length == 0) {
        return "🥅 No CS";
    } else if (playersCS.length == 1) {
        return `🥅 ${playersCS[0]} had a CS.`;
    } else {
        return `🥅 ${playersCS[0]} and ${playersCS[1]} had a CS.`;
    }
}

/* GLOBAL STATS FUNCTIONS */

function getLastTouchOfTheBall() {
    const ballPosition = room.getBallPosition();
    updateTeams();
    let playerArray = [];
    for (let player of players) {
        if (player.position != null) {
            var distanceToBall = pointDistance(player.position, ballPosition);
            if (distanceToBall < triggerDistance) {
                if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
                playerArray.push([player, distanceToBall]);
            }
        }
    }
    if (playerArray.length != 0) {
        let playerTouch = playerArray.sort((a, b) => a[1] - b[1])[0][0];
        if (lastTeamTouched == playerTouch.team || lastTeamTouched == Team.SPECTATORS) {
            if (lastTouches[0] == null || (lastTouches[0] != null && lastTouches[0].player.id != playerTouch.id)) {
                game.touchArray.push(
                    new BallTouch(
                        playerTouch,
                        game.scores.time,
                        getGoalGame(),
                        ballPosition
                    )
                );
                lastTouches[0] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 1,
                    getGoalGame()
                );
                lastTouches[1] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 2,
                    getGoalGame()
                );
            }
        }
        lastTeamTouched = playerTouch.team;
    }
}

function getBallSpeed() {
    var ballProp = room.getDiscProperties(0);
    return Math.sqrt(ballProp.xspeed ** 2 + ballProp.yspeed ** 2) * speedCoefficient;
}

function getGameStats() {
    if (playSituation == Situation.PLAY && gameState == State.PLAY) {
        lastTeamTouched == Team.RED ? possession[0]++ : possession[1]++;
        var ballPosition = room.getBallPosition();
        ballPosition.x < 0 ? actionZoneHalf[0]++ : actionZoneHalf[1]++;
    }
}

/* GOAL ATTRIBUTION FUNCTIONS */

function getGoalAttribution(team) {
    var goalAttribution = Array(2).fill(null);
    if (lastTouches[0] != null) {
        if (lastTouches[0].player.team == team) {
            // Direct goal scored by player
            if (lastTouches[1] != null && lastTouches[1].player.team == team) {
                goalAttribution = [lastTouches[0].player, lastTouches[1].player];
            } else {
                goalAttribution = [lastTouches[0].player, null];
            }
        } else {
            // Own goal
            goalAttribution = [lastTouches[0].player, null];
        }
    }
    return goalAttribution;
}

function getGoalString(team) {
    var goalString;
    var scores = game.scores;
    var goalAttribution = getGoalAttribution(team);
    if (goalAttribution[0] != null) {
        if (goalAttribution[0].team == team) {
            if (goalAttribution[1] != null && goalAttribution[1].team == team) {
                goalString = `⚽ ${getTimeGame(scores.time)} Goal by ${goalAttribution[0].name} ! Assist by ${goalAttribution[1].name}. Goal speed : ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(
                        scores.time,
                        team,
                        goalAttribution[0],
                        goalAttribution[1]
                    )
                );
            } else {
                goalString = `⚽ ${getTimeGame(scores.time)} Goal by ${goalAttribution[0].name} ! Goal speed : ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(scores.time, team, goalAttribution[0], null)
                );
            }
        } else {
            goalString = `😂 ${getTimeGame(scores.time)} Own goal by ${goalAttribution[0].name} ! Goal speed : ${ballSpeed.toFixed(2)}km/h.`;
            game.goals.push(
                new Goal(scores.time, team, goalAttribution[0], null)
            );
        }
    } else {
        goalString = `⚽ ${getTimeGame(scores.time)} Goal for ${team == Team.RED ? 'red' : 'blue'} team ! Goal speed : ${ballSpeed.toFixed(2)}km/h.`;
        game.goals.push(
            new Goal(scores.time, team, null, null)
        );
    }

    return goalString;
}

/* GET STATS FUNCTIONS */

function actionReportCountTeam(goals, team) {
    let playerActionSummaryTeam = [];
    let indexTeam = team == Team.RED ? 0 : 1;
    let indexOtherTeam = team == Team.RED ? 1 : 0;
    for (let goal of goals[indexTeam]) {
        if (goal[0] != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == goal[0].id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[0].id);
                playerActionSummaryTeam[index][1]++;
            } else {
                playerActionSummaryTeam.push([goal[0], 1, 0, 0]);
            }
            if (goal[1] != null) {
                if (playerActionSummaryTeam.find(a => a[0].id == goal[1].id)) {
                    let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[1].id);
                    playerActionSummaryTeam[index][2]++;
                } else {
                    playerActionSummaryTeam.push([goal[1], 0, 1, 0]);
                }
            }
        }
    }
    if (goals[indexOtherTeam].length == 0) {
        let playerCS = getGK(team)?.player;
        if (playerCS != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == playerCS.id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == playerCS.id);
                playerActionSummaryTeam[index][3]++;
            } else {
                playerActionSummaryTeam.push([playerCS, 0, 0, 1]);
            }
        }
    }

    playerActionSummaryTeam.sort((a, b) => (a[1] + a[2] + a[3]) - (b[1] + b[2] + b[3]));
    return playerActionSummaryTeam;
}

/* FETCH FUNCTIONS */

function fetchGametimeReport(game) {
    var fieldGametimeRed = {
        name: '🔴        **RED TEAM STATS**',
        value: '⌛ __**Game Time:**__\n\n',
        inline: true,
    };
    var fieldGametimeBlue = {
        name: '🔵       **BLUE TEAM STATS**',
        value: '⌛ __**Game Time:**__\n\n',
        inline: true,
    };
    var redTeamTimes = game.playerComp[0].map((p) => [p.player, 0]);
    for (let i = 0; i < game.playerComp[0].length; i++) {
        var player = game.playerComp[0][i];
        for (let j = 0; j < player.timeEntry.length; j++) {
            if (player.timeExit.length < j + 1) {
                redTeamTimes[i][1] += game.scores.time - player.timeEntry[j];
            } else {
                redTeamTimes[i][1] += player.timeExit[j] - player.timeEntry[j];
            }
        }
    }
    var blueTeamTimes = game.playerComp[1].map((p) => [p.player, 0]);
    for (let i = 0; i < game.playerComp[1].length; i++) {
        var player = game.playerComp[1][i];
        for (let j = 0; j < player.timeEntry.length; j++) {
            if (player.timeExit.length < j + 1) {
                blueTeamTimes[i][1] += game.scores.time - player.timeEntry[j];
            } else {
                blueTeamTimes[i][1] += player.timeExit[j] - player.timeEntry[j];
            }
        }
    }

    for (let time of redTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeRed.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeRed.value += `\n${blueTeamTimes.length - redTeamTimes.length > 0 ? '\n'.repeat(blueTeamTimes.length - redTeamTimes.length) : ''
        }`;
    fieldGametimeRed.value += '=====================';

    for (let time of blueTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeBlue.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeBlue.value += `\n${redTeamTimes.length - blueTeamTimes.length > 0 ? '\n'.repeat(redTeamTimes.length - blueTeamTimes.length) : ''
        }`;
    fieldGametimeBlue.value += '=====================';

    return [fieldGametimeRed, fieldGametimeBlue];
}

function fetchActionsSummaryReport(game) {
    var fieldReportRed = {
        name: '🔴        **RED TEAM STATS**',
        value: '📊 __**Player Stats:**__\n\n',
        inline: true,
    };
    var fieldReportBlue = {
        name: '🔵       **BLUE TEAM STATS**',
        value: '📊 __**Player Stats:**__\n\n',
        inline: true,
    };
    var goals = [[], []];
    for (let goal of game.goals) {
        goals[goal.team - 1].push([goal.striker, goal.assist]);
    }
    var redActions = actionReportCountTeam(goals, Team.RED);
    if (redActions.length > 0) {
        for (let act of redActions) {
            fieldReportRed.value += `> **${act[0].team != Team.RED ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }
    var blueActions = actionReportCountTeam(goals, Team.BLUE);
    if (blueActions.length > 0) {
        for (let act of blueActions) {
            fieldReportBlue.value += `> **${act[0].team != Team.BLUE ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }

    fieldReportRed.value += `\n${blueActions.length - redActions.length > 0 ? '\n'.repeat(blueActions.length - redActions.length) : ''
        }`;
    fieldReportRed.value += '=====================';

    fieldReportBlue.value += `\n${redActions.length - blueActions.length > 0 ? '\n'.repeat(redActions.length - blueActions.length) : ''
        }`;
    fieldReportBlue.value += '=====================';

    return [fieldReportRed, fieldReportBlue];
}

function fetchSummaryEmbed(game) {
    var fetchEndgame = [fetchGametimeReport, fetchActionsSummaryReport];
    var logChannel = gameWebhook;
    var fields = [
        {
            name: '🔴        **RED TEAM STATS**',
            value: '=====================\n\n',
            inline: true,
        },
        {
            name: '🔵       **BLUE TEAM STATS**',
            value: '=====================\n\n',
            inline: true,
        },
    ];
    for (let i = 0; i < fetchEndgame.length; i++) {
        var fieldsReport = fetchEndgame[i](game);
        fields[0].value += fieldsReport[0].value + '\n\n';
        fields[1].value += fieldsReport[1].value + '\n\n';
    }
    fields[0].value = fields[0].value.substring(0, fields[0].value.length - 2);
    fields[1].value = fields[1].value.substring(0, fields[1].value.length - 2);

    var possR = possession[0] / (possession[0] + possession[1]);
    var possB = 1 - possR;
    var possRString = (possR * 100).toFixed(0).toString();
    var possBString = (possB * 100).toFixed(0).toString();
    var zoneR = actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1]);
    var zoneB = 1 - zoneR;
    var zoneRString = (zoneR * 100).toFixed(0).toString();
    var zoneBString = (zoneB * 100).toFixed(0).toString();
    var win = (game.scores.red > game.scores.blue) * 1 + (game.scores.blue > game.scores.red) * 2;
    var objectBodyWebhook = {
        embeds: [
            {
                title: `📝 MATCH REPORT #${getIdReport()}`,
                description:
                    `**${getTimeEmbed(game.scores.time)}** ` +
                    (win == 1 ? '**Red Team** ' : 'Red Team ') + game.scores.red +
                    ' - ' +
                    game.scores.blue + (win == 2 ? ' **Blue Team**' : ' Blue Team') +
                    '\n```c\nPossession: ' + possRString + '% - ' + possBString + '%' +
                    '\nAction Zone: ' + zoneRString + '% - ' + zoneBString + '%\n```\n\n',
                color: 9567999,
                fields: fields,
                footer: {
                    text: `Recording: ${getRecordingName(game)}`,
                },
                timestamp: new Date().toISOString(),
            },
        ],
        username: roomName
    };
    if (logChannel != '') {
        fetch(logChannel, {
            method: 'POST',
            body: JSON.stringify(objectBodyWebhook),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
}

/* EVENTS */

/* PLAYER MOVEMENT */

room.onPlayerJoin = function (player) {
    authArray[player.id] = [player.auth, player.conn];
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ➡️ JOIN (${players.length + 1}/${maxPlayers})\n**` +
                    `${player.name}** [${authArray[player.id][0]}] {${authArray[player.id][1]}}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    room.sendAnnouncement(
        `👋 Welcome ${player.name} !\nEnter "t" before your message to use team chat and "@@" followed by a player name to PM him !`,
        player.id,
        welcomeColor,
        'bold',
        HaxNotification.CHAT
    );
    room.sendAnnouncement(
        `🟦 LHE 🟦 https://discord.gg/FPA7d8kfgG`,
        player.id,
        welcomeColor,
        'bold',
        HaxNotification.CHAT
    );
    updateTeams();
    updateAdmins();
    if (masterList.findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(
            `Master ${player.name} has connected to the room !`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(player.id, true);
    } else if (adminList.map((a) => a[0]).findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(
            `Admin ${player.name} has connected to the room !`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(player.id, true);
    }
    var sameAuthCheck = players.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
    if (sameAuthCheck.length > 0 && !debugMode) {
        var oldPlayerArray = players.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
        for (let oldPlayer of oldPlayerArray) {
            ghostKickHandle(oldPlayer, player);
        }
    }
};

room.onPlayerTeamChange = function (changedPlayer, byPlayer) {
    handleLineupChangeTeamChange(changedPlayer);
    updateTeams();
    handleActivityPlayerTeamChange(changedPlayer);
};

room.onPlayerLeave = function (player) {
    setTimeout(() => {
        if (!kickFetchVariable) {
            if (roomWebhook != '') {
                var stringContent = `[${getDate()}] ⬅️ LEAVE (${players.length}/${maxPlayers})\n**${player.name}**` +
                    `[${authArray[player.id][0]}] {${authArray[player.id][1]}}`;
                fetch(roomWebhook, {
                    method: 'POST',
                    body: JSON.stringify({
                        content: stringContent,
                        username: roomName,
                    }),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }).then((res) => res);
            }
        } else kickFetchVariable = false;
    }, 10);
    handleLineupChangeLeave(player);
    updateTeams();
    updateAdmins();
};

room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) {
    kickFetchVariable = true;
    if (roomWebhook != '') {
        var stringContent = `[${getDate()}] ⛔ ${ban ? 'BAN' : 'KICK'} (${players.length}/${maxPlayers})\n` +
            `**${kickedPlayer.name}** [${authArray[kickedPlayer.id][0]}] {${authArray[kickedPlayer.id][1]}} was ${ban ? 'banned' : 'kicked'}` +
            `${byPlayer != null ? ' by **' + byPlayer.name + '** [' + authArray[byPlayer.id][0] + '] {' + authArray[byPlayer.id][1] + '}' : ''}`
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: stringContent,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((ban && ((byPlayer != null &&
        (byPlayer.id == kickedPlayer.id || getRole(byPlayer) < Role.MASTER)) || getRole(kickedPlayer) == Role.MASTER)) || disableBans
    ) {
        room.clearBan(kickedPlayer.id);
        return;
    }
    if (byPlayer != null && getRole(byPlayer) < Role.ADMIN_PERM) {
        room.sendAnnouncement(
            'You are not allowed to kick/ban players !',
            byPlayer.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(byPlayer.id, false);
        return;
    }
    if (ban) banList.push([kickedPlayer.name, kickedPlayer.id]);
};

/* PLAYER ACTIVITY */

room.onPlayerChat = function (player, message) {
    let msgArray = message.split(/ +/);
    if (!hideClaimMessage || msgArray[0] != '!claim') {
        if (roomWebhook != '')
            fetch(roomWebhook, {
                method: 'POST',
                body: JSON.stringify({
                    content: `[${getDate()}] 💬 CHAT\n**${player.name}** : ${message.replace('@', '@ ')}`,
                    username: roomName,
                }),
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then((res) => res);
    }
    if (msgArray[0][0] == '!') {
        let command = getCommand(msgArray[0].slice(1).toLowerCase());
        if (command != false && commands[command].roles <= getRole(player)) commands[command].function(player, message);
        else
            room.sendAnnouncement(
                `The command you tried to enter does not exist for you. Please enter '!help' to get the available commands to you.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        return false;
    }
    if (msgArray[0].toLowerCase() == 't') {
        teamChat(player, message);
        return false;
    }
    if (msgArray[0].substring(0, 2) === '@@') {
        playerChat(player, message);
        return false;
    }
};

room.onPlayerActivity = function (player) {
    if (gameState !== State.STOP) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
};

room.onPlayerBallKick = function (player) {
    if (playSituation != Situation.GOAL) {
        var ballPosition = room.getBallPosition();
        if (game.touchArray.length == 0 || player.id != game.touchArray[game.touchArray.length - 1].player.id) {
            if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
            lastTeamTouched = player.team;
            game.touchArray.push(
                new BallTouch(
                    player,
                    game.scores.time,
                    getGoalGame(),
                    ballPosition
                )
            );
            lastTouches[0] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 1,
                getGoalGame()
            );
            lastTouches[1] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 2,
                getGoalGame()
            );
        }
    }
};

/* GAME MANAGEMENT */

room.onGameStart = function (byPlayer) {
    clearTimeout(startTimeout);
    if (byPlayer != null) clearTimeout(stopTimeout);
    game = new Game();
    possession = [0, 0];
    actionZoneHalf = [0, 0];
    gameState = State.PLAY;
    endGameVariable = false;
    goldenGoal = false;
    playSituation = Situation.KICKOFF;
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    calculateStadiumVariables();
};

room.onGameStop = function (byPlayer) {
    clearTimeout(stopTimeout);
    clearTimeout(unpauseTimeout);
    if (byPlayer != null) clearTimeout(startTimeout);
    game.rec = room.stopRecording();
    if (
        !cancelGameVariable && game.playerComp[0].length + game.playerComp[1].length > 0 &&
        (
            (game.scores.timeLimit != 0 &&
                ((game.scores.time >= 0.5 * game.scores.timeLimit &&
                    game.scores.time < 0.75 * game.scores.timeLimit &&
                    game.scores.red != game.scores.blue) ||
                    game.scores.time >= 0.75 * game.scores.timeLimit)
            ) ||
            endGameVariable
        )
    ) {
        fetchSummaryEmbed(game);
        if (fetchRecordingVariable) {
            setTimeout((gameEnd) => { fetchRecording(gameEnd); }, 500, game);
        }
    }
    cancelGameVariable = false;
    gameState = State.STOP;
    playSituation = Situation.STOP;
    updateTeams();
    handleActivityStop();
};

room.onGamePause = function (byPlayer) {
    if (mentionPlayersUnpause && gameState == State.PAUSE) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Game paused by ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Game paused !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
    clearTimeout(unpauseTimeout);
    gameState = State.PAUSE;
};

room.onGameUnpause = function (byPlayer) {
    unpauseTimeout = setTimeout(() => {
        gameState = State.PLAY;
    }, 2000);
    if (mentionPlayersUnpause) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Game unpaused by ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Game unpaused !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
};

room.onTeamGoal = function (team) {
    const scores = room.getScores();
    game.scores = scores;
    playSituation = Situation.GOAL;
    ballSpeed = getBallSpeed();
    var goalString = getGoalString(team);
    room.sendAnnouncement(
        goalString,
        null,
        team == Team.RED ? redColor : blueColor,
        null,
        HaxNotification.CHAT
    );
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ${goalString}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit)) || goldenGoal) {
        endGame(team);
        goldenGoal = false;
        stopTimeout = setTimeout(() => {
            room.stopGame();
        }, 1000);
    }
};

room.onPositionsReset = function () {
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    playSituation = Situation.KICKOFF;
};

/* MISCELLANEOUS */

room.onRoomLink = function (url) {
    console.log(`${url}\nmasterPassword : ${masterPassword}`);
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] 🔗 LINK ${url}\nmasterPassword : ${masterPassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
};

room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
    updateTeams();
    if (!changedPlayer.admin && getRole(changedPlayer) >= Role.ADMIN_TEMP) {
        room.setPlayerAdmin(changedPlayer.id, true);
        return;
    }
    updateAdmins(byPlayer != null && !changedPlayer.admin && changedPlayer.id == byPlayer.id ? changedPlayer.id : 0);
};

room.onKickRateLimitSet = function (min, rate, burst, byPlayer) {
    if (byPlayer != null) {
        room.sendAnnouncement(
            `It is not allowed to change the kickrate limit. It must stay at "6-0-0".`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setKickRateLimit(6, 0, 0);
    }
};

room.onStadiumChange = function (newStadiumName, byPlayer) {
    checkStadiumVariable = true;
};

room.onGameTick = function () {
    checkTime();
    getLastTouchOfTheBall();
    getGameStats();
    handleActivity();
};
