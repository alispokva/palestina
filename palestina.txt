/* VARIABLES */

/* ROOM */

const roomName = ' Federacion Haxball Espa√±a FHE‚ù§Ô∏é';
const maxPlayers = 30;
const roomPublic = true;

// GEOLOCALIZATION //
const geo = [{"code": "UY", "lat": 40, "lon": -3}];

var roomWebhook = ''; // this webhook is used to send the details of the room (chat, join, leave) ; it should be in a private discord channel
var gameWebhook = ''; // this webhook is used to send the summary of the games ; it should be in a public discord channel
var fetchRecordingVariable = true;
var timeLimit = 0;
var scoreLimit = 0;

var gameConfig = {
    roomName: roomName,
    maxPlayers: maxPlayers,
    public: roomPublic,
    noPlayer: true,
    geo: geo[0],
}

if (typeof token == 'string' && token.length == 39) {
    gameConfig.token = token;
}

var room = HBInit(gameConfig);

const trainingMap = `{

  "name" : "üí™ Entrenamiento üî¥‚ö´ FEH ‚≠ê | “ì·¥ú·¥õx7 by ùóöùóüùóõ",

  "width" : 1275,

  "height" : 675,

  "cameraFollow" : "player",

  "redSpawnPoints" : [
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -396, 635
    ]

  ],

  "blueSpawnPoints" : [
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 396, 635
    ]

  ],

  "bg" : { "type" : "", "height" : 0, "width" : 0, "color" : "333333" },

  "vertexes" : [
    /* 0 */ { "x" : -1200, "y" : -110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 1 */ { "x" : -1250, "y" : -110, "cMask" : ["ball" ], "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : -12 },
    /* 2 */ { "x" : -1250, "y" : 110, "cMask" : ["ball" ], "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "radius" : 7, "bias" : -12 },
    /* 3 */ { "x" : -1200, "y" : 110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 4 */ { "x" : 1200, "y" : -110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : -12 },
    /* 5 */ { "x" : 1250, "y" : -110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 6 */ { "x" : 1250, "y" : 110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 7 */ { "x" : 1200, "y" : 110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : -12 },
    
    /* 8 */ { "x" : 1200, "y" : 600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "curve" : 0, "color" : "db9b30", "bias" : -12 },
    /* 9 */ { "x" : 1200, "y" : -600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : 12, "color" : "db9b30", "curve" : 0 },
    /* 10 */ { "x" : -1200, "y" : 600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "curve" : 0, "vis" : false, "bias" : -12, "color" : "db9b30" },
    /* 11 */ { "x" : -1200, "y" : -600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "vis" : false, "curve" : 0, "bias" : 12, "color" : "db9b30" },
    /* 12 */ { "x" : 1200, "y" : -110, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "vis" : false, "curve" : 0 },
    /* 13 */ { "x" : 1200, "y" : -110, "bCoef" : 2, "cMask" : ["ball" ], "trait" : "ballArea", "vis" : false, "curve" : 0 },
    
    /* 14 */ { "x" : -787, "y" : 205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 15 */ { "x" : -787, "y" : -205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 16 */ { "x" : -1075, "y" : -470, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 17 */ { "x" : -1200, "y" : 110, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 18 */ { "x" : -1200, "y" : -110, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 19 */ { "x" : -1200, "y" : 110, "bCoef" : 1, "trait" : "line", "color" : "db9b30", "bias" : -12, "curve" : 0 },
    /* 20 */ { "x" : -1200, "y" : -110, "bCoef" : 1, "trait" : "line", "color" : "db9b30", "bias" : 12, "curve" : 0 },
    /* 21 */ { "x" : 1200, "y" : 110, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 22 */ { "x" : 1200, "y" : -110, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 23 */ { "x" : 1200, "y" : 110, "bCoef" : 1, "trait" : "line", "color" : "db9b30", "bias" : 12, "curve" : 0 },
    /* 24 */ { "x" : 1200, "y" : -110, "bCoef" : 1, "trait" : "line", "color" : "db9b30", "bias" : -12, "curve" : 0 },
    /* 25 */ { "x" : -1200, "y" : -470, "bCoef" : 0, "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 26 */ { "x" : -1075, "y" : 470, "bCoef" : 0, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 27 */ { "x" : -1200, "y" : 470, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 28 */ { "x" : 787, "y" : 205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 29 */ { "x" : 1075, "y" : 470, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 30 */ { "x" : 787, "y" : -205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 31 */ { "x" : 1200, "y" : 470, "bCoef" : 0, "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 32 */ { "x" : 1075, "y" : -470, "bCoef" : 0, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 33 */ { "x" : 1200, "y" : -470, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 34 */ { "x" : -66.81557299928886, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 35 */ { "x" : -52.858545361108476, "y" : 43.829706842799226, "trait" : "line", "color" : "d5a13c" },
    /* 36 */ { "x" : -45.88003154201827, "y" : 28.70959356810382, "trait" : "line", "color" : "d5a13c" },
    /* 37 */ { "x" : -41.227688995958154, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 38 */ { "x" : -24.944490084747702, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 39 */ { "x" : -37.738432086413056, "y" : 50.808220661889415, "trait" : "line", "color" : "d5a13c" },
    /* 40 */ { "x" : -33.08608954035292, "y" : 67.09141957309986, "trait" : "line", "color" : "d5a13c" },
    /* 41 */ { "x" : -45.88003154201827, "y" : 56.62364884446458, "trait" : "line", "color" : "d5a13c" },
    /* 42 */ { "x" : -59.83705918019866, "y" : 67.09141957309986, "trait" : "line", "color" : "d5a13c" },
    /* 43 */ { "x" : -54.0216309976235, "y" : 51.97130629840446, "trait" : "line", "color" : "d5a13c" },
    /* 44 */ { "x" : 25.06819228539867, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 45 */ { "x" : 39.02521992357905, "y" : 43.829706842799226, "trait" : "line", "color" : "d5a13c" },
    /* 46 */ { "x" : 44.84064810615421, "y" : 28.70959356810382, "trait" : "line", "color" : "d5a13c" },
    /* 47 */ { "x" : 49.49299065221434, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 48 */ { "x" : 66.93927519993983, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 49 */ { "x" : 52.982247561759436, "y" : 53.13439193491949, "trait" : "line", "color" : "d5a13c" },
    /* 50 */ { "x" : 58.7976757443346, "y" : 68.2545052096149, "trait" : "line", "color" : "d5a13c" },
    /* 51 */ { "x" : 44.84064810615421, "y" : 58.94982011749465, "trait" : "line", "color" : "d5a13c" },
    /* 52 */ { "x" : 32.04670610448886, "y" : 67.09141957309986, "trait" : "line", "color" : "d5a13c" },
    /* 53 */ { "x" : 36.699048650548995, "y" : 53.13439193491949, "trait" : "line", "color" : "d5a13c" },
    /* 54 */ { "x" : 2.9695651916130616, "y" : 113.03330221544363, "trait" : "line", "curve" : 180, "color" : "db9b30" },
    /* 55 */ { "x" : 2.9695651916130616, "y" : -113.18685408673008, "trait" : "line", "curve" : 180, "color" : "db9b30" },
    /* 56 */ { "x" : -91.24037136610453, "y" : 65.92833393658485, "trait" : "line", "color" : "b5091a" },
    /* 57 */ { "x" : 89.03790229372542, "y" : 65.92833393658485, "trait" : "line", "color" : "b5091a" },
    /* 58 */ { "x" : -87.75111445655942, "y" : -70.1526855356739, "trait" : "line", "color" : "b5091a" },
    /* 59 */ { "x" : 85.54864538418033, "y" : -71.31577117218893, "trait" : "line", "color" : "b5091a" },
    /* 60 */ { "x" : -123.80676918852542, "y" : -62.01108608006867, "trait" : "line", "color" : "d59e3b" },
    /* 61 */ { "x" : -141.25305373625088, "y" : -70.1526855356739, "trait" : "line", "color" : "d59e3b" },
    /* 62 */ { "x" : -135.43762555367573, "y" : -79.45737062779416, "trait" : "line", "color" : "d59e3b" },
    /* 63 */ { "x" : -134.2745399171607, "y" : -66.66342862612879, "trait" : "line", "color" : "d59e3b" },
    /* 64 */ { "x" : -128.45911173458555, "y" : -73.64194244521899, "trait" : "line", "color" : "d59e3b" },
    /* 65 */ { "x" : -124.96985482504044, "y" : -95.7405695390046, "trait" : "line", "color" : "d59e3b" },
    /* 66 */ { "x" : -130.78528300761562, "y" : -86.43588444688436, "trait" : "line", "color" : "d59e3b" },
    /* 67 */ { "x" : -116.82825536943523, "y" : -75.96811371824907, "trait" : "line", "color" : "d59e3b" },
    /* 68 */ { "x" : -112.1759128233751, "y" : -84.10971317385427, "trait" : "line", "color" : "d59e3b" },
    /* 69 */ { "x" : -119.1544266424653, "y" : -101.55599772157976, "trait" : "line", "color" : "d59e3b" },
    /* 70 */ { "x" : -107.52357027731496, "y" : -91.08822699294447, "trait" : "line", "color" : "d59e3b" },
    /* 71 */ { "x" : -101.70814209473981, "y" : -96.90365517551965, "trait" : "line", "color" : "d59e3b" },
    /* 72 */ { "x" : -113.33899845989013, "y" : -107.37142590415493, "trait" : "line", "color" : "d59e3b" },
    /* 73 */ { "x" : -97.05579954867969, "y" : -123.65462481536537, "trait" : "line", "color" : "d59e3b" },
    /* 74 */ { "x" : -102.87122773125485, "y" : -117.83919663279022, "trait" : "line", "color" : "d59e3b" },
    /* 75 */ { "x" : -93.56654263913457, "y" : -105.04525463112485, "trait" : "line", "color" : "d59e3b" },
    /* 76 */ { "x" : -85.42494318352936, "y" : -109.69759717718497, "trait" : "line", "color" : "d59e3b" },
    /* 77 */ { "x" : -77.28334372792415, "y" : -114.34993972324511, "trait" : "line", "color" : "d59e3b" },
    /* 78 */ { "x" : -89.05527179924567, "y" : -128.7650724367832, "trait" : "line", "color" : "d59e3b" },
    /* 79 */ { "x" : -78.44642936443917, "y" : -124.81771045188042, "trait" : "line", "color" : "d59e3b" },
    /* 80 */ { "x" : -84.26185754701433, "y" : -122.49153917885033, "trait" : "line", "color" : "d59e3b" },
    /* 81 */ { "x" : -62.16323045322872, "y" : -123.65462481536537, "trait" : "line", "color" : "d59e3b" },
    /* 82 */ { "x" : -63.326316089743756, "y" : -142.26399499960587, "trait" : "line", "color" : "d59e3b" },
    /* 83 */ { "x" : -49.36928845156338, "y" : -128.3069673614255, "trait" : "line", "color" : "d59e3b" },
    /* 84 */ { "x" : -31.92300390383789, "y" : -136.44856681703072, "trait" : "line", "color" : "d59e3b" },
    /* 85 */ { "x" : -35.41226081338299, "y" : -151.56868009172615, "trait" : "line", "color" : "d59e3b" },
    /* 86 */ { "x" : -24.944490084747702, "y" : -155.0579370012712, "trait" : "line", "color" : "d59e3b" },
    /* 87 */ { "x" : -22.618318811717636, "y" : -136.44856681703072, "trait" : "line", "color" : "d59e3b" },
    /* 88 */ { "x" : -5.17203426399216, "y" : -137.61165245354573, "trait" : "line", "color" : "d59e3b" },
    /* 89 */ { "x" : -8.661291173537256, "y" : -156.22102263778626, "trait" : "line", "color" : "d59e3b" },
    /* 90 */ { "x" : 7.621907737673187, "y" : -137.61165245354573, "trait" : "line", "color" : "d59e3b" },
    /* 91 */ { "x" : 9.948079010703255, "y" : -158.54719391081633, "trait" : "line", "color" : "d59e3b" },
    /* 92 */ { "x" : 20.415849739338547, "y" : -136.44856681703072, "trait" : "line", "color" : "d59e3b" },
    /* 93 */ { "x" : 22.74202101236861, "y" : -156.22102263778626, "trait" : "line", "color" : "d59e3b" },
    /* 94 */ { "x" : -64.48940172625879, "y" : 145.01815721960702, "trait" : "line", "color" : "d59e3b" },
    /* 95 */ { "x" : -77.28334372792415, "y" : 138.03964340051684, "trait" : "line", "color" : "d59e3b" },
    /* 96 */ { "x" : -69.14174427231893, "y" : 120.59335885279134, "trait" : "line", "color" : "d59e3b" },
    /* 97 */ { "x" : -57.510887907168595, "y" : 127.57187267188155, "trait" : "line", "color" : "d59e3b" },
    /* 98 */ { "x" : -73.79408681837904, "y" : 129.8980439449116, "trait" : "line", "color" : "d59e3b" },
    /* 99 */ { "x" : -61.00014481671369, "y" : 135.71347212748674, "trait" : "line", "color" : "d59e3b" },
    /* 100 */ { "x" : -52.858545361108476, "y" : 147.3443284926371, "trait" : "line", "color" : "d59e3b" },
    /* 101 */ { "x" : -37.738432086413056, "y" : 146.18124285612205, "trait" : "line", "color" : "d59e3b" },
    /* 102 */ { "x" : -49.36928845156338, "y" : 136.8765577640018, "trait" : "line", "color" : "d59e3b" },
    /* 103 */ { "x" : -36.57534644989802, "y" : 135.71347212748674, "trait" : "line", "color" : "d59e3b" },
    /* 104 */ { "x" : -26.10757572126273, "y" : 156.6490135847573, "trait" : "line", "color" : "d59e3b" },
    /* 105 */ { "x" : -23.78140444823267, "y" : 138.03964340051684, "trait" : "line", "color" : "d59e3b" },
    /* 106 */ { "x" : -15.639804992627447, "y" : 136.8765577640018, "trait" : "line", "color" : "d59e3b" },
    /* 107 */ { "x" : -15.639804992627447, "y" : 148.5074141291521, "trait" : "line", "color" : "d59e3b" },
    /* 108 */ { "x" : -24.944490084747702, "y" : 148.5074141291521, "trait" : "line", "color" : "d59e3b" },
    /* 109 */ { "x" : -2.8458629909620963, "y" : 158.9751848577874, "trait" : "line", "color" : "d59e3b" },
    /* 110 */ { "x" : 6.458822101158161, "y" : 138.03964340051684, "trait" : "line", "color" : "d59e3b" },
    /* 111 */ { "x" : 15.763507193278414, "y" : 158.9751848577874, "trait" : "line", "color" : "d59e3b" },
    /* 112 */ { "x" : 1.8064795550980308, "y" : 151.9966710386972, "trait" : "line", "color" : "d59e3b" },
    /* 113 */ { "x" : 11.111164647218285, "y" : 151.9966710386972, "trait" : "line", "color" : "d59e3b" },
    /* 114 */ { "x" : 30.883620467973827, "y" : 156.6490135847573, "trait" : "line", "color" : "d59e3b" },
    /* 115 */ { "x" : 27.394363558428736, "y" : 136.8765577640018, "trait" : "line", "color" : "d59e3b" },
    /* 116 */ { "x" : 47.16681937918428, "y" : 151.9966710386972, "trait" : "line", "color" : "d59e3b" },
    /* 117 */ { "x" : 40.188305560094086, "y" : 131.06112958142663, "trait" : "line", "color" : "d59e3b" },
    /* 118 */ { "x" : 62.28693265387969, "y" : 146.18124285612205, "trait" : "line", "color" : "d59e3b" },
    /* 119 */ { "x" : 59.96076138084963, "y" : 122.9195301258214, "trait" : "line", "color" : "d59e3b" },
    /* 120 */ { "x" : 78.57013156509014, "y" : 139.20272903703187, "trait" : "line", "color" : "d59e3b" },
    /* 121 */ { "x" : 62.28693265387969, "y" : 139.20272903703187, "trait" : "line", "color" : "d59e3b" },
    /* 122 */ { "x" : 70.42853210948493, "y" : 134.5503864909717, "trait" : "line", "color" : "d59e3b" },
    /* 123 */ { "x" : 36.699048650548995, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 124 */ { "x" : 41.351391196609114, "y" : -151.56868009172615, "trait" : "line", "color" : "d59e3b" },
    /* 125 */ { "x" : 39.02521992357905, "y" : -142.26399499960587, "trait" : "line", "color" : "d59e3b" },
    /* 126 */ { "x" : 50.65607628872937, "y" : -138.7747380900608, "trait" : "line", "color" : "d59e3b" },
    /* 127 */ { "x" : 54.14533319827447, "y" : -148.07942318218102, "trait" : "line", "color" : "d59e3b" },
    /* 128 */ { "x" : 48.3299050156993, "y" : -129.4700529979405, "trait" : "line", "color" : "d59e3b" },
    /* 129 */ { "x" : 55.30841883478949, "y" : -125.98079608839542, "trait" : "line", "color" : "d59e3b" },
    /* 130 */ { "x" : 71.59161774599994, "y" : -142.26399499960587, "trait" : "line", "color" : "d59e3b" },
    /* 131 */ { "x" : 66.93927519993983, "y" : -120.16536790582026, "trait" : "line", "color" : "d59e3b" },
    /* 132 */ { "x" : 73.91778901903002, "y" : -116.67611099627517, "trait" : "line", "color" : "d59e3b" },
    /* 133 */ { "x" : 93.69024483978555, "y" : -124.81771045188042, "trait" : "line", "color" : "d59e3b" },
    /* 134 */ { "x" : 84.38555974766531, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 135 */ { "x" : 84.38555974766531, "y" : -109.69759717718497, "trait" : "line", "color" : "d59e3b" },
    /* 136 */ { "x" : 91.3640735667555, "y" : -106.20834026763988, "trait" : "line", "color" : "d59e3b" },
    /* 137 */ { "x" : 102.99492993190582, "y" : -119.00228226930524, "trait" : "line", "color" : "d59e3b" },
    /* 138 */ { "x" : 105.9908138395504, "y" : -105.00998670458202, "trait" : "line", "color" : "d59e3b" },
    /* 139 */ { "x" : 96.5803249678017, "y" : -112.05903637675783, "trait" : "line", "color" : "d59e3b" },
    /* 140 */ { "x" : 102.99492993190582, "y" : -92.25131262945949, "trait" : "line", "color" : "d59e3b" },
    /* 141 */ { "x" : 121.60430011614632, "y" : -99.22982644854969, "trait" : "line", "color" : "d59e3b" },
    /* 142 */ { "x" : 112.29961502402607, "y" : -82.94662753733925, "trait" : "line", "color" : "d59e3b" },
    /* 143 */ { "x" : 132.07207084478162, "y" : -84.10971317385427, "trait" : "line", "color" : "d59e3b" },
    /* 144 */ { "x" : 116.9519575700862, "y" : -77.13119935476409, "trait" : "line", "color" : "d59e3b" },
    /* 145 */ { "x" : 121.60430011614632, "y" : -68.98959989915886, "trait" : "line", "color" : "d59e3b" },
    /* 146 */ { "x" : 127.41972829872148, "y" : -53.86948662446344, "trait" : "line", "color" : "d59e3b" },
    /* 147 */ { "x" : 123.93047138917639, "y" : -64.33725735309872, "trait" : "line", "color" : "d59e3b" },
    /* 148 */ { "x" : 140.21367030038684, "y" : -71.31577117218893, "trait" : "line", "color" : "d59e3b" },
    /* 149 */ { "x" : 25.06819228539867, "y" : 128.73495830839659, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 150 */ { "x" : 34.37287737751892, "y" : 126.40878703536652, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 151 */ { "x" : -123.80676918852542, "y" : -80.62045626430917, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 152 */ { "x" : -120.31751227898032, "y" : -87.59897008339938, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 153 */ { "x" : -63.326316089743756, "y" : -128.3069673614255, "trait" : "line", "color" : "d59e3b" },
    /* 154 */ { "x" : -54.0216309976235, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 155 */ { "x" : -69.14174427231893, "y" : -119.00228226930524, "trait" : "line", "color" : "d59e3b" },
    /* 156 */ { "x" : -6.33511990050719, "y" : -163.19953645687644, "trait" : "line", "color" : "d59e3b" },
    /* 157 */ { "x" : 108.81035811448098, "y" : -95.7405695390046, "trait" : "line", "color" : "d59e3b" },
    /* 158 */ { "x" : 115.78887193357114, "y" : -89.92514135642945, "trait" : "line", "color" : "d59e3b" },
    /* 159 */ { "x" : 62.28693265387969, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 160 */ { "x" : 69.26544647296988, "y" : -127.14388172491046, "trait" : "line", "color" : "d59e3b" },
    /* 161 */ { "x" : -97.05579954867969, "y" : -110.86068281370002, "trait" : "line", "color" : "d59e3b" },
    /* 162 */ { "x" : -90.07728572958949, "y" : -116.67611099627517, "trait" : "line", "color" : "d59e3b" },
    /* 163 */ { "x" : -80.77260063746924, "y" : -50.38022971491834, "trait" : "line", "color" : "d3a23c" },
    /* 164 */ { "x" : -80.77260063746924, "y" : 11.263309020378339, "trait" : "line", "color" : "d3a23c" },
    /* 165 */ { "x" : -86.5880288200444, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 166 */ { "x" : -62.16323045322872, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 167 */ { "x" : -67.97865863580388, "y" : 11.263309020378339, "trait" : "line", "color" : "d3a23c" },
    /* 168 */ { "x" : -67.97865863580388, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 169 */ { "x" : -51.69545972459344, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 170 */ { "x" : -45.88003154201827, "y" : -10.835318073407267, "trait" : "line", "color" : "d3a23c" },
    /* 171 */ { "x" : -44.71694590550325, "y" : -28.28160262113275, "trait" : "line", "color" : "d3a23c" },
    /* 172 */ { "x" : -54.0216309976235, "y" : -24.792345711587654, "trait" : "line", "color" : "d3a23c" },
    /* 173 */ { "x" : -66.81557299928886, "y" : -23.629260075072615, "trait" : "line", "color" : "d3a23c" },
    /* 174 */ { "x" : -67.97865863580388, "y" : -48.054058441888294, "trait" : "line", "color" : "d3a23c" },
    /* 175 */ { "x" : -48.20620281504835, "y" : -49.21714407840332, "trait" : "line", "color" : "d3a23c" },
    /* 176 */ { "x" : -40.06460335944312, "y" : -44.56480153234319, "trait" : "line", "color" : "d3a23c" },
    /* 177 */ { "x" : -41.227688995958154, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 178 */ { "x" : -86.5880288200444, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 179 */ { "x" : -28.433746994292797, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 180 */ { "x" : -6.33511990050719, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 181 */ { "x" : -9.824376810052287, "y" : -52.70640098794842, "trait" : "line", "color" : "d3a23c" },
    /* 182 */ { "x" : -9.824376810052287, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 183 */ { "x" : 13.437335920248351, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 184 */ { "x" : 13.437335920248351, "y" : -50.38022971491834, "trait" : "line", "color" : "d3a23c" },
    /* 185 */ { "x" : 7.621907737673187, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 186 */ { "x" : 32.04670610448886, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 187 */ { "x" : 27.394363558428736, "y" : -52.70640098794842, "trait" : "line", "color" : "d3a23c" },
    /* 188 */ { "x" : 27.394363558428736, "y" : 10.100223383863307, "trait" : "line", "color" : "d3a23c" },
    /* 189 */ { "x" : 32.04670610448886, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 190 */ { "x" : 11.111164647218285, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 191 */ { "x" : 13.437335920248351, "y" : 10.100223383863307, "trait" : "line", "color" : "d3a23c" },
    /* 192 */ { "x" : 13.437335920248351, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 193 */ { "x" : -9.824376810052287, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 194 */ { "x" : -9.824376810052287, "y" : 7.774052110833244, "trait" : "line", "color" : "d3a23c" },
    /* 195 */ { "x" : -7.498205537022224, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 196 */ { "x" : -28.433746994292797, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 197 */ { "x" : -24.944490084747702, "y" : 8.937137747348277, "trait" : "line", "color" : "d3a23c" },
    /* 198 */ { "x" : -24.944490084747702, "y" : -50.38022971491834, "trait" : "line", "color" : "d3a23c" },
    /* 199 */ { "x" : 47.16681937918428, "y" : -51.543315351433385, "trait" : "line", "color" : "d3a23c" },
    /* 200 */ { "x" : 47.16681937918428, "y" : 10.100223383863307, "trait" : "line", "color" : "d3a23c" },
    /* 201 */ { "x" : 43.677562469639184, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 202 */ { "x" : 86.71173102069537, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 203 */ { "x" : 86.71173102069537, "y" : 3.1217095647731155, "trait" : "line", "color" : "d3a23c" },
    /* 204 */ { "x" : 80.89630283812022, "y" : 6.610966474318209, "trait" : "line", "color" : "d3a23c" },
    /* 205 */ { "x" : 61.12384701736466, "y" : 6.610966474318209, "trait" : "line", "color" : "d3a23c" },
    /* 206 */ { "x" : 61.12384701736466, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 207 */ { "x" : 73.91778901903002, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 208 */ { "x" : 80.89630283812022, "y" : -13.161489346437332, "trait" : "line", "color" : "d3a23c" },
    /* 209 */ { "x" : 80.89630283812022, "y" : -28.28160262113275, "trait" : "line", "color" : "d3a23c" },
    /* 210 */ { "x" : 76.24396029206008, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 211 */ { "x" : 61.12384701736466, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 212 */ { "x" : 61.12384701736466, "y" : -48.054058441888294, "trait" : "line", "color" : "d3a23c" },
    /* 213 */ { "x" : 79.73321720160517, "y" : -48.054058441888294, "trait" : "line", "color" : "d3a23c" },
    /* 214 */ { "x" : 86.71173102069537, "y" : -45.727887168858224, "trait" : "line", "color" : "d3a23c" },
    /* 215 */ { "x" : 86.71173102069537, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 216 */ { "x" : 43.677562469639184, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 217 */ { "x" : 0, "y" : 180, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 218 */ { "x" : 0, "y" : 600, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 219 */ { "x" : 0, "y" : -180, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 220 */ { "x" : 0, "y" : -600, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 221 */ { "x" : 0, "y" : -180, "bCoef" : 0, "trait" : "line", "curve" : 180, "color" : "d9a03f" },
    /* 222 */ { "x" : 0, "y" : 180, "bCoef" : 0, "trait" : "line", "curve" : 180, "color" : "d9a03f" },
    /* 223 */ { "x" : 0, "y" : -180, "bCoef" : 0, "trait" : "line", "curve" : 180, "color" : "d9a03f" },
    /* 224 */ { "x" : 0, "y" : 180, "bCoef" : 0, "trait" : "line", "curve" : 180, "color" : "d9a03f" },
    
    /* 225 */ { "x" : -15, "y" : 670, "bCoef" : 1, "cMask" : ["red","blue","ball" ], "trait" : "pared-invisible", "bias" : 12 },
    /* 226 */ { "x" : -15, "y" : -670, "bCoef" : 1, "cMask" : ["red","blue","ball" ], "trait" : "pared-invisible", "bias" : 12 },
    /* 227 */ { "x" : 15, "y" : 670, "bCoef" : 1, "cMask" : ["red","blue","ball" ], "trait" : "pared-invisible", "bias" : -12 },
    /* 228 */ { "x" : 15, "y" : -670, "bCoef" : 1, "cMask" : ["red","blue","ball" ], "trait" : "pared-invisible", "bias" : -12 },
    
    /* 229 */ { "x" : -525.1982581967213, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 230 */ { "x" : -525.1982581967213, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 231 */ { "x" : -267.4933401639344, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 232 */ { "x" : -267.4933401639344, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 233 */ { "x" : 505.62141393442624, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 234 */ { "x" : 505.62141393442624, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 235 */ { "x" : 247.91649590163934, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 236 */ { "x" : 247.91649590163934, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "db9b30", "curve" : 0 },
    /* 237 */ { "x" : -1200, "y" : 570.456511053482, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 238 */ { "x" : -1171.6369452864983, "y" : 600, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 239 */ { "x" : -1200, "y" : -569.6420271253103, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 240 */ { "x" : -1170.6369452864983, "y" : -600, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 241 */ { "x" : 1200, "y" : -571.0124590189979, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 242 */ { "x" : 1170.319141439366, "y" : -600, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 243 */ { "x" : 1200, "y" : 569.9997004222528, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 244 */ { "x" : 1171.319141439366, "y" : 600, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 245 */ { "x" : -787, "y" : -5, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" },
    /* 246 */ { "x" : -787, "y" : 0.1561968168675687, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" },
    /* 247 */ { "x" : 787, "y" : 5.145341211815264, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" },
    /* 248 */ { "x" : 787, "y" : -0.010663810350735048, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" }

  ],

  "segments" : [
    { "v0" : 0, "v1" : 1, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : 12, "y" : -110 },
    { "v0" : 2, "v1" : 3, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : 12, "y" : 110 },
    { "v0" : 4, "v1" : 5, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : -12, "y" : -110 },
    { "v0" : 6, "v1" : 7, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : -12, "y" : 110 },
    
    { "v0" : 14, "v1" : 15, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "cMask" : ["" ], "trait" : "line" },
    
    { "v0" : 2, "v1" : 1, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "goalNet", "bias" : -12 },
    { "v0" : 6, "v1" : 5, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0, "trait" : "goalNet", "bias" : 12 },
    
    { "v0" : 17, "v1" : 18, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "x" : -1200 },
    { "v0" : 21, "v1" : 22, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "x" : 1200 },
    { "v0" : 16, "v1" : 25, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : -470 },
    { "v0" : 26, "v1" : 27, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : 470 },
    { "v0" : 28, "v1" : 29, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "cMask" : ["" ], "trait" : "line" },
    { "v0" : 29, "v1" : 31, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : -470 },
    { "v0" : 30, "v1" : 32, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    { "v0" : 32, "v1" : 33, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : 470 },
    { "v0" : 28, "v1" : 30, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    
    { "v0" : 10, "v1" : 19, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : -12 },
    { "v0" : 11, "v1" : 20, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : 12 },
    { "v0" : 8, "v1" : 23, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : 12 },
    { "v0" : 9, "v1" : 24, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : -12 },
    
    { "v0" : 34, "v1" : 35, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 35, "v1" : 36, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 36, "v1" : 37, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 37, "v1" : 38, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 38, "v1" : 39, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 39, "v1" : 40, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 40, "v1" : 41, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 41, "v1" : 42, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 42, "v1" : 43, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 43, "v1" : 34, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 44, "v1" : 45, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 45, "v1" : 46, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 46, "v1" : 47, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 47, "v1" : 48, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 48, "v1" : 49, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 49, "v1" : 50, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 50, "v1" : 51, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 51, "v1" : 52, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 52, "v1" : 53, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 53, "v1" : 44, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 54, "v1" : 55, "curve" : 186.38082131014062, "color" : "db9b30", "trait" : "line" },
    { "v0" : 55, "v1" : 54, "curve" : 179.0180912216902, "color" : "db9b30", "trait" : "line" },
    { "v0" : 56, "v1" : 57, "curve" : -103.60399833573787, "color" : "b5091a", "trait" : "line" },
    { "v0" : 58, "v1" : 59, "curve" : 97.68189805067395, "color" : "b5091a", "trait" : "line" },
    { "v0" : 60, "v1" : 61, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 61, "v1" : 62, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 63, "v1" : 64, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 65, "v1" : 66, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 66, "v1" : 67, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 67, "v1" : 68, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 69, "v1" : 70, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 70, "v1" : 71, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 71, "v1" : 72, "curve" : -94.97910584399823, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 72, "v1" : 69, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 73, "v1" : 74, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 74, "v1" : 75, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 75, "v1" : 76, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 78, "v1" : 79, "curve" : 200.7853866177665, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 79, "v1" : 80, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 81, "v1" : 82, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 82, "v1" : 83, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 84, "v1" : 85, "curve" : 239.75198538337884, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 86, "v1" : 87, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 88, "v1" : 89, "curve" : -165.0082847205403, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 89, "v1" : 88, "curve" : -179.11171113377614, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 90, "v1" : 91, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 91, "v1" : 92, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 92, "v1" : 93, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 94, "v1" : 95, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 95, "v1" : 96, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 96, "v1" : 97, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 98, "v1" : 99, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 100, "v1" : 101, "curve" : -135.23972989608095, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 101, "v1" : 102, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 102, "v1" : 103, "curve" : 156.93075869271055, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 104, "v1" : 105, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 105, "v1" : 106, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 106, "v1" : 107, "curve" : 154.63923301636038, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 107, "v1" : 108, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 109, "v1" : 110, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 110, "v1" : 111, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 112, "v1" : 113, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 114, "v1" : 115, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 115, "v1" : 116, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 116, "v1" : 117, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 118, "v1" : 119, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 119, "v1" : 120, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 121, "v1" : 122, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 123, "v1" : 124, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 125, "v1" : 126, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 127, "v1" : 128, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 129, "v1" : 130, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 130, "v1" : 131, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 132, "v1" : 133, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 134, "v1" : 135, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 136, "v1" : 137, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 138, "v1" : 139, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 140, "v1" : 141, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 141, "v1" : 142, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 143, "v1" : 144, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 144, "v1" : 145, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 146, "v1" : 147, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 147, "v1" : 148, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 149, "v1" : 150, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 151, "v1" : 152, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 153, "v1" : 154, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 79, "v1" : 155, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 89, "v1" : 156, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 157, "v1" : 158, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 159, "v1" : 160, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 161, "v1" : 162, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 163, "v1" : 164, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 164, "v1" : 165, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 165, "v1" : 166, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 166, "v1" : 167, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 167, "v1" : 168, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 168, "v1" : 169, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 169, "v1" : 170, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 170, "v1" : 171, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 171, "v1" : 172, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 172, "v1" : 173, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 173, "v1" : 174, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 174, "v1" : 175, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 175, "v1" : 176, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 176, "v1" : 177, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 177, "v1" : 178, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 178, "v1" : 163, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 179, "v1" : 180, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 180, "v1" : 181, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 181, "v1" : 182, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 182, "v1" : 183, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 183, "v1" : 184, "color" : "d3a23c", "trait" : "line", "x" : -74 },
    { "v0" : 184, "v1" : 185, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 185, "v1" : 186, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 186, "v1" : 187, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 187, "v1" : 188, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 188, "v1" : 189, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 189, "v1" : 190, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 190, "v1" : 191, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 191, "v1" : 192, "color" : "d3a23c", "trait" : "line", "x" : -74 },
    { "v0" : 192, "v1" : 193, "color" : "d3a23c", "trait" : "line", "y" : -16 },
    { "v0" : 193, "v1" : 194, "color" : "d3a23c", "trait" : "line", "x" : -94 },
    { "v0" : 194, "v1" : 195, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 195, "v1" : 196, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 196, "v1" : 197, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 197, "v1" : 198, "color" : "d3a23c", "trait" : "line", "x" : -107 },
    { "v0" : 198, "v1" : 179, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 199, "v1" : 200, "color" : "d3a23c", "trait" : "line", "x" : -45 },
    { "v0" : 200, "v1" : 201, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 201, "v1" : 202, "color" : "d3a23c", "trait" : "line", "y" : 12 },
    { "v0" : 202, "v1" : 203, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 203, "v1" : 204, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 204, "v1" : 205, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 205, "v1" : 206, "color" : "d3a23c", "trait" : "line", "x" : -33 },
    { "v0" : 206, "v1" : 207, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 207, "v1" : 208, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 208, "v1" : 209, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 209, "v1" : 210, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 210, "v1" : 211, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 211, "v1" : 212, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 212, "v1" : 213, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 213, "v1" : 214, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 214, "v1" : 215, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 215, "v1" : 216, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 216, "v1" : 199, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 77, "v1" : 78, "curve" : 0, "vis" : true, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 136, "v1" : 137, "curve" : -222.52965979806083, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 217, "v1" : 218, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "x" : 0 },
    { "v0" : 219, "v1" : 220, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "x" : 0 },
    { "v0" : 221, "v1" : 222, "curve" : -180, "vis" : true, "color" : "d9a03f", "cGroup" : ["blueKO" ], "trait" : "line" },
    { "v0" : 223, "v1" : 224, "curve" : 180, "vis" : true, "color" : "d9a03f", "cGroup" : ["redKO" ], "trait" : "line" },
    
    { "v0" : 225, "v1" : 226, "curve" : 0, "vis" : false, "color" : "b3b6b6", "bCoef" : 1, "cMask" : ["red","blue","ball" ], "trait" : "pared-invisible", "bias" : 12, "x" : -15 },
    { "v0" : 227, "v1" : 228, "curve" : 0, "vis" : false, "color" : "b3b6b6", "bCoef" : 1, "cMask" : ["red","blue","ball" ], "trait" : "pared-invisible", "bias" : -12, "x" : 15 },
    
    { "v0" : 8, "v1" : 10, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : -12 },
    { "v0" : 9, "v1" : 11, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : 12 },
    
    { "v0" : 16, "v1" : 15, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    { "v0" : 26, "v1" : 14, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    { "v0" : 229, "v1" : 230, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0.1, "trait" : "line", "x" : -240 },
    { "v0" : 231, "v1" : 232, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0.1, "trait" : "line", "x" : -120 },
    { "v0" : 233, "v1" : 234, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0.1, "trait" : "line", "x" : 240 },
    { "v0" : 235, "v1" : 236, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0.1, "trait" : "line", "x" : 120 },
    { "v0" : 238, "v1" : 237, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 240, "v1" : 239, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 242, "v1" : 241, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 244, "v1" : 243, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 246, "v1" : 245, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : -787 },
    { "v0" : 245, "v1" : 246, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : -787 },
    { "v0" : 248, "v1" : 247, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : 787 },
    { "v0" : 247, "v1" : 248, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : 787 }

  ],

  "goals" : [
    

  ],

  "discs" : [
    { "radius" : 0, "invMass" : 1.5, "pos" : [0,0 ], "color" : "ffbf00", "bCoef" : 0.4, "cGroup" : ["ball","kick","score" ], "damping" : 0.99 },
    { "radius" : 0, "invMass" : 1e+300, "pos" : [-5,-1 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0, "invMass" : 1e+300, "pos" : [5,-1 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0, "invMass" : 1e+300, "pos" : [0,-5 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0, "invMass" : 1e+300, "pos" : [-3,4 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0, "invMass" : 1e+300, "pos" : [3,4 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0, "invMass" : 1e+300, "pos" : [0,0 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    
    { "radius" : 6, "pos" : [1200,110 ], "color" : "D62828", "trait" : "goalPost" },
    { "radius" : 6, "pos" : [1200,-110 ], "color" : "D62828", "trait" : "goalPost" },
    { "radius" : 6, "pos" : [-1200,110 ], "color" : "D62828", "trait" : "goalPost" },
    { "radius" : 6, "pos" : [-1200,-110 ], "color" : "D62828", "trait" : "goalPost" },
    
    { "radius" : 3, "invMass" : 0, "pos" : [-1200,600 ], "color" : "A32638", "bCoef" : 0.1, "trait" : "line" },
    { "radius" : 3, "invMass" : 0, "pos" : [-1200,-600 ], "color" : "A32638", "bCoef" : 0.1, "trait" : "line" },
    { "radius" : 4, "invMass" : 0, "pos" : [1200,-600 ], "color" : "A32638", "bCoef" : 0.1, "trait" : "line" },
    { "radius" : 4, "invMass" : 0, "pos" : [1200,600 ], "color" : "A32638", "bCoef" : 0.1, "trait" : "line" },
    
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,-112.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,-87.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,-62.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,-37.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,-12.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,12.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,37.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,62.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,87.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [-321.31648,112.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,-112.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,-87.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,-62.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,-37.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,-12.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,12.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,37.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,62.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,87.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [321.31648,112.5 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] }

  ],

  "planes" : [
    { "normal" : [0,-1 ], "dist" : -600, "bCoef" : 1, "trait" : "ballArea", "curve" : 0 },
    { "normal" : [0,1 ], "dist" : -600, "bCoef" : 1, "trait" : "ballArea", "vis" : false, "curve" : 0 },
    
    { "normal" : [1,0 ], "dist" : -1275, "bCoef" : 0.1 },
    { "normal" : [0,1 ], "dist" : -675, "bCoef" : 0.1 },
    { "normal" : [0,-1 ], "dist" : -675, "bCoef" : 0.1 },
    { "normal" : [-1,0 ], "dist" : -1275, "bCoef" : 0.1 },
    
    { "normal" : [1,0 ], "dist" : -1250, "bCoef" : 0.1, "trait" : "ballArea" },
    { "normal" : [-1,0 ], "dist" : -1250, "bCoef" : 0.1, "trait" : "ballArea" },
    
    { "normal" : [0,-1 ], "dist" : -675, "bCoef" : 0.1 }

  ],

  "traits" : {
    "ballArea" : { "vis" : false, "bCoef" : 1, "cMask" : ["ball" ] },
    "goalPost" : { "radius" : 8, "invMass" : 0, "bCoef" : 0.5 },
    "goalNet" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball" ] },
    "line" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["" ] },
    "kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] }

  },

  "playerPhysics" : {
    "bCoef" : 0.5,
    "invMass" : 0.5,
    "damping" : 0.96,
    "acceleration" : 0.11,
    "kickingAcceleration" : 0.083,
    "kickingDamping" : 0.96,
    "kickStrength" : 5.45,
    "cGroup" : [ "red", "blue"
    ],
    "gravity" : [ 0, 0
    ],
    "radius" : 15,
    "kickback" : 0

  },

  "ballPhysics" : "disc0",

  "joints" : [
    { "d0" : 0, "d1" : 1, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 0, "d1" : 2, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 0, "d1" : 3, "color" : "transparent", "length" : 5 },
    { "d0" : 0, "d1" : 4, "color" : "transparent", "length" : 5 },
    { "d0" : 0, "d1" : 5, "color" : "transparent", "length" : 5 },
    { "d0" : 0, "d1" : 6, "color" : "transparent", "length" : 0 },
    { "d0" : 1, "d1" : 2, "color" : "transparent", "length" : 10 },
    { "d0" : 1, "d1" : 3, "color" : "transparent", "length" : 6.4031242374328485 },
    { "d0" : 1, "d1" : 4, "color" : "transparent", "length" : 5.385164807134504 },
    { "d0" : 1, "d1" : 5, "color" : "transparent", "length" : 9.433981132056603 },
    { "d0" : 1, "d1" : 6, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 2, "d1" : 3, "color" : "transparent", "length" : 6.4031242374328485 },
    { "d0" : 2, "d1" : 4, "color" : "transparent", "length" : 9.433981132056603 },
    { "d0" : 2, "d1" : 5, "color" : "transparent", "length" : 5.385164807134504 },
    { "d0" : 2, "d1" : 6, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 3, "d1" : 4, "color" : "transparent", "length" : 9.486832980505138 },
    { "d0" : 3, "d1" : 5, "color" : "transparent", "length" : 9.486832980505138 },
    { "d0" : 3, "d1" : 6, "color" : "transparent", "length" : 5 },
    { "d0" : 4, "d1" : 5, "color" : "transparent", "length" : 6 },
    { "d0" : 4, "d1" : 6, "color" : "transparent", "length" : 5 },
    { "d0" : 5, "d1" : 6, "color" : "transparent", "length" : 5 }

  ],

  "canBeStored" : false
}`
const bigMap = `{

  "name" : "üî¥‚ö´ ùôµùô∑ùô¥ ‚≠ê | “ì·¥ú·¥õx7  by ùóöùóüùóõ & FFL",

  "width" : 1275,

  "height" : 675,

  "spawnDistance" : 350,

  "redSpawnPoints" : [
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -500, 0
    ],
    [ -396, 635
    ]

  ],

  "blueSpawnPoints" : [
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 500, 0
    ],
    [ 396, 635
    ]

  ],

  "bg" : { "type" : "", "height" : 0, "width" : 0, "color" : "333333" },

  "vertexes" : [
    /* 0 */ { "x" : -1200, "y" : -110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 1 */ { "x" : -1250, "y" : -110, "cMask" : ["ball" ], "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : -12 },
    /* 2 */ { "x" : -1250, "y" : 110, "cMask" : ["ball" ], "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "radius" : 7, "bias" : -12 },
    /* 3 */ { "x" : -1200, "y" : 110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 4 */ { "x" : 1200, "y" : -110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : -12 },
    /* 5 */ { "x" : 1250, "y" : -110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 6 */ { "x" : 1250, "y" : 110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 7 */ { "x" : 1200, "y" : 110, "trait" : "goalNet", "curve" : 0, "color" : "db9b30", "bias" : -12 },
    
    /* 8 */ { "x" : 1200, "y" : 600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "curve" : 0, "color" : "db9b30", "bias" : 12 },
    /* 9 */ { "x" : 1200, "y" : -600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : -12, "color" : "db9b30" },
    /* 10 */ { "x" : -1200, "y" : 600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "curve" : 0, "vis" : false, "bias" : -12, "color" : "db9b30" },
    /* 11 */ { "x" : -1200, "y" : -600, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "vis" : false, "curve" : 0, "bias" : -12, "color" : "db9b30" },
    /* 12 */ { "x" : 1200, "y" : -110, "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "vis" : false, "curve" : 0 },
    /* 13 */ { "x" : 1200, "y" : -110, "bCoef" : 2, "cMask" : ["ball" ], "trait" : "ballArea", "vis" : false, "curve" : 0 },
    
    /* 14 */ { "x" : 1200, "y" : -110, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 15 */ { "x" : 1200, "y" : 110, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 16 */ { "x" : -525.1982581967213, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 17 */ { "x" : -525.1982581967213, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 18 */ { "x" : -267.4933401639344, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 19 */ { "x" : -267.4933401639344, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 20 */ { "x" : 505.62141393442624, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 21 */ { "x" : 505.62141393442624, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 22 */ { "x" : 247.91649590163934, "y" : 584, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 23 */ { "x" : 247.91649590163934, "y" : 616, "bCoef" : 0.1, "trait" : "line", "color" : "b5091a" },
    /* 24 */ { "x" : -1200, "y" : 570.456511053482, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 25 */ { "x" : -1171.6369452864983, "y" : 600, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 26 */ { "x" : -1200, "y" : -569.6420271253103, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 27 */ { "x" : -1170.6369452864983, "y" : -600, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 28 */ { "x" : 1200, "y" : -571.0124590189979, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 29 */ { "x" : 1170.319141439366, "y" : -600, "bCoef" : 0.1, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 30 */ { "x" : 1200, "y" : 569.9997004222528, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 31 */ { "x" : 1171.319141439366, "y" : 600, "bCoef" : 0.1, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 32 */ { "x" : -787, "y" : 205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 33 */ { "x" : -787, "y" : -205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 34 */ { "x" : -1075, "y" : -470, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 35 */ { "x" : -787, "y" : 3, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" },
    /* 36 */ { "x" : -787, "y" : -3, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" },
    /* 37 */ { "x" : -1200, "y" : 110, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 38 */ { "x" : -1200, "y" : -110, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    
    /* 39 */ { "x" : -1200, "y" : 110, "bCoef" : 1, "trait" : "ballArea", "color" : "db9b30", "bias" : -12 },
    /* 40 */ { "x" : -1200, "y" : -110, "bCoef" : 1, "trait" : "ballArea", "color" : "db9b30", "bias" : 12 },
    /* 41 */ { "x" : 1200, "y" : 110, "bCoef" : 1, "trait" : "ballArea", "color" : "db9b30", "bias" : 12 },
    /* 42 */ { "x" : 1200, "y" : -110, "bCoef" : 1, "trait" : "ballArea", "color" : "db9b30", "bias" : -12 },
    
    /* 43 */ { "x" : -1200, "y" : -470, "bCoef" : 0, "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 44 */ { "x" : -1075, "y" : 470, "bCoef" : 0, "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 45 */ { "x" : -1200, "y" : 470, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    /* 46 */ { "x" : 787, "y" : 205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 47 */ { "x" : 1075, "y" : 470, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : -90, "color" : "b5091a" },
    /* 48 */ { "x" : 787, "y" : -205, "bCoef" : 0, "cMask" : ["" ], "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 49 */ { "x" : 787, "y" : 3, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" },
    /* 50 */ { "x" : 787, "y" : -3, "bCoef" : 0.1, "trait" : "line", "curve" : 180, "color" : "b5091a" },
    /* 51 */ { "x" : 1200, "y" : 470, "bCoef" : 0, "trait" : "line", "curve" : 0, "color" : "b5091a" },
    /* 52 */ { "x" : 1075, "y" : -470, "bCoef" : 0, "trait" : "line", "curve" : 90, "color" : "b5091a" },
    /* 53 */ { "x" : 1200, "y" : -470, "bCoef" : 0, "trait" : "line", "color" : "b5091a" },
    
    /* 54 */ { "x" : 0, "y" : 180, "bCoef" : 0, "trait" : "kickOffBarrier", "color" : "b5091a" },
    /* 55 */ { "x" : 0, "y" : 600, "bCoef" : 0, "trait" : "kickOffBarrier", "color" : "b5091a" },
    /* 56 */ { "x" : 0, "y" : -180, "bCoef" : 0, "trait" : "kickOffBarrier", "color" : "b5091a" },
    /* 57 */ { "x" : 0, "y" : -600, "bCoef" : 0, "trait" : "kickOffBarrier", "color" : "b5091a" },
    /* 58 */ { "x" : 0, "y" : -180, "bCoef" : 0, "trait" : "kickOffBarrier", "curve" : 180, "color" : "d9a03f" },
    /* 59 */ { "x" : 0, "y" : 180, "bCoef" : 0, "trait" : "kickOffBarrier", "curve" : 180, "color" : "d9a03f" },
    /* 60 */ { "x" : 0, "y" : -180, "bCoef" : 0, "trait" : "kickOffBarrier", "curve" : 180, "color" : "d9a03f" },
    /* 61 */ { "x" : 0, "y" : 180, "bCoef" : 0, "trait" : "kickOffBarrier", "curve" : 180, "color" : "d9a03f" },
    /* 62 */ { "x" : 0, "y" : 600, "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "vis" : false },
    /* 63 */ { "x" : 0, "y" : 670, "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "vis" : false },
    /* 64 */ { "x" : 0, "y" : -670, "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "vis" : false },
    /* 65 */ { "x" : 0, "y" : -600, "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "vis" : false },
    
    /* 66 */ { "x" : -66.81557299928886, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 67 */ { "x" : -52.858545361108476, "y" : 43.829706842799226, "trait" : "line", "color" : "d5a13c" },
    /* 68 */ { "x" : -45.88003154201827, "y" : 28.70959356810382, "trait" : "line", "color" : "d5a13c" },
    /* 69 */ { "x" : -41.227688995958154, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 70 */ { "x" : -24.944490084747702, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 71 */ { "x" : -37.738432086413056, "y" : 50.808220661889415, "trait" : "line", "color" : "d5a13c" },
    /* 72 */ { "x" : -33.08608954035292, "y" : 67.09141957309986, "trait" : "line", "color" : "d5a13c" },
    /* 73 */ { "x" : -45.88003154201827, "y" : 56.62364884446458, "trait" : "line", "color" : "d5a13c" },
    /* 74 */ { "x" : -59.83705918019866, "y" : 67.09141957309986, "trait" : "line", "color" : "d5a13c" },
    /* 75 */ { "x" : -54.0216309976235, "y" : 51.97130629840446, "trait" : "line", "color" : "d5a13c" },
    /* 76 */ { "x" : 25.06819228539867, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 77 */ { "x" : 39.02521992357905, "y" : 43.829706842799226, "trait" : "line", "color" : "d5a13c" },
    /* 78 */ { "x" : 44.84064810615421, "y" : 28.70959356810382, "trait" : "line", "color" : "d5a13c" },
    /* 79 */ { "x" : 49.49299065221434, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 80 */ { "x" : 66.93927519993983, "y" : 42.666621206284205, "trait" : "line", "color" : "d5a13c" },
    /* 81 */ { "x" : 52.982247561759436, "y" : 53.13439193491949, "trait" : "line", "color" : "d5a13c" },
    /* 82 */ { "x" : 58.7976757443346, "y" : 68.2545052096149, "trait" : "line", "color" : "d5a13c" },
    /* 83 */ { "x" : 44.84064810615421, "y" : 58.94982011749465, "trait" : "line", "color" : "d5a13c" },
    /* 84 */ { "x" : 32.04670610448886, "y" : 67.09141957309986, "trait" : "line", "color" : "d5a13c" },
    /* 85 */ { "x" : 36.699048650548995, "y" : 53.13439193491949, "trait" : "line", "color" : "d5a13c" },
    /* 86 */ { "x" : 2.9695651916130616, "y" : 113.03330221544363, "trait" : "line", "curve" : 180, "color" : "db9b30" },
    /* 87 */ { "x" : 2.9695651916130616, "y" : -113.18685408673008, "trait" : "line", "curve" : 180, "color" : "db9b30" },
    /* 88 */ { "x" : -91.24037136610453, "y" : 65.92833393658485, "trait" : "line", "color" : "b5091a" },
    /* 89 */ { "x" : 89.03790229372542, "y" : 65.92833393658485, "trait" : "line", "color" : "b5091a" },
    /* 90 */ { "x" : -87.75111445655942, "y" : -70.1526855356739, "trait" : "line", "color" : "b5091a" },
    /* 91 */ { "x" : 85.54864538418033, "y" : -71.31577117218893, "trait" : "line", "color" : "b5091a" },
    /* 92 */ { "x" : -123.80676918852542, "y" : -62.01108608006867, "trait" : "line", "color" : "d59e3b" },
    /* 93 */ { "x" : -141.25305373625088, "y" : -70.1526855356739, "trait" : "line", "color" : "d59e3b" },
    /* 94 */ { "x" : -135.43762555367573, "y" : -79.45737062779416, "trait" : "line", "color" : "d59e3b" },
    /* 95 */ { "x" : -134.2745399171607, "y" : -66.66342862612879, "trait" : "line", "color" : "d59e3b" },
    /* 96 */ { "x" : -128.45911173458555, "y" : -73.64194244521899, "trait" : "line", "color" : "d59e3b" },
    /* 97 */ { "x" : -124.96985482504044, "y" : -95.7405695390046, "trait" : "line", "color" : "d59e3b" },
    /* 98 */ { "x" : -130.78528300761562, "y" : -86.43588444688436, "trait" : "line", "color" : "d59e3b" },
    /* 99 */ { "x" : -116.82825536943523, "y" : -75.96811371824907, "trait" : "line", "color" : "d59e3b" },
    /* 100 */ { "x" : -112.1759128233751, "y" : -84.10971317385427, "trait" : "line", "color" : "d59e3b" },
    /* 101 */ { "x" : -119.1544266424653, "y" : -101.55599772157976, "trait" : "line", "color" : "d59e3b" },
    /* 102 */ { "x" : -107.52357027731496, "y" : -91.08822699294447, "trait" : "line", "color" : "d59e3b" },
    /* 103 */ { "x" : -101.70814209473981, "y" : -96.90365517551965, "trait" : "line", "color" : "d59e3b" },
    /* 104 */ { "x" : -113.33899845989013, "y" : -107.37142590415493, "trait" : "line", "color" : "d59e3b" },
    /* 105 */ { "x" : -97.05579954867969, "y" : -123.65462481536537, "trait" : "line", "color" : "d59e3b" },
    /* 106 */ { "x" : -102.87122773125485, "y" : -117.83919663279022, "trait" : "line", "color" : "d59e3b" },
    /* 107 */ { "x" : -93.56654263913457, "y" : -105.04525463112485, "trait" : "line", "color" : "d59e3b" },
    /* 108 */ { "x" : -85.42494318352936, "y" : -109.69759717718497, "trait" : "line", "color" : "d59e3b" },
    /* 109 */ { "x" : -77.28334372792415, "y" : -114.34993972324511, "trait" : "line", "color" : "d59e3b" },
    /* 110 */ { "x" : -89.05527179924567, "y" : -128.7650724367832, "trait" : "line", "color" : "d59e3b" },
    /* 111 */ { "x" : -78.44642936443917, "y" : -124.81771045188042, "trait" : "line", "color" : "d59e3b" },
    /* 112 */ { "x" : -84.26185754701433, "y" : -122.49153917885033, "trait" : "line", "color" : "d59e3b" },
    /* 113 */ { "x" : -62.16323045322872, "y" : -123.65462481536537, "trait" : "line", "color" : "d59e3b" },
    /* 114 */ { "x" : -63.326316089743756, "y" : -142.26399499960587, "trait" : "line", "color" : "d59e3b" },
    /* 115 */ { "x" : -49.36928845156338, "y" : -128.3069673614255, "trait" : "line", "color" : "d59e3b" },
    /* 116 */ { "x" : -31.92300390383789, "y" : -136.44856681703072, "trait" : "line", "color" : "d59e3b" },
    /* 117 */ { "x" : -35.41226081338299, "y" : -151.56868009172615, "trait" : "line", "color" : "d59e3b" },
    /* 118 */ { "x" : -24.944490084747702, "y" : -155.0579370012712, "trait" : "line", "color" : "d59e3b" },
    /* 119 */ { "x" : -22.618318811717636, "y" : -136.44856681703072, "trait" : "line", "color" : "d59e3b" },
    /* 120 */ { "x" : -5.17203426399216, "y" : -137.61165245354573, "trait" : "line", "color" : "d59e3b" },
    /* 121 */ { "x" : -8.661291173537256, "y" : -156.22102263778626, "trait" : "line", "color" : "d59e3b" },
    /* 122 */ { "x" : 7.621907737673187, "y" : -137.61165245354573, "trait" : "line", "color" : "d59e3b" },
    /* 123 */ { "x" : 9.948079010703255, "y" : -158.54719391081633, "trait" : "line", "color" : "d59e3b" },
    /* 124 */ { "x" : 20.415849739338547, "y" : -136.44856681703072, "trait" : "line", "color" : "d59e3b" },
    /* 125 */ { "x" : 22.74202101236861, "y" : -156.22102263778626, "trait" : "line", "color" : "d59e3b" },
    /* 126 */ { "x" : -64.48940172625879, "y" : 145.01815721960702, "trait" : "line", "color" : "d59e3b" },
    /* 127 */ { "x" : -77.28334372792415, "y" : 138.03964340051684, "trait" : "line", "color" : "d59e3b" },
    /* 128 */ { "x" : -69.14174427231893, "y" : 120.59335885279134, "trait" : "line", "color" : "d59e3b" },
    /* 129 */ { "x" : -57.510887907168595, "y" : 127.57187267188155, "trait" : "line", "color" : "d59e3b" },
    /* 130 */ { "x" : -73.79408681837904, "y" : 129.8980439449116, "trait" : "line", "color" : "d59e3b" },
    /* 131 */ { "x" : -61.00014481671369, "y" : 135.71347212748674, "trait" : "line", "color" : "d59e3b" },
    /* 132 */ { "x" : -52.858545361108476, "y" : 147.3443284926371, "trait" : "line", "color" : "d59e3b" },
    /* 133 */ { "x" : -37.738432086413056, "y" : 146.18124285612205, "trait" : "line", "color" : "d59e3b" },
    /* 134 */ { "x" : -49.36928845156338, "y" : 136.8765577640018, "trait" : "line", "color" : "d59e3b" },
    /* 135 */ { "x" : -36.57534644989802, "y" : 135.71347212748674, "trait" : "line", "color" : "d59e3b" },
    /* 136 */ { "x" : -26.10757572126273, "y" : 156.6490135847573, "trait" : "line", "color" : "d59e3b" },
    /* 137 */ { "x" : -23.78140444823267, "y" : 138.03964340051684, "trait" : "line", "color" : "d59e3b" },
    /* 138 */ { "x" : -15.639804992627447, "y" : 136.8765577640018, "trait" : "line", "color" : "d59e3b" },
    /* 139 */ { "x" : -15.639804992627447, "y" : 148.5074141291521, "trait" : "line", "color" : "d59e3b" },
    /* 140 */ { "x" : -24.944490084747702, "y" : 148.5074141291521, "trait" : "line", "color" : "d59e3b" },
    /* 141 */ { "x" : -2.8458629909620963, "y" : 158.9751848577874, "trait" : "line", "color" : "d59e3b" },
    /* 142 */ { "x" : 6.458822101158161, "y" : 138.03964340051684, "trait" : "line", "color" : "d59e3b" },
    /* 143 */ { "x" : 15.763507193278414, "y" : 158.9751848577874, "trait" : "line", "color" : "d59e3b" },
    /* 144 */ { "x" : 1.8064795550980308, "y" : 151.9966710386972, "trait" : "line", "color" : "d59e3b" },
    /* 145 */ { "x" : 11.111164647218285, "y" : 151.9966710386972, "trait" : "line", "color" : "d59e3b" },
    /* 146 */ { "x" : 30.883620467973827, "y" : 156.6490135847573, "trait" : "line", "color" : "d59e3b" },
    /* 147 */ { "x" : 27.394363558428736, "y" : 136.8765577640018, "trait" : "line", "color" : "d59e3b" },
    /* 148 */ { "x" : 47.16681937918428, "y" : 151.9966710386972, "trait" : "line", "color" : "d59e3b" },
    /* 149 */ { "x" : 40.188305560094086, "y" : 131.06112958142663, "trait" : "line", "color" : "d59e3b" },
    /* 150 */ { "x" : 62.28693265387969, "y" : 146.18124285612205, "trait" : "line", "color" : "d59e3b" },
    /* 151 */ { "x" : 59.96076138084963, "y" : 122.9195301258214, "trait" : "line", "color" : "d59e3b" },
    /* 152 */ { "x" : 78.57013156509014, "y" : 139.20272903703187, "trait" : "line", "color" : "d59e3b" },
    /* 153 */ { "x" : 62.28693265387969, "y" : 139.20272903703187, "trait" : "line", "color" : "d59e3b" },
    /* 154 */ { "x" : 70.42853210948493, "y" : 134.5503864909717, "trait" : "line", "color" : "d59e3b" },
    /* 155 */ { "x" : 36.699048650548995, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 156 */ { "x" : 41.351391196609114, "y" : -151.56868009172615, "trait" : "line", "color" : "d59e3b" },
    /* 157 */ { "x" : 39.02521992357905, "y" : -142.26399499960587, "trait" : "line", "color" : "d59e3b" },
    /* 158 */ { "x" : 50.65607628872937, "y" : -138.7747380900608, "trait" : "line", "color" : "d59e3b" },
    /* 159 */ { "x" : 54.14533319827447, "y" : -148.07942318218102, "trait" : "line", "color" : "d59e3b" },
    /* 160 */ { "x" : 48.3299050156993, "y" : -129.4700529979405, "trait" : "line", "color" : "d59e3b" },
    /* 161 */ { "x" : 55.30841883478949, "y" : -125.98079608839542, "trait" : "line", "color" : "d59e3b" },
    /* 162 */ { "x" : 71.59161774599994, "y" : -142.26399499960587, "trait" : "line", "color" : "d59e3b" },
    /* 163 */ { "x" : 66.93927519993983, "y" : -120.16536790582026, "trait" : "line", "color" : "d59e3b" },
    /* 164 */ { "x" : 73.91778901903002, "y" : -116.67611099627517, "trait" : "line", "color" : "d59e3b" },
    /* 165 */ { "x" : 93.69024483978555, "y" : -124.81771045188042, "trait" : "line", "color" : "d59e3b" },
    /* 166 */ { "x" : 84.38555974766531, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 167 */ { "x" : 84.38555974766531, "y" : -109.69759717718497, "trait" : "line", "color" : "d59e3b" },
    /* 168 */ { "x" : 91.3640735667555, "y" : -106.20834026763988, "trait" : "line", "color" : "d59e3b" },
    /* 169 */ { "x" : 102.99492993190582, "y" : -119.00228226930524, "trait" : "line", "color" : "d59e3b" },
    /* 170 */ { "x" : 105.9908138395504, "y" : -105.00998670458202, "trait" : "line", "color" : "d59e3b" },
    /* 171 */ { "x" : 96.5803249678017, "y" : -112.05903637675783, "trait" : "line", "color" : "d59e3b" },
    /* 172 */ { "x" : 102.99492993190582, "y" : -92.25131262945949, "trait" : "line", "color" : "d59e3b" },
    /* 173 */ { "x" : 121.60430011614632, "y" : -99.22982644854969, "trait" : "line", "color" : "d59e3b" },
    /* 174 */ { "x" : 112.29961502402607, "y" : -82.94662753733925, "trait" : "line", "color" : "d59e3b" },
    /* 175 */ { "x" : 132.07207084478162, "y" : -84.10971317385427, "trait" : "line", "color" : "d59e3b" },
    /* 176 */ { "x" : 116.9519575700862, "y" : -77.13119935476409, "trait" : "line", "color" : "d59e3b" },
    /* 177 */ { "x" : 121.60430011614632, "y" : -68.98959989915886, "trait" : "line", "color" : "d59e3b" },
    /* 178 */ { "x" : 127.41972829872148, "y" : -53.86948662446344, "trait" : "line", "color" : "d59e3b" },
    /* 179 */ { "x" : 123.93047138917639, "y" : -64.33725735309872, "trait" : "line", "color" : "d59e3b" },
    /* 180 */ { "x" : 140.21367030038684, "y" : -71.31577117218893, "trait" : "line", "color" : "d59e3b" },
    /* 181 */ { "x" : 25.06819228539867, "y" : 128.73495830839659, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 182 */ { "x" : 34.37287737751892, "y" : 126.40878703536652, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 183 */ { "x" : -123.80676918852542, "y" : -80.62045626430917, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 184 */ { "x" : -120.31751227898032, "y" : -87.59897008339938, "trait" : "line", "curve" : 0, "color" : "d59e3b" },
    /* 185 */ { "x" : -63.326316089743756, "y" : -128.3069673614255, "trait" : "line", "color" : "d59e3b" },
    /* 186 */ { "x" : -54.0216309976235, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 187 */ { "x" : -69.14174427231893, "y" : -119.00228226930524, "trait" : "line", "color" : "d59e3b" },
    /* 188 */ { "x" : -6.33511990050719, "y" : -163.19953645687644, "trait" : "line", "color" : "d59e3b" },
    /* 189 */ { "x" : 108.81035811448098, "y" : -95.7405695390046, "trait" : "line", "color" : "d59e3b" },
    /* 190 */ { "x" : 115.78887193357114, "y" : -89.92514135642945, "trait" : "line", "color" : "d59e3b" },
    /* 191 */ { "x" : 62.28693265387969, "y" : -132.95930990748562, "trait" : "line", "color" : "d59e3b" },
    /* 192 */ { "x" : 69.26544647296988, "y" : -127.14388172491046, "trait" : "line", "color" : "d59e3b" },
    /* 193 */ { "x" : -97.05579954867969, "y" : -110.86068281370002, "trait" : "line", "color" : "d59e3b" },
    /* 194 */ { "x" : -90.07728572958949, "y" : -116.67611099627517, "trait" : "line", "color" : "d59e3b" },
    /* 195 */ { "x" : -80.77260063746924, "y" : -50.38022971491834, "trait" : "line", "color" : "d3a23c" },
    /* 196 */ { "x" : -80.77260063746924, "y" : 11.263309020378339, "trait" : "line", "color" : "d3a23c" },
    /* 197 */ { "x" : -86.5880288200444, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 198 */ { "x" : -62.16323045322872, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 199 */ { "x" : -67.97865863580388, "y" : 11.263309020378339, "trait" : "line", "color" : "d3a23c" },
    /* 200 */ { "x" : -67.97865863580388, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 201 */ { "x" : -51.69545972459344, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 202 */ { "x" : -45.88003154201827, "y" : -10.835318073407267, "trait" : "line", "color" : "d3a23c" },
    /* 203 */ { "x" : -44.71694590550325, "y" : -28.28160262113275, "trait" : "line", "color" : "d3a23c" },
    /* 204 */ { "x" : -54.0216309976235, "y" : -24.792345711587654, "trait" : "line", "color" : "d3a23c" },
    /* 205 */ { "x" : -66.81557299928886, "y" : -23.629260075072615, "trait" : "line", "color" : "d3a23c" },
    /* 206 */ { "x" : -67.97865863580388, "y" : -48.054058441888294, "trait" : "line", "color" : "d3a23c" },
    /* 207 */ { "x" : -48.20620281504835, "y" : -49.21714407840332, "trait" : "line", "color" : "d3a23c" },
    /* 208 */ { "x" : -40.06460335944312, "y" : -44.56480153234319, "trait" : "line", "color" : "d3a23c" },
    /* 209 */ { "x" : -41.227688995958154, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 210 */ { "x" : -86.5880288200444, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 211 */ { "x" : -28.433746994292797, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 212 */ { "x" : -6.33511990050719, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 213 */ { "x" : -9.824376810052287, "y" : -52.70640098794842, "trait" : "line", "color" : "d3a23c" },
    /* 214 */ { "x" : -9.824376810052287, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 215 */ { "x" : 13.437335920248351, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 216 */ { "x" : 13.437335920248351, "y" : -50.38022971491834, "trait" : "line", "color" : "d3a23c" },
    /* 217 */ { "x" : 7.621907737673187, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 218 */ { "x" : 32.04670610448886, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 219 */ { "x" : 27.394363558428736, "y" : -52.70640098794842, "trait" : "line", "color" : "d3a23c" },
    /* 220 */ { "x" : 27.394363558428736, "y" : 10.100223383863307, "trait" : "line", "color" : "d3a23c" },
    /* 221 */ { "x" : 32.04670610448886, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 222 */ { "x" : 11.111164647218285, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 223 */ { "x" : 13.437335920248351, "y" : 10.100223383863307, "trait" : "line", "color" : "d3a23c" },
    /* 224 */ { "x" : 13.437335920248351, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 225 */ { "x" : -9.824376810052287, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 226 */ { "x" : -9.824376810052287, "y" : 7.774052110833244, "trait" : "line", "color" : "d3a23c" },
    /* 227 */ { "x" : -7.498205537022224, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 228 */ { "x" : -28.433746994292797, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 229 */ { "x" : -24.944490084747702, "y" : 8.937137747348277, "trait" : "line", "color" : "d3a23c" },
    /* 230 */ { "x" : -24.944490084747702, "y" : -50.38022971491834, "trait" : "line", "color" : "d3a23c" },
    /* 231 */ { "x" : 47.16681937918428, "y" : -51.543315351433385, "trait" : "line", "color" : "d3a23c" },
    /* 232 */ { "x" : 47.16681937918428, "y" : 10.100223383863307, "trait" : "line", "color" : "d3a23c" },
    /* 233 */ { "x" : 43.677562469639184, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 234 */ { "x" : 86.71173102069537, "y" : 17.078737202953498, "trait" : "line", "color" : "d3a23c" },
    /* 235 */ { "x" : 86.71173102069537, "y" : 3.1217095647731155, "trait" : "line", "color" : "d3a23c" },
    /* 236 */ { "x" : 80.89630283812022, "y" : 6.610966474318209, "trait" : "line", "color" : "d3a23c" },
    /* 237 */ { "x" : 61.12384701736466, "y" : 6.610966474318209, "trait" : "line", "color" : "d3a23c" },
    /* 238 */ { "x" : 61.12384701736466, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 239 */ { "x" : 73.91778901903002, "y" : -15.487660619467393, "trait" : "line", "color" : "d3a23c" },
    /* 240 */ { "x" : 80.89630283812022, "y" : -13.161489346437332, "trait" : "line", "color" : "d3a23c" },
    /* 241 */ { "x" : 80.89630283812022, "y" : -28.28160262113275, "trait" : "line", "color" : "d3a23c" },
    /* 242 */ { "x" : 76.24396029206008, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 243 */ { "x" : 61.12384701736466, "y" : -25.95543134810268, "trait" : "line", "color" : "d3a23c" },
    /* 244 */ { "x" : 61.12384701736466, "y" : -48.054058441888294, "trait" : "line", "color" : "d3a23c" },
    /* 245 */ { "x" : 79.73321720160517, "y" : -48.054058441888294, "trait" : "line", "color" : "d3a23c" },
    /* 246 */ { "x" : 86.71173102069537, "y" : -45.727887168858224, "trait" : "line", "color" : "d3a23c" },
    /* 247 */ { "x" : 86.71173102069537, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" },
    /* 248 */ { "x" : 43.677562469639184, "y" : -58.521829170523574, "trait" : "line", "color" : "d3a23c" }

  ],

  "segments" : [
    { "v0" : 0, "v1" : 1, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : 12, "y" : -110 },
    { "v0" : 2, "v1" : 3, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : 12, "y" : 110 },
    { "v0" : 4, "v1" : 5, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : -12, "y" : -110 },
    { "v0" : 6, "v1" : 7, "curve" : 0, "color" : "db9b30", "trait" : "goalNet", "bias" : -12, "y" : 110 },
    
    { "v0" : 14, "v1" : 15, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "cMask" : ["" ], "trait" : "line" },
    { "v0" : 16, "v1" : 17, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : -240 },
    { "v0" : 18, "v1" : 19, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : -120 },
    { "v0" : 20, "v1" : 21, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : 240 },
    { "v0" : 22, "v1" : 23, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : 120 },
    { "v0" : 25, "v1" : 24, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 27, "v1" : 26, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 29, "v1" : 28, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 31, "v1" : 30, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line" },
    { "v0" : 32, "v1" : 33, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "cMask" : ["" ], "trait" : "line" },
    { "v0" : 36, "v1" : 35, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : -787 },
    { "v0" : 35, "v1" : 36, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : -787 },
    
    { "v0" : 2, "v1" : 1, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0, "cMask" : ["ball" ], "trait" : "goalNet", "bias" : -12 },
    { "v0" : 6, "v1" : 5, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 0, "trait" : "goalNet", "bias" : 12 },
    
    { "v0" : 37, "v1" : 38, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "x" : -1200 },
    { "v0" : 34, "v1" : 43, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : -470 },
    { "v0" : 44, "v1" : 45, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : 470 },
    { "v0" : 46, "v1" : 47, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "cMask" : ["" ], "trait" : "line" },
    { "v0" : 50, "v1" : 49, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : 787 },
    { "v0" : 49, "v1" : 50, "curve" : 180, "vis" : true, "color" : "b5091a", "bCoef" : 0.1, "trait" : "line", "x" : 787 },
    { "v0" : 47, "v1" : 51, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : -470 },
    { "v0" : 48, "v1" : 52, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    { "v0" : 52, "v1" : 53, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line", "y" : 470 },
    { "v0" : 46, "v1" : 48, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    
    { "v0" : 10, "v1" : 39, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : -12 },
    { "v0" : 11, "v1" : 40, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : 12 },
    { "v0" : 8, "v1" : 41, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : 12 },
    { "v0" : 9, "v1" : 42, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : -12 },
    
    { "v0" : 54, "v1" : 55, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "kickOffBarrier", "x" : 0 },
    { "v0" : 56, "v1" : 57, "curve" : 0, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "kickOffBarrier", "x" : 0 },
    { "v0" : 58, "v1" : 59, "curve" : -180, "vis" : true, "color" : "d9a03f", "cGroup" : ["blueKO" ], "trait" : "kickOffBarrier" },
    { "v0" : 60, "v1" : 61, "curve" : 180, "vis" : true, "color" : "d9a03f", "cGroup" : ["redKO" ], "trait" : "kickOffBarrier" },
    { "v0" : 62, "v1" : 63, "curve" : 0, "vis" : false, "color" : "b3b6b6", "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "x" : 0 },
    { "v0" : 64, "v1" : 65, "curve" : 0, "vis" : false, "color" : "b3b6b6", "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ], "trait" : "kickOffBarrier", "x" : 0 },
    
    { "v0" : 44, "v1" : 32, "curve" : -90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    { "v0" : 34, "v1" : 33, "curve" : 90, "vis" : true, "color" : "b5091a", "bCoef" : 0, "trait" : "line" },
    
    { "v0" : 10, "v1" : 8, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "trait" : "ballArea", "bias" : 12 },
    { "v0" : 11, "v1" : 9, "curve" : 0, "vis" : true, "color" : "db9b30", "bCoef" : 1, "cMask" : ["ball" ], "trait" : "ballArea", "bias" : -12 },
    
    { "v0" : 66, "v1" : 67, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 67, "v1" : 68, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 68, "v1" : 69, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 69, "v1" : 70, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 70, "v1" : 71, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 71, "v1" : 72, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 72, "v1" : 73, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 73, "v1" : 74, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 74, "v1" : 75, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 75, "v1" : 66, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 76, "v1" : 77, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 77, "v1" : 78, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 78, "v1" : 79, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 79, "v1" : 80, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 80, "v1" : 81, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 81, "v1" : 82, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 82, "v1" : 83, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 83, "v1" : 84, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 84, "v1" : 85, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 85, "v1" : 76, "color" : "d5a13c", "trait" : "line" },
    { "v0" : 86, "v1" : 87, "curve" : 186.38082131014062, "color" : "db9b30", "trait" : "line" },
    { "v0" : 87, "v1" : 86, "curve" : 179.0180912216902, "color" : "db9b30", "trait" : "line" },
    { "v0" : 88, "v1" : 89, "curve" : -103.60399833573787, "color" : "b5091a", "trait" : "line" },
    { "v0" : 90, "v1" : 91, "curve" : 97.68189805067395, "color" : "b5091a", "trait" : "line" },
    { "v0" : 92, "v1" : 93, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 93, "v1" : 94, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 95, "v1" : 96, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 97, "v1" : 98, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 98, "v1" : 99, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 99, "v1" : 100, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 101, "v1" : 102, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 102, "v1" : 103, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 103, "v1" : 104, "curve" : -94.97910584399823, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 104, "v1" : 101, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 105, "v1" : 106, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 106, "v1" : 107, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 107, "v1" : 108, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 110, "v1" : 111, "curve" : 200.7853866177665, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 111, "v1" : 112, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 113, "v1" : 114, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 114, "v1" : 115, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 116, "v1" : 117, "curve" : 239.75198538337884, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 118, "v1" : 119, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 120, "v1" : 121, "curve" : -165.0082847205403, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 121, "v1" : 120, "curve" : -179.11171113377614, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 122, "v1" : 123, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 123, "v1" : 124, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 124, "v1" : 125, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 126, "v1" : 127, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 127, "v1" : 128, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 128, "v1" : 129, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 130, "v1" : 131, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 132, "v1" : 133, "curve" : -135.23972989608095, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 133, "v1" : 134, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 134, "v1" : 135, "curve" : 156.93075869271055, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 136, "v1" : 137, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 137, "v1" : 138, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 138, "v1" : 139, "curve" : 154.63923301636038, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 139, "v1" : 140, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 141, "v1" : 142, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 142, "v1" : 143, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 144, "v1" : 145, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 146, "v1" : 147, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 147, "v1" : 148, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 148, "v1" : 149, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 150, "v1" : 151, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 151, "v1" : 152, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 153, "v1" : 154, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 155, "v1" : 156, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 157, "v1" : 158, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 159, "v1" : 160, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 161, "v1" : 162, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 162, "v1" : 163, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 164, "v1" : 165, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 166, "v1" : 167, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 168, "v1" : 169, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 170, "v1" : 171, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 172, "v1" : 173, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 173, "v1" : 174, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 175, "v1" : 176, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 176, "v1" : 177, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 178, "v1" : 179, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 179, "v1" : 180, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 181, "v1" : 182, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 183, "v1" : 184, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 185, "v1" : 186, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 111, "v1" : 187, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 121, "v1" : 188, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 189, "v1" : 190, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 191, "v1" : 192, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 193, "v1" : 194, "curve" : 0, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 195, "v1" : 196, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 196, "v1" : 197, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 197, "v1" : 198, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 198, "v1" : 199, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 199, "v1" : 200, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 200, "v1" : 201, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 201, "v1" : 202, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 202, "v1" : 203, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 203, "v1" : 204, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 204, "v1" : 205, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 205, "v1" : 206, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 206, "v1" : 207, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 207, "v1" : 208, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 208, "v1" : 209, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 209, "v1" : 210, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 210, "v1" : 195, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 211, "v1" : 212, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 212, "v1" : 213, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 213, "v1" : 214, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 214, "v1" : 215, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 215, "v1" : 216, "color" : "d3a23c", "trait" : "line", "x" : -74 },
    { "v0" : 216, "v1" : 217, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 217, "v1" : 218, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 218, "v1" : 219, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 219, "v1" : 220, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 220, "v1" : 221, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 221, "v1" : 222, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 222, "v1" : 223, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 223, "v1" : 224, "color" : "d3a23c", "trait" : "line", "x" : -74 },
    { "v0" : 224, "v1" : 225, "color" : "d3a23c", "trait" : "line", "y" : -16 },
    { "v0" : 225, "v1" : 226, "color" : "d3a23c", "trait" : "line", "x" : -94 },
    { "v0" : 226, "v1" : 227, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 227, "v1" : 228, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 228, "v1" : 229, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 229, "v1" : 230, "color" : "d3a23c", "trait" : "line", "x" : -107 },
    { "v0" : 230, "v1" : 211, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 231, "v1" : 232, "color" : "d3a23c", "trait" : "line", "x" : -45 },
    { "v0" : 232, "v1" : 233, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 233, "v1" : 234, "color" : "d3a23c", "trait" : "line", "y" : 12 },
    { "v0" : 234, "v1" : 235, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 235, "v1" : 236, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 236, "v1" : 237, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 237, "v1" : 238, "color" : "d3a23c", "trait" : "line", "x" : -33 },
    { "v0" : 238, "v1" : 239, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 239, "v1" : 240, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 240, "v1" : 241, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 241, "v1" : 242, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 242, "v1" : 243, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 243, "v1" : 244, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 244, "v1" : 245, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 245, "v1" : 246, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 246, "v1" : 247, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 247, "v1" : 248, "color" : "d3a23c", "trait" : "line", "y" : -53 },
    { "v0" : 248, "v1" : 231, "color" : "d3a23c", "trait" : "line" },
    { "v0" : 109, "v1" : 110, "curve" : 0, "vis" : true, "color" : "d59e3b", "trait" : "line" },
    { "v0" : 168, "v1" : 169, "curve" : -222.52965979806083, "color" : "d59e3b", "trait" : "line" }

  ],

  "goals" : [
    { "p0" : [1208.75,109 ], "p1" : [1208.75,-109 ], "team" : "blue" },
    { "p0" : [-1208.75,109 ], "p1" : [-1208.75,-109 ], "team" : "red" }

  ],

  "discs" : [
    { "radius" : 6.4, "invMass" : 1.5, "pos" : [0,0 ], "color" : "2EC4B6", "bCoef" : 0.41975, "cGroup" : ["ball","kick","score" ], "damping" : 0.99, "speed" : [0,0 ], "gravity" : [0,0 ] },
    { "radius" : 0.01, "invMass" : 1e+300, "pos" : [-5,-1 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0.01, "invMass" : 1e+300, "pos" : [5,-1 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0.01, "invMass" : 1e+300, "pos" : [0,-5 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0.01, "invMass" : 1e+300, "pos" : [-3,4 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0.01, "invMass" : 1e+300, "pos" : [3,4 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    { "radius" : 0.01, "invMass" : 1e+300, "pos" : [0,0 ], "color" : "0", "cMask" : [ ], "cGroup" : [ ] },
    
    { "radius" : 6, "pos" : [1200,110 ], "color" : "b5091a", "trait" : "goalPost" },
    { "radius" : 6, "pos" : [1200,-110 ], "color" : "b5091a", "trait" : "goalPost" },
    { "radius" : 6, "pos" : [-1200,110 ], "color" : "b5091a", "trait" : "goalPost" },
    { "radius" : 6, "pos" : [-1200,-110 ], "color" : "b5091a", "trait" : "goalPost" },
    
    { "radius" : 3, "invMass" : 0, "pos" : [-1200,600 ], "color" : "8c0a03", "bCoef" : 0.1, "trait" : "line", "_selected" : true },
    { "radius" : 3, "invMass" : 0, "pos" : [-1200,-600 ], "color" : "8c0a03", "bCoef" : 0.1, "trait" : "line" },
    { "radius" : 4, "invMass" : 0, "pos" : [1200,-600 ], "color" : "8c0a03", "bCoef" : 0.1, "trait" : "line" },
    { "radius" : 4, "invMass" : 0, "pos" : [1200,600 ], "color" : "8c0a03", "bCoef" : 0.1, "trait" : "line" }

  ],

  "planes" : [
    { "normal" : [0,-1 ], "dist" : -600, "bCoef" : 1, "trait" : "ballArea", "curve" : 0 },
    { "normal" : [0,1 ], "dist" : -600, "bCoef" : 1, "trait" : "ballArea", "vis" : false, "curve" : 0 },
    
    { "normal" : [1,0 ], "dist" : -1275, "bCoef" : 0.1 },
    { "normal" : [0,1 ], "dist" : -675, "bCoef" : 0.1 },
    { "normal" : [0,-1 ], "dist" : -675, "bCoef" : 0.1 },
    { "normal" : [-1,0 ], "dist" : -1275, "bCoef" : 0.1 },
    
    { "normal" : [1,0 ], "dist" : -1250, "bCoef" : 0.1, "trait" : "ballArea" },
    { "normal" : [-1,0 ], "dist" : -1250, "bCoef" : 0.1, "trait" : "ballArea" }

  ],

  "traits" : {
    "ballArea" : { "vis" : false, "bCoef" : 1, "cMask" : ["ball" ] },
    "goalPost" : { "radius" : 8, "invMass" : 0, "bCoef" : 0.5 },
    "goalNet" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball" ] },
    "line" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["" ] },
    "kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] }

  },

  "playerPhysics" : {
    "bCoef" : 0.5,
    "invMass" : 0.5,
    "damping" : 0.96,
    "acceleration" : 0.11,
    "kickingAcceleration" : 0.083,
    "kickingDamping" : 0.96,
    "kickStrength" : 5.45,
    "cGroup" : [ "red", "blue"
    ],
    "gravity" : [ 0, 0
    ],
    "radius" : 15,
    "kickback" : 0

  },

  "ballPhysics" : "disc0",

  "joints" : [
    { "d0" : 0, "d1" : 1, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 0, "d1" : 2, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 0, "d1" : 3, "color" : "transparent", "length" : 5 },
    { "d0" : 0, "d1" : 4, "color" : "transparent", "length" : 5 },
    { "d0" : 0, "d1" : 5, "color" : "transparent", "length" : 5 },
    { "d0" : 0, "d1" : 6, "color" : "transparent", "length" : 0 },
    { "d0" : 1, "d1" : 2, "color" : "transparent", "length" : 10 },
    { "d0" : 1, "d1" : 3, "color" : "transparent", "length" : 6.4031242374328485 },
    { "d0" : 1, "d1" : 4, "color" : "transparent", "length" : 5.385164807134504 },
    { "d0" : 1, "d1" : 5, "color" : "transparent", "length" : 9.433981132056603 },
    { "d0" : 1, "d1" : 6, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 2, "d1" : 3, "color" : "transparent", "length" : 6.4031242374328485 },
    { "d0" : 2, "d1" : 4, "color" : "transparent", "length" : 9.433981132056603 },
    { "d0" : 2, "d1" : 5, "color" : "transparent", "length" : 5.385164807134504 },
    { "d0" : 2, "d1" : 6, "color" : "transparent", "length" : 5.0990195135927845 },
    { "d0" : 3, "d1" : 4, "color" : "transparent", "length" : 9.486832980505138 },
    { "d0" : 3, "d1" : 5, "color" : "transparent", "length" : 9.486832980505138 },
    { "d0" : 3, "d1" : 6, "color" : "transparent", "length" : 5 },
    { "d0" : 4, "d1" : 5, "color" : "transparent", "length" : 6 },
    { "d0" : 4, "d1" : 6, "color" : "transparent", "length" : 5 },
    { "d0" : 5, "d1" : 6, "color" : "transparent", "length" : 5 }

  ]
}`


room.setScoreLimit(scoreLimit);
room.setTimeLimit(timeLimit);
room.setTeamsLock(true);
room.setKickRateLimit(6, 0, 0);

var masterPassword = '999';
var roomPassword = '';

/* OPTIONS */

var drawTimeLimit = Infinity;
var maxAdmins = 2;
var disableBans = true;
var maxInactivity = 5;
var debugMode = false;

var hideClaimMessage = true;
var mentionPlayersUnpause = true;

/* OBJECTS */

class Goal {
    constructor(time, team, striker, assist) {
        this.time = time;
        this.team = team;
        this.striker = striker;
        this.assist = assist;
    }
}

class Game {
    constructor() {
        this.date = Date.now();
        this.scores = room.getScores();
        this.playerComp = getStartingLineups();
        this.goals = [];
        this.rec = room.startRecording();
        this.touchArray = [];
    }
}

class PlayerComposition {
    constructor(player, auth, timeEntry, timeExit) {
        this.player = player;
        this.auth = auth;
        this.timeEntry = timeEntry;
        this.timeExit = timeExit;
        this.inactivityTicks = 0;
        this.GKTicks = 0;
    }
}

class BallTouch {
    constructor(player, time, goal, position) {
        this.player = player;
        this.time = time;
        this.goal = goal;
        this.position = position;
    }
}

/* PLAYERS */

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const State = { PLAY: 0, PAUSE: 1, STOP: 2 };
const Role = { PLAYER: 0, ADMIN_TEMP: 1, ADMIN_PERM: 2, MASTER: 3 };
const HaxNotification = { NONE: 0, CHAT: 1, MENTION: 2 };
const Situation = { STOP: 0, KICKOFF: 1, PLAY: 2, GOAL: 3 };

var gameState = State.STOP;
var playSituation = Situation.STOP;
var goldenGoal = false;

var players = [];
var teamRed = [];
var teamBlue = [];
var teamSpec = [];

var banList = [];

/* STATS */

var possession = [0, 0];
var actionZoneHalf = [0, 0];

/* AUTH */

var authArray = [];
var adminList = [
    // ['INSERT_AUTH_HERE_1', 'NICK_OF_ADMIN_1'],
    // ['INSERT_AUTH_HERE_2', 'NICK_OF_ADMIN_2'],
];
var masterList = [
    // 'INSERT_MASTER_AUTH_HERE',
    // 'INSERT_MASTER_AUTH_HERE_2'
];

/* COMMANDS */

var commands = {
    help: {
        aliases: ['commands'],
        roles: Role.PLAYER,
        desc: `
	This command shows all the available commands. It also can show the description of a command in particular.
Example: \'!help bb\' will show the description of the \'bb\' command.`,
        function: helpCommand,
    },
    claim: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: masterCommand,
    },
    bb: {
        aliases: ['bye', 'gn', 'cya'],
        roles: Role.PLAYER,
        desc: `
	This command makes you leave instantly (use recommended).`,
        function: leaveCommand,
    },
    rr: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command restarts the game.`,
        function: restartCommand,
    },
    rrs: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command swaps the teams and restarts the game.`,
        function: restartSwapCommand,
    },
    swap: {
        aliases: ['s'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command swaps the teams when the game is stopped.`,
        function: swapCommand,
    },
    training: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        This command loads the classic training stadium.`,
        function: stadiumCommand,
    },
    big: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        This command loads the big stadium.`,
        function: stadiumCommand,
    },
    kickred: {
        aliases: ['kickr'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the red team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    kickblue: {
        aliases: ['kickb'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the blue team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    kickspec: {
        aliases: ['kicks'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the spectators team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    clearbans: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
	This command unbans everyone. It also can unban one player in particular, by adding his ID as an argument.`,
        function: clearbansCommand,
    },
    bans: {
        aliases: ['banlist'],
        roles: Role.MASTER,
        desc: `
    This command shows all the players that were banned and their IDs.`,
        function: banListCommand,
    },
    admins: {
        aliases: ['adminlist'],
        roles: Role.MASTER,
        desc: `
    This command shows all the players that are permanent admins.`,
        function: adminListCommand,
    },
    setadmin: {
        aliases: ['admin'],
        roles: Role.MASTER,
        desc: `
    This command allows to set someone as admin. He will be able to connect as admin, and can be removed at any time by masters.
It takes 1 argument:
Argument 1: #<id> where <id> is the id of the player targeted.
Example: !setadmin #3 will give admin to the player with id 3.`,
        function: setAdminCommand,
    },
    removeadmin: {
        aliases: ['unadmin'],
        roles: Role.MASTER,
        desc: `
	This command allows to remove someone as admin.
It takes 1 argument:
Argument 1: #<id> where <id> is the id of the player targeted.
OR
Argument 1: <number> where <number> is the number associated with the admin given by the 'adminList' command.
Example: !removeadmin #300 will remove admin to the player with id 300,
         !removeadmin 2 will remove the admin n¬∞2 according to the 'adminList' command.`,
        function: removeAdminCommand,
    },
    password: {
        aliases: ['pw'],
        roles: Role.MASTER,
        desc: `
        This command allows to add a password to the room.
    It takes 1 argument:
    Argument 1: <password> where <password> is the password you want for the room.
    
    To remove the room password, simply enter '!password'.`,
        function: passwordCommand,
    },
};

/* GAME */

var lastTouches = Array(2).fill(null);
var lastTeamTouched;

var speedCoefficient = 100 / (5 * (0.99 ** 60 + 1));
var ballSpeed = 0;
var playerRadius = 15;
var ballRadius = 10;
var triggerDistance = playerRadius + ballRadius + 0.01;

/* COLORS */

var welcomeColor = 0x9ad143;
var announcementColor = 0xffefd6;
var infoColor = 0xbebebe;
var privateMessageColor = 0xffc933;
var redColor = 0xff4c4c;
var blueColor = 0x62cbff;
var warningColor = 0xffa135;
var errorColor = 0xa40000;
var successColor = 0x75ff75;
var defaultColor = null;

/* AUXILIARY */

var checkTimeVariable = false;
var checkStadiumVariable = true;
var endGameVariable = false;
var cancelGameVariable = false;
var kickFetchVariable = false;

var stopTimeout;
var startTimeout;
var unpauseTimeout;

var emptyPlayer = {
    id: 0,
};
stadiumCommand(emptyPlayer, "!big");

var game = new Game();

/* FUNCTIONS */

/* AUXILIARY FUNCTIONS */

if (typeof String.prototype.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.split(search).join(replacement);
    };
}

function getDate() {
    let d = new Date();
    return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
}

/* MATH FUNCTIONS */

function getRandomInt(max) {
    // returns a random number between 0 and max-1
    return Math.floor(Math.random() * Math.floor(max));
}

function pointDistance(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}

/* TIME FUNCTIONS */

function getMinutesGame(time) {
    var t = Math.floor(time / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getMinutesReport(time) {
    return Math.floor(Math.round(time) / 60);
}

function getMinutesEmbed(time) {
    var t = Math.floor(Math.round(time) / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsGame(time) {
    var t = Math.floor(time - Math.floor(time / 60) * 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsReport(time) {
    var t = Math.round(time);
    return Math.floor(t - Math.floor(t / 60) * 60);
}

function getSecondsEmbed(time) {
    var t = Math.round(time);
    var t2 = Math.floor(t - Math.floor(t / 60) * 60);
    return `${Math.floor(t2 / 10)}${Math.floor(t2 % 10)}`;
}

function getTimeGame(time) {
    return `[${getMinutesGame(time)}:${getSecondsGame(time)}]`;
}

function getTimeEmbed(time) {
    return `[${getMinutesEmbed(time)}:${getSecondsEmbed(time)}]`;
}

function getGoalGame() {
    return game.scores.red + game.scores.blue;
}

/* REPORT FUNCTIONS */

function findFirstNumberCharString(str) {
    let str_number = str[str.search(/[0-9]/g)];
    return str_number === undefined ? "0" : str_number;
}

function getIdReport() {
    var d = new Date();
    return `${d.getFullYear() % 100}${d.getMonth() < 9 ? '0' : ''}${d.getMonth() + 1}${d.getDate() < 10 ? '0' : ''}${d.getDate()}${d.getHours() < 10 ? '0' : ''}${d.getHours()}${d.getMinutes() < 10 ? '0' : ''}${d.getMinutes()}${d.getSeconds() < 10 ? '0' : ''}${d.getSeconds()}${findFirstNumberCharString(roomName)}`;
}

function getRecordingName(game) {
    let d = new Date();
    let redCap = game.playerComp[0][0] != undefined ? game.playerComp[0][0].player.name : 'Red';
    let blueCap = game.playerComp[1][0] != undefined ? game.playerComp[1][0].player.name : 'Blue';
    let day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate();
    let month = d.getMonth() < 10 ? '0' + (d.getMonth() + 1) : (d.getMonth() + 1);
    let year = d.getFullYear() % 100 < 10 ? '0' + (d.getFullYear() % 100) : (d.getFullYear() % 100);
    let hour = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();
    let minute = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();
    return `${day}-${month}-${year}-${hour}h${minute}-${redCap}vs${blueCap}.hbr2`;
}

function fetchRecording(game) {
    if (gameWebhook != "") {
        let form = new FormData();
        form.append(null, new File([game.rec], getRecordingName(game), { "type": "text/plain" }));
        form.append("payload_json", JSON.stringify({
            "username": roomName
        }));

        fetch(gameWebhook, {
            method: 'POST',
            body: form,
        }).then((res) => res);
    }
}

/* FEATURE FUNCTIONS */

function getCommand(commandStr) {
    if (commands.hasOwnProperty(commandStr)) return commandStr;
    for (const [key, value] of Object.entries(commands)) {
        for (let alias of value.aliases) {
            if (alias == commandStr) return key;
        }
    }
    return false;
}

function getPlayerComp(player) {
    if (player == null || player.id == 0) return null;
    var comp = game.playerComp;
    var index = comp[0].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[0][index];
    index = comp[1].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[1][index];
    return null;
}

function getTeamArray(team) {
    return team == Team.RED ? teamRed : team == Team.BLUE ? teamBlue : teamSpec;
}

function sendAnnouncementTeam(message, team, color, style, mention) {
    for (let player of team) {
        room.sendAnnouncement(message, player.id, color, style, mention);
    }
}

function teamChat(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    var emoji = player.team == Team.RED ? '‚ù§' : player.team == Team.BLUE ? '‚ù§' : '‚ö™';
    var message = `${emoji} [TEAM] ${player.name}: ${msgArray.join(' ')}`;
    var team = getTeamArray(player.team);
    var color = player.team == Team.RED ? redColor : player.team == Team.BLUE ? blueColor : null;
    var style = 'bold';
    var mention = HaxNotification.CHAT;
    sendAnnouncementTeam(message, team, color, style, mention);
}

function playerChat(player, message) {
    var msgArray = message.split(/ +/);
    var playerTargetIndex = players.findIndex(
        (p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
    );
    if (playerTargetIndex == -1) {
        room.sendAnnouncement(
            `Invalid player, make sure the name you entered is correct.`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var playerTarget = players[playerTargetIndex];
    if (player.id == playerTarget.id) {
        room.sendAnnouncement(
            `No te puedes hablar a ti mismo!`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var messageFrom = `üìù [PM with ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    var messageTo = `üìù [PM with ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    room.sendAnnouncement(
        messageFrom,
        player.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
    room.sendAnnouncement(
        messageTo,
        playerTarget.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
}

/* PHYSICS FUNCTIONS */

function calculateStadiumVariables() {
    if (checkStadiumVariable && teamRed.length + teamBlue.length > 0) {
        checkStadiumVariable = false;
        setTimeout(() => {
            let ballDisc = room.getDiscProperties(0);
            let playerDisc = room.getPlayerDiscProperties(teamRed.concat(teamBlue)[0].id);
            ballRadius = ballDisc.radius;
            playerRadius = playerDisc.radius;
            triggerDistance = ballRadius + playerRadius + 0.01;
            speedCoefficient = 100 / (5 * ballDisc.invMass * (ballDisc.damping ** 60 + 1));
        }, 1);
    }
}

function checkGoalKickTouch(array, index, goal) {
    if (array != null && array.length >= index + 1) {
        var obj = array[index];
        if (obj != null && obj.goal != null && obj.goal == goal) return obj;
    }
    return null;
}

/* BUTTONS */

function swapButton() {
    for (let player of teamBlue) {
        room.setPlayerTeam(player.id, Team.RED);
    }
    for (let player of teamRed) {
        room.setPlayerTeam(player.id, Team.BLUE);
    }
}

/* COMMAND FUNCTIONS */

/* PLAYER COMMANDS */

function leaveCommand(player, message) {
    room.kickPlayer(player.id, 'Bye !', false);
}

function helpCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        var commandString = 'Player commands :';
        for (const [key, value] of Object.entries(commands)) {
            if (value.desc && value.roles == Role.PLAYER) commandString += ` !${key},`;
        }
        commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        if (getRole(player) >= Role.ADMIN_TEMP) {
            commandString += `Admin commands :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.ADMIN_TEMP) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':')
                commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        if (getRole(player) >= Role.MASTER) {
            commandString += `Master commands :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.MASTER) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':') commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        commandString += "\nTo get information on a specific command, type ''!help <command name>'.";
        room.sendAnnouncement(
            commandString,
            player.id,
            infoColor,
            'bold',
            HaxNotification.CHAT
        );
    } else if (msgArray.length >= 1) {
        var commandName = getCommand(msgArray[0].toLowerCase());
        if (commandName != false && commands[commandName].desc != false)
            room.sendAnnouncement(
                `\'${commandName}\' command :\n${commands[commandName].desc}`,
                player.id,
                infoColor,
                'bold',
                HaxNotification.CHAT
            );
        else
            room.sendAnnouncement(
                `The command you tried to get information on does not exist. To check all available commands, type \'!help\'`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
    }
}

function masterCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == masterPassword) {
        if (!masterList.includes(authArray[player.id][0])) {
            room.setPlayerAdmin(player.id, true);
            adminList = adminList.filter((a) => a[0] != authArray[player.id][0]);
            masterList.push(authArray[player.id][0]);
            room.sendAnnouncement(
                `${player.name} is now a room master !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `You are a master already !`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* ADMIN COMMANDS */

function restartCommand(player, message) {
    instantRestart();
}

function restartSwapCommand(player, message) {
    room.stopGame();
    swapButton();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function swapCommand(player, message) {
    if (playSituation == Situation.STOP) {
        swapButton();
        room.sendAnnouncement(
            '‚úîÔ∏è Teams swapped !',
            null,
            announcementColor,
            'bold',
            null
        );
    } else {
        room.sendAnnouncement(
            `Please stop the game before swapping.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function kickTeamCommand(player, message) {
    var msgArray = message.split(/ +/);
    var reasonString = `Team kick by ${player.name}`;
    if (msgArray.length > 1) {
        reasonString = msgArray.slice(1).join(' ');
    }
    if (['!kickred', '!kickr'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamRed.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamRed[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickblue', '!kickb'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamBlue.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamBlue[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickspec', '!kicks'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamSpec.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamSpec[0].id, reasonString, false);
            }, i * 20)
        }
    }
}

function stadiumCommand(player, message) {
    var msgArray = message.split(/ +/);
    if (gameState == State.STOP) {
        if (['!8321'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(classicMap).name == 'Classic') {
                room.setDefaultStadium('Classic');
            } else {
                room.setCustomStadium(classicMap);
            }
        } else if (['!big'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(bigMap).name == 'Big') {
                room.setDefaultStadium('Big');
            } else {
                room.setCustomStadium(bigMap);
            }
        } else if (['!training'].includes(msgArray[0].toLowerCase())) {
            room.setCustomStadium(trainingMap);
        } else {
            room.sendAnnouncement(
                `Stadium not recognized.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Please stop the game before using this command.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

/* MASTER COMMANDS */

function clearbansCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        room.clearBans();
        room.sendAnnouncement(
            '‚úîÔ∏è Bans cleared !',
            null,
            announcementColor,
            'bold',
            null
        );
        banList = [];
    } else if (msgArray.length == 1) {
        if (parseInt(msgArray[0]) > 0) {
            var ID = parseInt(msgArray[0]);
            room.clearBan(ID);
            if (banList.length != banList.filter((p) => p[1] != ID).length) {
                room.sendAnnouncement(
                    `‚úîÔ∏è ${banList.filter((p) => p[1] == ID)[0][0]} has been unbanned from the room !`,
                    null,
                    announcementColor,
                    'bold',
                    null
                );
            } else {
                room.sendAnnouncement(
                    `The ID you entered doesn't have a ban associated to. Enter "!help clearbans" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
            banList = banList.filter((p) => p[1] != ID);
        } else {
            room.sendAnnouncement(
                `Invalid ID entered. Enter "!help clearbans" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help clearbans" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function banListCommand(player, message) {
    if (banList.length == 0) {
        room.sendAnnouncement(
            "üì¢ There's nobody in the ban list.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = 'üì¢ Ban list : ';
    for (let ban of banList) {
        cstm += ban[0] + `[${ban[1]}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function adminListCommand(player, message) {
    if (adminList.length == 0) {
        room.sendAnnouncement(
            "üì¢ There's nobody in the admin list.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = 'üì¢ Admin list : ';
    for (let i = 0; i < adminList.length; i++) {
        cstm += adminList[i][1] + `[${i}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function setAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (!adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    if (!masterList.includes(authArray[playerAdmin.id][0])) {
                        room.setPlayerAdmin(playerAdmin.id, true);
                        adminList.push([authArray[playerAdmin.id][0], playerAdmin.name]);
                        room.sendAnnouncement(
                            `${playerAdmin.name} is now a room admin !`,
                            null,
                            announcementColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    } else {
                        room.sendAnnouncement(
                            `This player is a master already !`,
                            player.id,
                            errorColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    }
                } else {
                    room.sendAnnouncement(
                        `This player is a permanent admin already !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `There is no player with such ID in the room. Enter "!help setadmin" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else {
            room.sendAnnouncement(
                `Incorrect format for your argument. Enter "!help setadmin" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help setadmin" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function removeAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    room.setPlayerAdmin(playerAdmin.id, false);
                    adminList = adminList.filter((a) => a[0] != authArray[playerAdmin.id][0]);
                    room.sendAnnouncement(
                        `${playerAdmin.name} is not a room admin anymore !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.sendAnnouncement(
                        `This player isn't a permanent admin !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `There is no player with such ID in the room. Enter "!help removeadmin" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else if (msgArray[0].length > 0 && parseInt(msgArray[0]) < adminList.length) {
            var index = parseInt(msgArray[0]);
            var playerAdmin = adminList[index];
            if (players.findIndex((p) => authArray[p.id][0] == playerAdmin[0]) != -1) {
                // check if there is the removed admin in the room
                var indexRem = players.findIndex((p) => authArray[p.id][0] == playerAdmin[0]);
                room.setPlayerAdmin(players[indexRem].id, false);
            }
            adminList.splice(index);
            room.sendAnnouncement(
                `${playerAdmin[1]} is not a room admin anymore !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Incorrect format for your argument. Enter "!help removeadmin" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help removeadmin" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function passwordCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray.length == 1 && msgArray[0] == '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `The room password has been removed.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
        roomPassword = msgArray.join(' ');
        room.setPassword(roomPassword);
        room.sendAnnouncement(
            `The room password has been set to ${roomPassword}`,
            player.id,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        if (roomPassword != '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `The room password has been removed.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `The room currently does not have a password. Enter "!help password" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* GAME FUNCTIONS */

function checkTime() {
    const scores = room.getScores();
    if (game != undefined) game.scores = scores;
    if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0 && playSituation == Situation.PLAY) {
        if (scores.red != scores.blue) {
            if (!checkTimeVariable) {
                checkTimeVariable = true;
                setTimeout(() => {
                    checkTimeVariable = false;
                }, 3000);
                scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
                stopTimeout = setTimeout(() => {
                    room.stopGame();
                }, 2000);
            }
            return;
        }
        if (drawTimeLimit != 0) {
            goldenGoal = true;
            room.sendAnnouncement(
                '‚öΩ First goal wins !',
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
    if (Math.abs(scores.time - drawTimeLimit * 60 - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
        if (!checkTimeVariable) {
            checkTimeVariable = true;
            setTimeout(() => {
                checkTimeVariable = false;
            }, 10);
            endGame(Team.SPECTATORS);
            room.stopGame();
            goldenGoal = false;
        }
    }
}

function instantRestart() {
    room.stopGame();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function resumeGame() {
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 1000);
    setTimeout(() => {
        room.pauseGame(false);
    }, 500);
}

function endGame(winner) {
    const scores = room.getScores();
    game.scores = scores;
    endGameVariable = true;
    if (winner == Team.RED) {
        room.sendAnnouncement(
            `‚ú® Red Team won ${scores.red} - ${scores.blue} !`,
            null,
            redColor,
            'bold',
            HaxNotification.CHAT
        );
    } else if (winner == Team.BLUE) {
        room.sendAnnouncement(
            `‚ú® Blue Team won ${scores.blue} - ${scores.red} !`,
            null,
            blueColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        room.sendAnnouncement(
            'üí§ Draw limit reached !',
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    }
    let possessionRedPct = (possession[0] / (possession[0] + possession[1])) * 100;
    let possessionBluePct = 100 - possessionRedPct;
    let possessionString = `üî¥ ${possessionRedPct.toFixed(0)}% - ${possessionBluePct.toFixed(0)}% üîµ`;
    let actionRedPct = (actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1])) * 100;
    let actionBluePct = 100 - actionRedPct;
    let actionString = `üî¥ ${actionRedPct.toFixed(0)}% - ${actionBluePct.toFixed(0)}% üîµ`;
    let CSString = getCSString(scores);
    room.sendAnnouncement(
        `üìä Possession: üî¥ ${possessionString}\n` +
        `üìä Action Zone: üî¥ ${actionString}\n` +
        `${CSString}`,
        null,
        announcementColor,
        'bold',
        HaxNotification.NONE
    );
}

/* PLAYER FUNCTIONS */

function updateTeams() {
    players = room.getPlayerList();
    teamRed = players.filter((p) => p.team == Team.RED);
    teamBlue = players.filter((p) => p.team == Team.BLUE);
    teamSpec = players.filter((p) => p.team == Team.SPECTATORS);
}

function updateAdmins(excludedPlayerID = 0) {
    if (players.length != 0 && players.filter((p) => p.admin).length < maxAdmins) {
        let playerArray = players.filter((p) => p.id != excludedPlayerID && !p.admin);
        let arrayID = playerArray.map((player) => player.id);
        room.setPlayerAdmin(Math.min(...arrayID), true);
    }
}

function getRole(player) {
    return (
        !!masterList.find((a) => a == authArray[player.id][0]) * 2 +
        !!adminList.find((a) => a[0] == authArray[player.id][0]) * 1 +
        player.admin * 1
    );
}

function ghostKickHandle(oldP, newP) {
    var teamArrayId = getTeamArray(oldP.team).map((p) => p.id);
    teamArrayId.splice(teamArrayId.findIndex((id) => id == oldP.id), 1, newP.id);

    room.kickPlayer(oldP.id, 'Ghost kick', false);
    room.setPlayerTeam(newP.id, oldP.team);
    room.setPlayerAdmin(newP.id, oldP.admin);
    room.reorderPlayers(teamArrayId, true);

    if (oldP.team != Team.SPECTATORS && playSituation != Situation.STOP) {
        var discProp = room.getPlayerDiscProperties(oldP.id);
        room.setPlayerDiscProperties(newP.id, discProp);
    }
}

/* ACTIVITY FUNCTIONS */

function handleActivityPlayer(player) {
    let pComp = getPlayerComp(player);
    if (pComp != null) {
        pComp.inactivityTicks++;
        return pComp.inactivityTicks;
    }
    return 0;
}

function handleActivityPlayerTeamChange(changedPlayer) {
    if (changedPlayer.team == Team.SPECTATORS) {
        let pComp = getPlayerComp(changedPlayer);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivityStop() {
    for (let player of players) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivity() {
    if (gameState == State.PLAY && players.length > 1) {
        var playerMaxInactivity = 0;
        for (let player of teamRed) {
            var playerInactivity = handleActivityPlayer(player);
            playerMaxInactivity = Math.max(playerInactivity, playerMaxInactivity);
        }
        for (let player of teamBlue) {
            var playerInactivity = handleActivityPlayer(player);
            playerMaxInactivity = Math.max(playerInactivity, playerMaxInactivity);
        }
        if (playerMaxInactivity >= maxInactivity * 60 * 60) {
            cancelGameVariable = true;
            room.stopGame();
            room.sendAnnouncement(
                '‚ö†Ô∏è Game was stopped due to inactivity !',
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
            handleActivityStop();
        }
    }
}

/* LINEUP FUNCTIONS */

function getStartingLineups() {
    var compositions = [[], []];
    for (let player of teamRed) {
        compositions[0].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    for (let player of teamBlue) {
        compositions[1].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    return compositions;
}

function handleLineupChangeTeamChange(changedPlayer) {
    if (gameState != State.STOP) {
        var playerLineup;
        if (changedPlayer.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[0][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[0].push(playerLineup);
            }
        } else if (changedPlayer.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[1][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[1].push(playerLineup);
            }
        }
        if (teamRed.some((r) => r.id == changedPlayer.id)) {
            // player leaves red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (teamBlue.some((r) => r.id == changedPlayer.id)) {
            // player leaves blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

function handleLineupChangeLeave(player) {
    if (playSituation != Situation.STOP) {
        if (player.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (player.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

/* STATS FUNCTIONS */

/* GK FUNCTIONS */

function handleGKTeam(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? teamRed : teamBlue;
    let playerGK = teamArray.reduce((prev, current) => {
        if (team == Team.RED) {
            return (prev?.position.x < current.position.x) ? prev : current
        } else {
            return (prev?.position.x > current.position.x) ? prev : current
        }
    }, null);
    let playerCompGK = getPlayerComp(playerGK);
    return playerCompGK;
}

function handleGK() {
    let redGK = handleGKTeam(Team.RED);
    if (redGK != null) {
        redGK.GKTicks++;
    }
    let blueGK = handleGKTeam(Team.BLUE);
    if (blueGK != null) {
        blueGK.GKTicks++;
    }
}

function getGK(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? game.playerComp[0] : game.playerComp[1];
    let playerGK = teamArray.reduce((prev, current) => {
        return (prev?.GKTicks > current.GKTicks) ? prev : current
    }, null);
    return playerGK;
}

function getCS(scores) {
    let playersNameCS = [];
    let redGK = getGK(Team.RED);
    let blueGK = getGK(Team.BLUE);
    if (redGK != null && scores.blue == 0) {
        playersNameCS.push(redGK.player.name);
    }
    if (blueGK != null && scores.red == 0) {
        playersNameCS.push(blueGK.player.name);
    }
    return playersNameCS;
}

function getCSString(scores) {
    let playersCS = getCS(scores);
    if (playersCS.length == 0) {
        return "ü•Ö No CS";
    } else if (playersCS.length == 1) {
        return `ü•Ö ${playersCS[0]} tuvo una CS.`;
    } else {
        return `ü•Ö ${playersCS[0]} and ${playersCS[1]} tuvo una CS.`;
    }
}

/* GLOBAL STATS FUNCTIONS */

function getLastTouchOfTheBall() {
    const ballPosition = room.getBallPosition();
    updateTeams();
    let playerArray = [];
    for (let player of players) {
        if (player.position != null) {
            var distanceToBall = pointDistance(player.position, ballPosition);
            if (distanceToBall < triggerDistance) {
                if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
                playerArray.push([player, distanceToBall]);
            }
        }
    }
    if (playerArray.length != 0) {
        let playerTouch = playerArray.sort((a, b) => a[1] - b[1])[0][0];
        if (lastTeamTouched == playerTouch.team || lastTeamTouched == Team.SPECTATORS) {
            if (lastTouches[0] == null || (lastTouches[0] != null && lastTouches[0].player.id != playerTouch.id)) {
                game.touchArray.push(
                    new BallTouch(
                        playerTouch,
                        game.scores.time,
                        getGoalGame(),
                        ballPosition
                    )
                );
                lastTouches[0] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 1,
                    getGoalGame()
                );
                lastTouches[1] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 2,
                    getGoalGame()
                );
            }
        }
        lastTeamTouched = playerTouch.team;
    }
}

function getBallSpeed() {
    var ballProp = room.getDiscProperties(0);
    return Math.sqrt(ballProp.xspeed ** 2 + ballProp.yspeed ** 2) * speedCoefficient;
}

function getGameStats() {
    if (playSituation == Situation.PLAY && gameState == State.PLAY) {
        lastTeamTouched == Team.RED ? possession[0]++ : possession[1]++;
        var ballPosition = room.getBallPosition();
        ballPosition.x < 0 ? actionZoneHalf[0]++ : actionZoneHalf[1]++;
    }
}

/* GOAL ATTRIBUTION FUNCTIONS */

function getGoalAttribution(team) {
    var goalAttribution = Array(2).fill(null);
    if (lastTouches[0] != null) {
        if (lastTouches[0].player.team == team) {
            // Direct goal scored by player
            if (lastTouches[1] != null && lastTouches[1].player.team == team) {
                goalAttribution = [lastTouches[0].player, lastTouches[1].player];
            } else {
                goalAttribution = [lastTouches[0].player, null];
            }
        } else {
            // Own goal
            goalAttribution = [lastTouches[0].player, null];
        }
    }
    return goalAttribution;
}

function getGoalString(team) {
    var goalString;
    var scores = game.scores;
    var goalAttribution = getGoalAttribution(team);
    if (goalAttribution[0] != null) {
        if (goalAttribution[0].team == team) {
            if (goalAttribution[1] != null && goalAttribution[1].team == team) {
                goalString = `‚öΩ ${getTimeGame(scores.time)} Golazo de ${goalAttribution[0].name} ! Asistencia de ${goalAttribution[1].name}. Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(
                        scores.time,
                        team,
                        goalAttribution[0],
                        goalAttribution[1]
                    )
                );
            } else {
                goalString = `‚öΩ ${getTimeGame(scores.time)} Golazo de ${goalAttribution[0].name} ! Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(scores.time, team, goalAttribution[0], null)
                );
            }
        } else {
            goalString = `üòÇ ${getTimeGame(scores.time)} Autogol de ${goalAttribution[0].name} ! Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
            game.goals.push(
                new Goal(scores.time, team, goalAttribution[0], null)
            );
        }
    } else {
        goalString = `‚öΩ ${getTimeGame(scores.time)} Golazo para ${team == Team.RED ? 'red' : 'blue'} team ! Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
        game.goals.push(
            new Goal(scores.time, team, null, null)
        );
    }

    return goalString;
}

/* GET STATS FUNCTIONS */

function actionReportCountTeam(goals, team) {
    let playerActionSummaryTeam = [];
    let indexTeam = team == Team.RED ? 0 : 1;
    let indexOtherTeam = team == Team.RED ? 1 : 0;
    for (let goal of goals[indexTeam]) {
        if (goal[0] != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == goal[0].id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[0].id);
                playerActionSummaryTeam[index][1]++;
            } else {
                playerActionSummaryTeam.push([goal[0], 1, 0, 0]);
            }
            if (goal[1] != null) {
                if (playerActionSummaryTeam.find(a => a[0].id == goal[1].id)) {
                    let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[1].id);
                    playerActionSummaryTeam[index][2]++;
                } else {
                    playerActionSummaryTeam.push([goal[1], 0, 1, 0]);
                }
            }
        }
    }
    if (goals[indexOtherTeam].length == 0) {
        let playerCS = getGK(team)?.player;
        if (playerCS != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == playerCS.id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == playerCS.id);
                playerActionSummaryTeam[index][3]++;
            } else {
                playerActionSummaryTeam.push([playerCS, 0, 0, 1]);
            }
        }
    }

    playerActionSummaryTeam.sort((a, b) => (a[1] + a[2] + a[3]) - (b[1] + b[2] + b[3]));
    return playerActionSummaryTeam;
}

/* FETCH FUNCTIONS */

function fetchGametimeReport(game) {
    var fieldGametimeRed = {
        name: 'üî¥        **RED TEAM STATS**',
        value: '‚åõ __**Game Time:**__\n\n',
        inline: true,
    };
    var fieldGametimeBlue = {
        name: 'üîµ       **BLUE TEAM STATS**',
        value: '‚åõ __**Game Time:**__\n\n',
        inline: true,
    };
    var redTeamTimes = game.playerComp[0].map((p) => [p.player, 0]);
    for (let i = 0; i < game.playerComp[0].length; i++) {
        var player = game.playerComp[0][i];
        for (let j = 0; j < player.timeEntry.length; j++) {
            if (player.timeExit.length < j + 1) {
                redTeamTimes[i][1] += game.scores.time - player.timeEntry[j];
            } else {
                redTeamTimes[i][1] += player.timeExit[j] - player.timeEntry[j];
            }
        }
    }
    var blueTeamTimes = game.playerComp[1].map((p) => [p.player, 0]);
    for (let i = 0; i < game.playerComp[1].length; i++) {
        var player = game.playerComp[1][i];
        for (let j = 0; j < player.timeEntry.length; j++) {
            if (player.timeExit.length < j + 1) {
                blueTeamTimes[i][1] += game.scores.time - player.timeEntry[j];
            } else {
                blueTeamTimes[i][1] += player.timeExit[j] - player.timeEntry[j];
            }
        }
    }

    for (let time of redTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeRed.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeRed.value += `\n${blueTeamTimes.length - redTeamTimes.length > 0 ? '\n'.repeat(blueTeamTimes.length - redTeamTimes.length) : ''
        }`;
    fieldGametimeRed.value += '=====================';

    for (let time of blueTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeBlue.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeBlue.value += `\n${redTeamTimes.length - blueTeamTimes.length > 0 ? '\n'.repeat(redTeamTimes.length - blueTeamTimes.length) : ''
        }`;
    fieldGametimeBlue.value += '=====================';

    return [fieldGametimeRed, fieldGametimeBlue];
}

function fetchActionsSummaryReport(game) {
    var fieldReportRed = {
        name: 'üî¥        **RED TEAM STATS**',
        value: 'üìä __**Player Stats:**__\n\n',
        inline: true,
    };
    var fieldReportBlue = {
        name: 'üîµ       **BLUE TEAM STATS**',
        value: 'üìä __**Player Stats:**__\n\n',
        inline: true,
    };
    var goals = [[], []];
    for (let goal of game.goals) {
        goals[goal.team - 1].push([goal.striker, goal.assist]);
    }
    var redActions = actionReportCountTeam(goals, Team.RED);
    if (redActions.length > 0) {
        for (let act of redActions) {
            fieldReportRed.value += `> **${act[0].team != Team.RED ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }
    var blueActions = actionReportCountTeam(goals, Team.BLUE);
    if (blueActions.length > 0) {
        for (let act of blueActions) {
            fieldReportBlue.value += `> **${act[0].team != Team.BLUE ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }

    fieldReportRed.value += `\n${blueActions.length - redActions.length > 0 ? '\n'.repeat(blueActions.length - redActions.length) : ''
        }`;
    fieldReportRed.value += '=====================';

    fieldReportBlue.value += `\n${redActions.length - blueActions.length > 0 ? '\n'.repeat(redActions.length - blueActions.length) : ''
        }`;
    fieldReportBlue.value += '=====================';

    return [fieldReportRed, fieldReportBlue];
}

function fetchSummaryEmbed(game) {
    var fetchEndgame = [fetchGametimeReport, fetchActionsSummaryReport];
    var logChannel = gameWebhook;
    var fields = [
        {
            name: 'üî¥        **RED TEAM STATS**',
            value: '=====================\n\n',
            inline: true,
        },
        {
            name: 'üîµ       **BLUE TEAM STATS**',
            value: '=====================\n\n',
            inline: true,
        },
    ];
    for (let i = 0; i < fetchEndgame.length; i++) {
        var fieldsReport = fetchEndgame[i](game);
        fields[0].value += fieldsReport[0].value + '\n\n';
        fields[1].value += fieldsReport[1].value + '\n\n';
    }
    fields[0].value = fields[0].value.substring(0, fields[0].value.length - 2);
    fields[1].value = fields[1].value.substring(0, fields[1].value.length - 2);

    var possR = possession[0] / (possession[0] + possession[1]);
    var possB = 1 - possR;
    var possRString = (possR * 100).toFixed(0).toString();
    var possBString = (possB * 100).toFixed(0).toString();
    var zoneR = actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1]);
    var zoneB = 1 - zoneR;
    var zoneRString = (zoneR * 100).toFixed(0).toString();
    var zoneBString = (zoneB * 100).toFixed(0).toString();
    var win = (game.scores.red > game.scores.blue) * 1 + (game.scores.blue > game.scores.red) * 2;
    var objectBodyWebhook = {
        embeds: [
            {
                title: `üìù MATCH REPORT #${getIdReport()}`,
                description:
                    `**${getTimeEmbed(game.scores.time)}** ` +
                    (win == 1 ? '**Red Team** ' : 'Red Team ') + game.scores.red +
                    ' - ' +
                    game.scores.blue + (win == 2 ? ' **Blue Team**' : ' Blue Team') +
                    '\n```c\nPossession: ' + possRString + '% - ' + possBString + '%' +
                    '\nAction Zone: ' + zoneRString + '% - ' + zoneBString + '%\n```\n\n',
                color: 9567999,
                fields: fields,
                footer: {
                    text: `Recording: ${getRecordingName(game)}`,
                },
                timestamp: new Date().toISOString(),
            },
        ],
        username: roomName
    };
    if (logChannel != '') {
        fetch(logChannel, {
            method: 'POST',
            body: JSON.stringify(objectBodyWebhook),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
}

/* EVENTS */

/* PLAYER MOVEMENT */

room.onPlayerJoin = function (player) {
    authArray[player.id] = [player.auth, player.conn];
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ‚û°Ô∏è JOIN (${players.length + 1}/${maxPlayers})\n**` +
                    `${player.name}** [${authArray[player.id][0]}] {${authArray[player.id][1]}}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    room.sendAnnouncement(
        `‚ù§ Bienvenido ${player.name} a la sala de FHE, alquila una sala aqui a un precio bajo > https://discord.gg/qg3PKnXkHA \nSala creada por ardilla y distribuida por Feiraco‚ù§`,
        player.id,
        welcomeColor,
        'bold',
        HaxNotification.CHAT
    );
    updateTeams();
    updateAdmins();
    if (masterList.findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(
            `Master ${player.name} Se conect√≥ a la sala !`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(player.id, true);
    } else if (adminList.map((a) => a[0]).findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(
            `Admin ${player.name} Se conect√≥ a la sala !`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(player.id, true);
    }
    var sameAuthCheck = players.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
    if (sameAuthCheck.length > 0 && !debugMode) {
        var oldPlayerArray = players.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
        for (let oldPlayer of oldPlayerArray) {
            ghostKickHandle(oldPlayer, player);
        }
    }
};

room.onPlayerTeamChange = function (changedPlayer, byPlayer) {
    handleLineupChangeTeamChange(changedPlayer);
    updateTeams();
    handleActivityPlayerTeamChange(changedPlayer);
};

room.onPlayerLeave = function (player) {
    setTimeout(() => {
        if (!kickFetchVariable) {
            if (roomWebhook != '') {
                var stringContent = `[${getDate()}] ‚¨ÖÔ∏è LEAVE (${players.length}/${maxPlayers})\n**${player.name}**` +
                    `[${authArray[player.id][0]}] {${authArray[player.id][1]}}`;
                fetch(roomWebhook, {
                    method: 'POST',
                    body: JSON.stringify({
                        content: stringContent,
                        username: roomName,
                    }),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }).then((res) => res);
            }
        } else kickFetchVariable = false;
    }, 10);
    handleLineupChangeLeave(player);
    updateTeams();
    updateAdmins();
};

room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) {
    kickFetchVariable = true;
    if (roomWebhook != '') {
        var stringContent = `[${getDate()}] ‚õî ${ban ? 'BAN' : 'KICK'} (${players.length}/${maxPlayers})\n` +
            `**${kickedPlayer.name}** [${authArray[kickedPlayer.id][0]}] {${authArray[kickedPlayer.id][1]}} was ${ban ? 'banned' : 'kicked'}` +
            `${byPlayer != null ? ' by **' + byPlayer.name + '** [' + authArray[byPlayer.id][0] + '] {' + authArray[byPlayer.id][1] + '}' : ''}`
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: stringContent,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((ban && ((byPlayer != null &&
        (byPlayer.id == kickedPlayer.id || getRole(byPlayer) < Role.MASTER)) || getRole(kickedPlayer) == Role.MASTER)) || disableBans
    ) {
        room.clearBan(kickedPlayer.id);
        return;
    }
    if (byPlayer != null && getRole(byPlayer) < Role.ADMIN_PERM) {
        room.sendAnnouncement(
            'You are not allowed to kick/ban players !',
            byPlayer.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(byPlayer.id, false);
        return;
    }
    if (ban) banList.push([kickedPlayer.name, kickedPlayer.id]);
};

/* PLAYER ACTIVITY */

room.onPlayerChat = function (player, message) {
    let msgArray = message.split(/ +/);
    if (!hideClaimMessage || msgArray[0] != '!claim') {
        if (roomWebhook != '')
            fetch(roomWebhook, {
                method: 'POST',
                body: JSON.stringify({
                    content: `[${getDate()}] üí¨ CHAT\n**${player.name}** : ${message.replace('@', '@ ')}`,
                    username: roomName,
                }),
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then((res) => res);
    }
    if (msgArray[0][0] == '!') {
        let command = getCommand(msgArray[0].slice(1).toLowerCase());
        if (command != false && commands[command].roles <= getRole(player)) commands[command].function(player, message);
        else
            room.sendAnnouncement(
                `The command you tried to enter does not exist for you. Please enter '!help' to get the available commands to you.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        return false;
    }
    if (msgArray[0].toLowerCase() == 't') {
        teamChat(player, message);
        return false;
    }
    if (msgArray[0].substring(0, 2) === '@@') {
        playerChat(player, message);
        return false;
    }
};

room.onPlayerActivity = function (player) {
    if (gameState !== State.STOP) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
};

room.onPlayerBallKick = function (player) {
    if (playSituation != Situation.GOAL) {
        var ballPosition = room.getBallPosition();
        if (game.touchArray.length == 0 || player.id != game.touchArray[game.touchArray.length - 1].player.id) {
            if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
            lastTeamTouched = player.team;
            game.touchArray.push(
                new BallTouch(
                    player,
                    game.scores.time,
                    getGoalGame(),
                    ballPosition
                )
            );
            lastTouches[0] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 1,
                getGoalGame()
            );
            lastTouches[1] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 2,
                getGoalGame()
            );
        }
    }
};

/* GAME MANAGEMENT */

room.onGameStart = function (byPlayer) {
    clearTimeout(startTimeout);
    if (byPlayer != null) clearTimeout(stopTimeout);
    game = new Game();
    possession = [0, 0];
    actionZoneHalf = [0, 0];
    gameState = State.PLAY;
    endGameVariable = false;
    goldenGoal = false;
    playSituation = Situation.KICKOFF;
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    calculateStadiumVariables();
};

room.onGameStop = function (byPlayer) {
    clearTimeout(stopTimeout);
    clearTimeout(unpauseTimeout);
    if (byPlayer != null) clearTimeout(startTimeout);
    game.rec = room.stopRecording();
    if (
        !cancelGameVariable && game.playerComp[0].length + game.playerComp[1].length > 0 &&
        (
            (game.scores.timeLimit != 0 &&
                ((game.scores.time >= 0.5 * game.scores.timeLimit &&
                    game.scores.time < 0.75 * game.scores.timeLimit &&
                    game.scores.red != game.scores.blue) ||
                    game.scores.time >= 0.75 * game.scores.timeLimit)
            ) ||
            endGameVariable
        )
    ) {
        fetchSummaryEmbed(game);
        if (fetchRecordingVariable) {
            setTimeout((gameEnd) => { fetchRecording(gameEnd); }, 500, game);
        }
    }
    cancelGameVariable = false;
    gameState = State.STOP;
    playSituation = Situation.STOP;
    updateTeams();
    handleActivityStop();
};

room.onGamePause = function (byPlayer) {
    if (mentionPlayersUnpause && gameState == State.PAUSE) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Juego pausado por ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Game paused !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
    clearTimeout(unpauseTimeout);
    gameState = State.PAUSE;
};

room.onGameUnpause = function (byPlayer) {
    unpauseTimeout = setTimeout(() => {
        gameState = State.PLAY;
    }, 2000);
    if (mentionPlayersUnpause) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Juego despausado por ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Game unpaused !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
};

room.onTeamGoal = function (team) {
    const scores = room.getScores();
    game.scores = scores;
    playSituation = Situation.GOAL;
    ballSpeed = getBallSpeed();
    var goalString = getGoalString(team);
    room.sendAnnouncement(
        goalString,
        null,
        team == Team.RED ? redColor : blueColor,
        null,
        HaxNotification.CHAT
    );
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ${goalString}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit)) || goldenGoal) {
        endGame(team);
        goldenGoal = false;
        stopTimeout = setTimeout(() => {
            room.stopGame();
        }, 1000);
    }
};

room.onPositionsReset = function () {
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    playSituation = Situation.KICKOFF;
};

/* MISCELLANEOUS */

room.onRoomLink = function (url) {
    console.log(`${url}\nmasterPassword : ${masterPassword}`);
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] üîó LINK ${url}\nmasterPassword : ${masterPassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
};

room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
    updateTeams();
    if (!changedPlayer.admin && getRole(changedPlayer) >= Role.ADMIN_TEMP) {
        room.setPlayerAdmin(changedPlayer.id, true);
        return;
    }
    updateAdmins(byPlayer != null && !changedPlayer.admin && changedPlayer.id == byPlayer.id ? changedPlayer.id : 0);
};

room.onKickRateLimitSet = function (min, rate, burst, byPlayer) {
    if (byPlayer != null) {
        room.sendAnnouncement(
            `It is not allowed to change the kickrate limit. It must stay at "6-0-0".`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setKickRateLimit(6, 0, 0);
    }
};

room.onStadiumChange = function (newStadiumName, byPlayer) {
    checkStadiumVariable = true;
};

room.onGameTick = function () {
    checkTime();
    getLastTouchOfTheBall();
    getGameStats();
    handleActivity();
};
